
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BOTTOM CALL CELL COMMA CONST DECIMAL DIV DOWN EQ FUNC GREATER LBRACKET LEFT LESS LQBRACKET MATRIX MINUS NDOWN NEWLINE NLEFT NOTEQ NRIGHT NTOP PLUS PROCENT RBRACKET RIGHT RQBRACKET SEMICOLON SHARP SIGNED STAR TESTONCE TESTREP TOP UNSIGNED VAR XRAYprogram : statestate : state statement\n                | statementstatement : declaration SEMICOLON NEWLINE\n                     | assignment SEMICOLON NEWLINE\n                     | compare SEMICOLON NEWLINE\n                     | prison SEMICOLON NEWLINEdeclaration : type VAR\n                       | type VAR ASSIGNMENT expression\n                       | CONST type VAR ASSIGNMENT expression\n                       | MATRIX type VAR\n                       | MATRIX type VAR LBRACKET expression COMMA expression RBRACKETtype : SIGNED\n                | UNSIGNED\n                | CELLexpression : math_expression\n                      | const\n                      | variable\n                      | side\n                      | compare\n                      | prison\n                      | LBRACKET expression RBRACKETside : LBRACKET directions RBRACKETdirections : direction COMMA directions\n                    | directiondirection : TOP\n                    | NTOP\n                    | LEFT\n                    | NLEFT\n                    | RIGHT\n                    | NRIGHT\n                    | DOWN\n                    | NDOWNcompare : expression EQ expression\n                    | expression LESS expression\n                    | expression GREATER expression\n                    | expression NOTEQ expressionmath_expression : expression PLUS expression\n                        | expression MINUS expression\n                        | expression STAR expression\n                        | expression DIV expression\n                        | expression PROCENT expressionconst : DECIMALvariable : VAR\n                    | VAR LBRACKET index RBRACKET LBRACKET index RBRACKETindex : UNSIGNEDprison : SHARP variableassignment : variable ASSIGNMENT expression'
    
_lr_action_items = {'CONST':([0,2,3,23,57,58,59,60,],[11,11,-3,-2,-4,-5,-6,-7,]),'MATRIX':([0,2,3,23,57,58,59,60,],[12,12,-3,-2,-4,-5,-6,-7,]),'SHARP':([0,2,3,13,23,30,31,32,33,34,35,36,37,38,55,57,58,59,60,61,81,82,88,],[15,15,-3,15,-2,15,15,15,15,15,15,15,15,15,15,-4,-5,-6,-7,15,15,15,15,]),'SIGNED':([0,2,3,11,12,23,57,58,59,60,],[16,16,-3,16,16,-2,-4,-5,-6,-7,]),'UNSIGNED':([0,2,3,11,12,23,29,57,58,59,60,84,],[17,17,-3,17,17,-2,63,-4,-5,-6,-7,63,]),'CELL':([0,2,3,11,12,23,57,58,59,60,],[18,18,-3,18,18,-2,-4,-5,-6,-7,]),'VAR':([0,2,3,8,13,15,16,17,18,23,30,31,32,33,34,35,36,37,38,39,40,55,57,58,59,60,61,81,82,88,],[9,9,-3,28,9,9,-13,-14,-15,-2,9,9,9,9,9,9,9,9,9,73,74,9,-4,-5,-6,-7,9,9,9,9,]),'LBRACKET':([0,2,3,9,13,23,30,31,32,33,34,35,36,37,38,55,57,58,59,60,61,74,80,81,82,88,],[13,13,-3,29,13,-2,13,13,13,13,13,13,13,13,13,13,-4,-5,-6,-7,13,82,84,13,13,13,]),'DECIMAL':([0,2,3,13,23,30,31,32,33,34,35,36,37,38,55,57,58,59,60,61,81,82,88,],[22,22,-3,22,-2,22,22,22,22,22,22,22,22,22,22,-4,-5,-6,-7,22,22,22,22,]),'$end':([1,2,3,23,57,58,59,60,],[0,-1,-3,-2,-4,-5,-6,-7,]),'SEMICOLON':([4,5,6,7,9,19,20,21,22,28,43,44,45,56,64,65,66,67,68,69,70,71,72,74,75,76,78,79,85,89,91,],[24,25,26,27,-44,-16,-17,-19,-43,-8,-18,-20,-21,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-11,-22,-23,-48,-9,-10,-45,-12,]),'EQ':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,30,-18,-16,-17,-19,-43,30,-18,-20,-21,-47,30,30,30,30,30,30,30,30,30,-22,-23,30,30,30,30,-45,30,]),'LESS':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,31,-18,-16,-17,-19,-43,31,-18,-20,-21,-47,31,31,31,31,31,31,31,31,31,-22,-23,31,31,31,31,-45,31,]),'GREATER':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,32,-18,-16,-17,-19,-43,32,-18,-20,-21,-47,32,32,32,32,32,32,32,32,32,-22,-23,32,32,32,32,-45,32,]),'NOTEQ':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,33,-18,-16,-17,-19,-43,33,-18,-20,-21,-47,33,33,33,33,33,33,33,33,33,-22,-23,33,33,33,33,-45,33,]),'PLUS':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,34,-18,-16,-17,-19,-43,34,-18,-20,-21,-47,34,34,34,34,34,34,34,34,34,-22,-23,34,34,34,34,-45,34,]),'MINUS':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,35,-18,-16,-17,-19,-43,35,-18,-20,-21,-47,35,35,35,35,35,35,35,35,35,-22,-23,35,35,35,35,-45,35,]),'STAR':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,36,-18,-16,-17,-19,-43,36,-18,-20,-21,-47,36,36,36,36,36,36,36,36,36,-22,-23,36,36,36,36,-45,36,]),'DIV':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,37,-18,-16,-17,-19,-43,37,-18,-20,-21,-47,37,37,37,37,37,37,37,37,37,-22,-23,37,37,37,37,-45,37,]),'PROCENT':([6,7,9,10,14,19,20,21,22,41,43,44,45,56,64,65,66,67,68,69,70,71,72,75,76,78,79,85,86,89,90,],[-20,-21,-44,38,-18,-16,-17,-19,-43,38,-18,-20,-21,-47,38,38,38,38,38,38,38,38,38,-22,-23,38,38,38,38,-45,38,]),'ASSIGNMENT':([9,14,28,73,89,],[-44,55,61,81,-45,]),'RBRACKET':([9,19,20,21,22,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,62,63,64,65,66,67,68,69,70,71,72,75,76,83,87,89,90,],[-44,-16,-17,-19,-43,75,76,-18,-20,-21,-25,-26,-27,-28,-29,-30,-31,-32,-33,-47,80,-46,-34,-35,-36,-37,-38,-39,-40,-41,-42,-22,-23,-24,89,-45,91,]),'COMMA':([9,19,20,21,22,43,44,45,46,47,48,49,50,51,52,53,54,56,64,65,66,67,68,69,70,71,72,75,76,86,89,],[-44,-16,-17,-19,-43,-18,-20,-21,77,-26,-27,-28,-29,-30,-31,-32,-33,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-22,-23,88,-45,]),'TOP':([13,77,],[47,47,]),'NTOP':([13,77,],[48,48,]),'LEFT':([13,77,],[49,49,]),'NLEFT':([13,77,],[50,50,]),'RIGHT':([13,77,],[51,51,]),'NRIGHT':([13,77,],[52,52,]),'DOWN':([13,77,],[53,53,]),'NDOWN':([13,77,],[54,54,]),'NEWLINE':([24,25,26,27,],[57,58,59,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'state':([0,],[2,]),'statement':([0,2,],[3,23,]),'declaration':([0,2,],[4,4,]),'assignment':([0,2,],[5,5,]),'compare':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[6,6,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'prison':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[7,7,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'type':([0,2,11,12,],[8,8,39,40,]),'expression':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[10,10,41,64,65,66,67,68,69,70,71,72,78,79,85,86,90,]),'variable':([0,2,13,15,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[14,14,43,56,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'math_expression':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'const':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'side':([0,2,13,30,31,32,33,34,35,36,37,38,55,61,81,82,88,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'directions':([13,77,],[42,83,]),'direction':([13,77,],[46,46,]),'index':([29,84,],[62,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> state','program',1,'p_program','parser.py',26),
  ('state -> state statement','state',2,'p_state','parser.py',30),
  ('state -> statement','state',1,'p_state','parser.py',31),
  ('statement -> declaration SEMICOLON NEWLINE','statement',3,'p_statement','parser.py',38),
  ('statement -> assignment SEMICOLON NEWLINE','statement',3,'p_statement','parser.py',39),
  ('statement -> compare SEMICOLON NEWLINE','statement',3,'p_statement','parser.py',40),
  ('statement -> prison SEMICOLON NEWLINE','statement',3,'p_statement','parser.py',41),
  ('declaration -> type VAR','declaration',2,'p_declaration','parser.py',50),
  ('declaration -> type VAR ASSIGNMENT expression','declaration',4,'p_declaration','parser.py',51),
  ('declaration -> CONST type VAR ASSIGNMENT expression','declaration',5,'p_declaration','parser.py',52),
  ('declaration -> MATRIX type VAR','declaration',3,'p_declaration','parser.py',53),
  ('declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET','declaration',8,'p_declaration','parser.py',54),
  ('type -> SIGNED','type',1,'p_type','parser.py',78),
  ('type -> UNSIGNED','type',1,'p_type','parser.py',79),
  ('type -> CELL','type',1,'p_type','parser.py',80),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',84),
  ('expression -> const','expression',1,'p_expression','parser.py',85),
  ('expression -> variable','expression',1,'p_expression','parser.py',86),
  ('expression -> side','expression',1,'p_expression','parser.py',87),
  ('expression -> compare','expression',1,'p_expression','parser.py',88),
  ('expression -> prison','expression',1,'p_expression','parser.py',89),
  ('expression -> LBRACKET expression RBRACKET','expression',3,'p_expression','parser.py',90),
  ('side -> LBRACKET directions RBRACKET','side',3,'p_side','parser.py',97),
  ('directions -> direction COMMA directions','directions',3,'p_directions','parser.py',101),
  ('directions -> direction','directions',1,'p_directions','parser.py',102),
  ('direction -> TOP','direction',1,'p_direction','parser.py',109),
  ('direction -> NTOP','direction',1,'p_direction','parser.py',110),
  ('direction -> LEFT','direction',1,'p_direction','parser.py',111),
  ('direction -> NLEFT','direction',1,'p_direction','parser.py',112),
  ('direction -> RIGHT','direction',1,'p_direction','parser.py',113),
  ('direction -> NRIGHT','direction',1,'p_direction','parser.py',114),
  ('direction -> DOWN','direction',1,'p_direction','parser.py',115),
  ('direction -> NDOWN','direction',1,'p_direction','parser.py',116),
  ('compare -> expression EQ expression','compare',3,'p_compare','parser.py',120),
  ('compare -> expression LESS expression','compare',3,'p_compare','parser.py',121),
  ('compare -> expression GREATER expression','compare',3,'p_compare','parser.py',122),
  ('compare -> expression NOTEQ expression','compare',3,'p_compare','parser.py',123),
  ('math_expression -> expression PLUS expression','math_expression',3,'p_math_expression','parser.py',128),
  ('math_expression -> expression MINUS expression','math_expression',3,'p_math_expression','parser.py',129),
  ('math_expression -> expression STAR expression','math_expression',3,'p_math_expression','parser.py',130),
  ('math_expression -> expression DIV expression','math_expression',3,'p_math_expression','parser.py',131),
  ('math_expression -> expression PROCENT expression','math_expression',3,'p_math_expression','parser.py',132),
  ('const -> DECIMAL','const',1,'p_const','parser.py',139),
  ('variable -> VAR','variable',1,'p_variable','parser.py',143),
  ('variable -> VAR LBRACKET index RBRACKET LBRACKET index RBRACKET','variable',7,'p_variable','parser.py',144),
  ('index -> UNSIGNED','index',1,'p_index','parser.py',151),
  ('prison -> SHARP variable','prison',2,'p_prison','parser.py',162),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',166),
]
