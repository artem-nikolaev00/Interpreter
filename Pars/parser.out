Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> state
Rule 2     state -> state statement
Rule 3     state -> statement
Rule 4     statement -> declaration SEMICOLON NEWLINE
Rule 5     statement -> assignment SEMICOLON NEWLINE
Rule 6     statement -> compare SEMICOLON NEWLINE
Rule 7     statement -> prison SEMICOLON NEWLINE
Rule 8     statement -> if NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> operator SEMICOLON NEWLINE
Rule 11    statement -> function NEWLINE
Rule 12    statement -> function_call SEMICOLON NEWLINE
Rule 13    statement -> declaration error NEWLINE
Rule 14    statement -> assignment error NEWLINE
Rule 15    statement -> compare error NEWLINE
Rule 16    statement -> prison error NEWLINE
Rule 17    statement -> operator error NEWLINE
Rule 18    statement -> function_call error NEWLINE
Rule 19    declaration -> type VAR
Rule 20    declaration -> type VAR ASSIGNMENT expression
Rule 21    declaration -> CONST type VAR ASSIGNMENT expression
Rule 22    declaration -> MATRIX type VAR
Rule 23    declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
Rule 24    declaration -> error VAR
Rule 25    declaration -> error VAR ASSIGNMENT expression
Rule 26    declaration -> CONST error VAR ASSIGNMENT expression
Rule 27    declaration -> MATRIX error VAR
Rule 28    declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
Rule 29    type -> SIGNED
Rule 30    type -> UNSIGNED
Rule 31    type -> CELL
Rule 32    expression -> math_expression
Rule 33    expression -> const
Rule 34    expression -> variable
Rule 35    expression -> side
Rule 36    expression -> compare
Rule 37    expression -> prison
Rule 38    expression -> LBRACKET expression RBRACKET
Rule 39    side -> LBRACKET directions RBRACKET
Rule 40    directions -> direction COMMA directions
Rule 41    directions -> direction
Rule 42    direction -> TOP
Rule 43    direction -> NTOP
Rule 44    direction -> LEFT
Rule 45    direction -> NLEFT
Rule 46    direction -> RIGHT
Rule 47    direction -> NRIGHT
Rule 48    direction -> DOWN
Rule 49    direction -> NDOWN
Rule 50    direction -> BOTTOM
Rule 51    compare -> expression EQ expression
Rule 52    compare -> expression LESS expression
Rule 53    compare -> expression GREATER expression
Rule 54    compare -> expression NOTEQ expression
Rule 55    math_expression -> expression PLUS expression
Rule 56    math_expression -> expression MINUS expression
Rule 57    math_expression -> expression STAR expression
Rule 58    math_expression -> expression DIV expression
Rule 59    math_expression -> expression PROCENT expression
Rule 60    const -> DECIMAL
Rule 61    variable -> VAR
Rule 62    variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
Rule 63    index -> UNSIGNED
Rule 64    prison -> SHARP variable
Rule 65    assignment -> variable ASSIGNMENT expression
Rule 66    if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 67    if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 68    while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 69    while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 70    operator -> variable ASSIGNMENT robot
Rule 71    robot -> direction
Rule 72    robot -> XRAY
Rule 73    function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 74    function_call -> CALL VAR LBRACKET vars RBRACKET
Rule 75    vars -> vars
Rule 76    vars -> VAR
Rule 77    parameters -> type VAR COMMA parameters
Rule 78    parameters -> type VAR

Terminals, with rules where they appear

ASSIGNMENT           : 20 21 25 26 65 70
BOTTOM               : 50
CALL                 : 74
CELL                 : 31
COMMA                : 23 28 40 77
CONST                : 21 26
DECIMAL              : 60
DIV                  : 58
DOWN                 : 48
EQ                   : 51
FUNC                 : 73
GREATER              : 53
LBRACKET             : 23 28 38 39 66 66 67 67 68 68 69 69 73 73 74
LEFT                 : 44
LESS                 : 52
LQBRACKET            : 62 62
MATRIX               : 22 23 27 28
MINUS                : 56
NDOWN                : 49
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 66 67 68 69 73
NLEFT                : 45
NOTEQ                : 54
NRIGHT               : 47
NTOP                 : 43
PLUS                 : 55
PROCENT              : 59
RBRACKET             : 23 28 38 39 62 66 66 67 67 68 68 69 69 73 73 74
RIGHT                : 46
RQBRACKET            : 62
SEMICOLON            : 4 5 6 7 10 12
SHARP                : 64
SIGNED               : 29
STAR                 : 57
TESTONCE             : 66 67
TESTREP              : 68 69
TOP                  : 42
UNSIGNED             : 30 63
VAR                  : 19 20 21 22 23 24 25 26 27 28 61 62 73 74 76 77 78
XRAY                 : 72
error                : 13 14 15 16 17 18 24 25 26 27 28

Nonterminals, with rules where they appear

assignment           : 5 14
compare              : 6 15 36 67 69
const                : 33
declaration          : 4 13
direction            : 40 41 71
directions           : 39 40
expression           : 20 21 23 23 25 26 28 28 38 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 65
function             : 11
function_call        : 12 18
if                   : 8
index                : 62 62
math_expression      : 32 66 68
operator             : 10 17
parameters           : 73 77
prison               : 7 16 37
program              : 0
robot                : 70
side                 : 35
state                : 1 2 66 67 68 69 73
statement            : 2 3
type                 : 19 20 21 22 23 77 78
variable             : 34 64 65 70
vars                 : 74 75
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . state
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    program                        shift and go to state 1
    state                          shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 1

    (0) S' -> program .



state 2

    (1) program -> state .
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    $end            reduce using rule 1 (program -> state .)
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 3

    (3) state -> statement .

    CONST           reduce using rule 3 (state -> statement .)
    MATRIX          reduce using rule 3 (state -> statement .)
    error           reduce using rule 3 (state -> statement .)
    SHARP           reduce using rule 3 (state -> statement .)
    TESTONCE        reduce using rule 3 (state -> statement .)
    TESTREP         reduce using rule 3 (state -> statement .)
    FUNC            reduce using rule 3 (state -> statement .)
    CALL            reduce using rule 3 (state -> statement .)
    SIGNED          reduce using rule 3 (state -> statement .)
    UNSIGNED        reduce using rule 3 (state -> statement .)
    CELL            reduce using rule 3 (state -> statement .)
    VAR             reduce using rule 3 (state -> statement .)
    LBRACKET        reduce using rule 3 (state -> statement .)
    DECIMAL         reduce using rule 3 (state -> statement .)
    $end            reduce using rule 3 (state -> statement .)
    RBRACKET        reduce using rule 3 (state -> statement .)


state 4

    (4) statement -> declaration . SEMICOLON NEWLINE
    (13) statement -> declaration . error NEWLINE

    SEMICOLON       shift and go to state 34
    error           shift and go to state 35


state 5

    (5) statement -> assignment . SEMICOLON NEWLINE
    (14) statement -> assignment . error NEWLINE

    SEMICOLON       shift and go to state 36
    error           shift and go to state 37


state 6

    (6) statement -> compare . SEMICOLON NEWLINE
    (15) statement -> compare . error NEWLINE
    (36) expression -> compare .

    SEMICOLON       shift and go to state 38
    error           shift and go to state 39
    EQ              reduce using rule 36 (expression -> compare .)
    LESS            reduce using rule 36 (expression -> compare .)
    GREATER         reduce using rule 36 (expression -> compare .)
    NOTEQ           reduce using rule 36 (expression -> compare .)
    PLUS            reduce using rule 36 (expression -> compare .)
    MINUS           reduce using rule 36 (expression -> compare .)
    STAR            reduce using rule 36 (expression -> compare .)
    DIV             reduce using rule 36 (expression -> compare .)
    PROCENT         reduce using rule 36 (expression -> compare .)


state 7

    (7) statement -> prison . SEMICOLON NEWLINE
    (16) statement -> prison . error NEWLINE
    (37) expression -> prison .

    SEMICOLON       shift and go to state 40
    error           shift and go to state 41
    EQ              reduce using rule 37 (expression -> prison .)
    LESS            reduce using rule 37 (expression -> prison .)
    GREATER         reduce using rule 37 (expression -> prison .)
    NOTEQ           reduce using rule 37 (expression -> prison .)
    PLUS            reduce using rule 37 (expression -> prison .)
    MINUS           reduce using rule 37 (expression -> prison .)
    STAR            reduce using rule 37 (expression -> prison .)
    DIV             reduce using rule 37 (expression -> prison .)
    PROCENT         reduce using rule 37 (expression -> prison .)


state 8

    (8) statement -> if . NEWLINE

    NEWLINE         shift and go to state 42


state 9

    (9) statement -> while . NEWLINE

    NEWLINE         shift and go to state 43


state 10

    (10) statement -> operator . SEMICOLON NEWLINE
    (17) statement -> operator . error NEWLINE

    SEMICOLON       shift and go to state 44
    error           shift and go to state 45


state 11

    (11) statement -> function . NEWLINE

    NEWLINE         shift and go to state 46


state 12

    (12) statement -> function_call . SEMICOLON NEWLINE
    (18) statement -> function_call . error NEWLINE

    SEMICOLON       shift and go to state 47
    error           shift and go to state 48


state 13

    (24) declaration -> error . VAR
    (25) declaration -> error . VAR ASSIGNMENT expression

    VAR             shift and go to state 49


state 14

    (19) declaration -> type . VAR
    (20) declaration -> type . VAR ASSIGNMENT expression

    VAR             shift and go to state 50


state 15

    (61) variable -> VAR .
    (62) variable -> VAR . LQBRACKET index RBRACKET LQBRACKET index RQBRACKET

    ASSIGNMENT      reduce using rule 61 (variable -> VAR .)
    EQ              reduce using rule 61 (variable -> VAR .)
    LESS            reduce using rule 61 (variable -> VAR .)
    GREATER         reduce using rule 61 (variable -> VAR .)
    NOTEQ           reduce using rule 61 (variable -> VAR .)
    PLUS            reduce using rule 61 (variable -> VAR .)
    MINUS           reduce using rule 61 (variable -> VAR .)
    STAR            reduce using rule 61 (variable -> VAR .)
    DIV             reduce using rule 61 (variable -> VAR .)
    PROCENT         reduce using rule 61 (variable -> VAR .)
    RBRACKET        reduce using rule 61 (variable -> VAR .)
    SEMICOLON       reduce using rule 61 (variable -> VAR .)
    error           reduce using rule 61 (variable -> VAR .)
    COMMA           reduce using rule 61 (variable -> VAR .)
    LQBRACKET       shift and go to state 51


state 16

    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression

    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60


state 17

    (21) declaration -> CONST . type VAR ASSIGNMENT expression
    (26) declaration -> CONST . error VAR ASSIGNMENT expression
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL

    error           shift and go to state 62
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29

    type                           shift and go to state 61

state 18

    (22) declaration -> MATRIX . type VAR
    (23) declaration -> MATRIX . type VAR LBRACKET expression COMMA expression RBRACKET
    (27) declaration -> MATRIX . error VAR
    (28) declaration -> MATRIX . error VAR LBRACKET expression COMMA expression RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL

    error           shift and go to state 64
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29

    type                           shift and go to state 63

state 19

    (38) expression -> LBRACKET . expression RBRACKET
    (39) side -> LBRACKET . directions RBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (40) directions -> . direction COMMA directions
    (41) directions -> . direction
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (42) direction -> . TOP
    (43) direction -> . NTOP
    (44) direction -> . LEFT
    (45) direction -> . NLEFT
    (46) direction -> . RIGHT
    (47) direction -> . NRIGHT
    (48) direction -> . DOWN
    (49) direction -> . NDOWN
    (50) direction -> . BOTTOM

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21
    TOP             shift and go to state 71
    NTOP            shift and go to state 72
    LEFT            shift and go to state 73
    NLEFT           shift and go to state 74
    RIGHT           shift and go to state 75
    NRIGHT          shift and go to state 76
    DOWN            shift and go to state 77
    NDOWN           shift and go to state 78
    BOTTOM          shift and go to state 79

    expression                     shift and go to state 65
    directions                     shift and go to state 66
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69
    direction                      shift and go to state 70

state 20

    (65) assignment -> variable . ASSIGNMENT expression
    (70) operator -> variable . ASSIGNMENT robot
    (34) expression -> variable .

    ASSIGNMENT      shift and go to state 80
    EQ              reduce using rule 34 (expression -> variable .)
    LESS            reduce using rule 34 (expression -> variable .)
    GREATER         reduce using rule 34 (expression -> variable .)
    NOTEQ           reduce using rule 34 (expression -> variable .)
    PLUS            reduce using rule 34 (expression -> variable .)
    MINUS           reduce using rule 34 (expression -> variable .)
    STAR            reduce using rule 34 (expression -> variable .)
    DIV             reduce using rule 34 (expression -> variable .)
    PROCENT         reduce using rule 34 (expression -> variable .)


state 21

    (64) prison -> SHARP . variable
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET

    VAR             shift and go to state 15

    variable                       shift and go to state 81

state 22

    (66) if -> TESTONCE . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> TESTONCE . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 82


state 23

    (32) expression -> math_expression .

    EQ              reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)
    NOTEQ           reduce using rule 32 (expression -> math_expression .)
    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    STAR            reduce using rule 32 (expression -> math_expression .)
    DIV             reduce using rule 32 (expression -> math_expression .)
    PROCENT         reduce using rule 32 (expression -> math_expression .)
    RBRACKET        reduce using rule 32 (expression -> math_expression .)
    SEMICOLON       reduce using rule 32 (expression -> math_expression .)
    error           reduce using rule 32 (expression -> math_expression .)
    COMMA           reduce using rule 32 (expression -> math_expression .)


state 24

    (68) while -> TESTREP . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> TESTREP . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 83


state 25

    (73) function -> FUNC . VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET

    VAR             shift and go to state 84


state 26

    (74) function_call -> CALL . VAR LBRACKET vars RBRACKET

    VAR             shift and go to state 85


state 27

    (29) type -> SIGNED .

    VAR             reduce using rule 29 (type -> SIGNED .)


state 28

    (30) type -> UNSIGNED .

    VAR             reduce using rule 30 (type -> UNSIGNED .)


state 29

    (31) type -> CELL .

    VAR             reduce using rule 31 (type -> CELL .)


state 30

    (33) expression -> const .

    EQ              reduce using rule 33 (expression -> const .)
    LESS            reduce using rule 33 (expression -> const .)
    GREATER         reduce using rule 33 (expression -> const .)
    NOTEQ           reduce using rule 33 (expression -> const .)
    PLUS            reduce using rule 33 (expression -> const .)
    MINUS           reduce using rule 33 (expression -> const .)
    STAR            reduce using rule 33 (expression -> const .)
    DIV             reduce using rule 33 (expression -> const .)
    PROCENT         reduce using rule 33 (expression -> const .)
    RBRACKET        reduce using rule 33 (expression -> const .)
    SEMICOLON       reduce using rule 33 (expression -> const .)
    error           reduce using rule 33 (expression -> const .)
    COMMA           reduce using rule 33 (expression -> const .)


state 31

    (35) expression -> side .

    EQ              reduce using rule 35 (expression -> side .)
    LESS            reduce using rule 35 (expression -> side .)
    GREATER         reduce using rule 35 (expression -> side .)
    NOTEQ           reduce using rule 35 (expression -> side .)
    PLUS            reduce using rule 35 (expression -> side .)
    MINUS           reduce using rule 35 (expression -> side .)
    STAR            reduce using rule 35 (expression -> side .)
    DIV             reduce using rule 35 (expression -> side .)
    PROCENT         reduce using rule 35 (expression -> side .)
    RBRACKET        reduce using rule 35 (expression -> side .)
    SEMICOLON       reduce using rule 35 (expression -> side .)
    error           reduce using rule 35 (expression -> side .)
    COMMA           reduce using rule 35 (expression -> side .)


state 32

    (60) const -> DECIMAL .

    EQ              reduce using rule 60 (const -> DECIMAL .)
    LESS            reduce using rule 60 (const -> DECIMAL .)
    GREATER         reduce using rule 60 (const -> DECIMAL .)
    NOTEQ           reduce using rule 60 (const -> DECIMAL .)
    PLUS            reduce using rule 60 (const -> DECIMAL .)
    MINUS           reduce using rule 60 (const -> DECIMAL .)
    STAR            reduce using rule 60 (const -> DECIMAL .)
    DIV             reduce using rule 60 (const -> DECIMAL .)
    PROCENT         reduce using rule 60 (const -> DECIMAL .)
    RBRACKET        reduce using rule 60 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 60 (const -> DECIMAL .)
    error           reduce using rule 60 (const -> DECIMAL .)
    COMMA           reduce using rule 60 (const -> DECIMAL .)


state 33

    (2) state -> state statement .

    CONST           reduce using rule 2 (state -> state statement .)
    MATRIX          reduce using rule 2 (state -> state statement .)
    error           reduce using rule 2 (state -> state statement .)
    SHARP           reduce using rule 2 (state -> state statement .)
    TESTONCE        reduce using rule 2 (state -> state statement .)
    TESTREP         reduce using rule 2 (state -> state statement .)
    FUNC            reduce using rule 2 (state -> state statement .)
    CALL            reduce using rule 2 (state -> state statement .)
    SIGNED          reduce using rule 2 (state -> state statement .)
    UNSIGNED        reduce using rule 2 (state -> state statement .)
    CELL            reduce using rule 2 (state -> state statement .)
    VAR             reduce using rule 2 (state -> state statement .)
    LBRACKET        reduce using rule 2 (state -> state statement .)
    DECIMAL         reduce using rule 2 (state -> state statement .)
    $end            reduce using rule 2 (state -> state statement .)
    RBRACKET        reduce using rule 2 (state -> state statement .)


state 34

    (4) statement -> declaration SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 86


state 35

    (13) statement -> declaration error . NEWLINE

    NEWLINE         shift and go to state 87


state 36

    (5) statement -> assignment SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 88


state 37

    (14) statement -> assignment error . NEWLINE

    NEWLINE         shift and go to state 89


state 38

    (6) statement -> compare SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 90


state 39

    (15) statement -> compare error . NEWLINE

    NEWLINE         shift and go to state 91


state 40

    (7) statement -> prison SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 92


state 41

    (16) statement -> prison error . NEWLINE

    NEWLINE         shift and go to state 93


state 42

    (8) statement -> if NEWLINE .

    CONST           reduce using rule 8 (statement -> if NEWLINE .)
    MATRIX          reduce using rule 8 (statement -> if NEWLINE .)
    error           reduce using rule 8 (statement -> if NEWLINE .)
    SHARP           reduce using rule 8 (statement -> if NEWLINE .)
    TESTONCE        reduce using rule 8 (statement -> if NEWLINE .)
    TESTREP         reduce using rule 8 (statement -> if NEWLINE .)
    FUNC            reduce using rule 8 (statement -> if NEWLINE .)
    CALL            reduce using rule 8 (statement -> if NEWLINE .)
    SIGNED          reduce using rule 8 (statement -> if NEWLINE .)
    UNSIGNED        reduce using rule 8 (statement -> if NEWLINE .)
    CELL            reduce using rule 8 (statement -> if NEWLINE .)
    VAR             reduce using rule 8 (statement -> if NEWLINE .)
    LBRACKET        reduce using rule 8 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 8 (statement -> if NEWLINE .)
    $end            reduce using rule 8 (statement -> if NEWLINE .)
    RBRACKET        reduce using rule 8 (statement -> if NEWLINE .)


state 43

    (9) statement -> while NEWLINE .

    CONST           reduce using rule 9 (statement -> while NEWLINE .)
    MATRIX          reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    SHARP           reduce using rule 9 (statement -> while NEWLINE .)
    TESTONCE        reduce using rule 9 (statement -> while NEWLINE .)
    TESTREP         reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    SIGNED          reduce using rule 9 (statement -> while NEWLINE .)
    UNSIGNED        reduce using rule 9 (statement -> while NEWLINE .)
    CELL            reduce using rule 9 (statement -> while NEWLINE .)
    VAR             reduce using rule 9 (statement -> while NEWLINE .)
    LBRACKET        reduce using rule 9 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    RBRACKET        reduce using rule 9 (statement -> while NEWLINE .)


state 44

    (10) statement -> operator SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 94


state 45

    (17) statement -> operator error . NEWLINE

    NEWLINE         shift and go to state 95


state 46

    (11) statement -> function NEWLINE .

    CONST           reduce using rule 11 (statement -> function NEWLINE .)
    MATRIX          reduce using rule 11 (statement -> function NEWLINE .)
    error           reduce using rule 11 (statement -> function NEWLINE .)
    SHARP           reduce using rule 11 (statement -> function NEWLINE .)
    TESTONCE        reduce using rule 11 (statement -> function NEWLINE .)
    TESTREP         reduce using rule 11 (statement -> function NEWLINE .)
    FUNC            reduce using rule 11 (statement -> function NEWLINE .)
    CALL            reduce using rule 11 (statement -> function NEWLINE .)
    SIGNED          reduce using rule 11 (statement -> function NEWLINE .)
    UNSIGNED        reduce using rule 11 (statement -> function NEWLINE .)
    CELL            reduce using rule 11 (statement -> function NEWLINE .)
    VAR             reduce using rule 11 (statement -> function NEWLINE .)
    LBRACKET        reduce using rule 11 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 11 (statement -> function NEWLINE .)
    $end            reduce using rule 11 (statement -> function NEWLINE .)
    RBRACKET        reduce using rule 11 (statement -> function NEWLINE .)


state 47

    (12) statement -> function_call SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 96


state 48

    (18) statement -> function_call error . NEWLINE

    NEWLINE         shift and go to state 97


state 49

    (24) declaration -> error VAR .
    (25) declaration -> error VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 24 (declaration -> error VAR .)
    error           reduce using rule 24 (declaration -> error VAR .)
    ASSIGNMENT      shift and go to state 98


state 50

    (19) declaration -> type VAR .
    (20) declaration -> type VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 19 (declaration -> type VAR .)
    error           reduce using rule 19 (declaration -> type VAR .)
    ASSIGNMENT      shift and go to state 99


state 51

    (62) variable -> VAR LQBRACKET . index RBRACKET LQBRACKET index RQBRACKET
    (63) index -> . UNSIGNED

    UNSIGNED        shift and go to state 101

    index                          shift and go to state 100

state 52

    (51) compare -> expression EQ . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 102
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 53

    (52) compare -> expression LESS . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 103
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 54

    (53) compare -> expression GREATER . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 104
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 55

    (54) compare -> expression NOTEQ . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 105
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 56

    (55) math_expression -> expression PLUS . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 106
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 57

    (56) math_expression -> expression MINUS . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 107
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 58

    (57) math_expression -> expression STAR . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 108
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 59

    (58) math_expression -> expression DIV . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 109
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 60

    (59) math_expression -> expression PROCENT . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 110
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 61

    (21) declaration -> CONST type . VAR ASSIGNMENT expression

    VAR             shift and go to state 111


state 62

    (26) declaration -> CONST error . VAR ASSIGNMENT expression

    VAR             shift and go to state 112


state 63

    (22) declaration -> MATRIX type . VAR
    (23) declaration -> MATRIX type . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 113


state 64

    (27) declaration -> MATRIX error . VAR
    (28) declaration -> MATRIX error . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 114


state 65

    (38) expression -> LBRACKET expression . RBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 115
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 66

    (39) side -> LBRACKET directions . RBRACKET

    RBRACKET        shift and go to state 116


state 67

    (34) expression -> variable .

    RBRACKET        reduce using rule 34 (expression -> variable .)
    PLUS            reduce using rule 34 (expression -> variable .)
    MINUS           reduce using rule 34 (expression -> variable .)
    STAR            reduce using rule 34 (expression -> variable .)
    DIV             reduce using rule 34 (expression -> variable .)
    PROCENT         reduce using rule 34 (expression -> variable .)
    EQ              reduce using rule 34 (expression -> variable .)
    LESS            reduce using rule 34 (expression -> variable .)
    GREATER         reduce using rule 34 (expression -> variable .)
    NOTEQ           reduce using rule 34 (expression -> variable .)
    SEMICOLON       reduce using rule 34 (expression -> variable .)
    error           reduce using rule 34 (expression -> variable .)
    COMMA           reduce using rule 34 (expression -> variable .)


state 68

    (36) expression -> compare .

    RBRACKET        reduce using rule 36 (expression -> compare .)
    PLUS            reduce using rule 36 (expression -> compare .)
    MINUS           reduce using rule 36 (expression -> compare .)
    STAR            reduce using rule 36 (expression -> compare .)
    DIV             reduce using rule 36 (expression -> compare .)
    PROCENT         reduce using rule 36 (expression -> compare .)
    EQ              reduce using rule 36 (expression -> compare .)
    LESS            reduce using rule 36 (expression -> compare .)
    GREATER         reduce using rule 36 (expression -> compare .)
    NOTEQ           reduce using rule 36 (expression -> compare .)
    SEMICOLON       reduce using rule 36 (expression -> compare .)
    error           reduce using rule 36 (expression -> compare .)
    COMMA           reduce using rule 36 (expression -> compare .)


state 69

    (37) expression -> prison .

    RBRACKET        reduce using rule 37 (expression -> prison .)
    PLUS            reduce using rule 37 (expression -> prison .)
    MINUS           reduce using rule 37 (expression -> prison .)
    STAR            reduce using rule 37 (expression -> prison .)
    DIV             reduce using rule 37 (expression -> prison .)
    PROCENT         reduce using rule 37 (expression -> prison .)
    EQ              reduce using rule 37 (expression -> prison .)
    LESS            reduce using rule 37 (expression -> prison .)
    GREATER         reduce using rule 37 (expression -> prison .)
    NOTEQ           reduce using rule 37 (expression -> prison .)
    SEMICOLON       reduce using rule 37 (expression -> prison .)
    error           reduce using rule 37 (expression -> prison .)
    COMMA           reduce using rule 37 (expression -> prison .)


state 70

    (40) directions -> direction . COMMA directions
    (41) directions -> direction .

    COMMA           shift and go to state 117
    RBRACKET        reduce using rule 41 (directions -> direction .)


state 71

    (42) direction -> TOP .

    COMMA           reduce using rule 42 (direction -> TOP .)
    RBRACKET        reduce using rule 42 (direction -> TOP .)
    SEMICOLON       reduce using rule 42 (direction -> TOP .)
    error           reduce using rule 42 (direction -> TOP .)


state 72

    (43) direction -> NTOP .

    COMMA           reduce using rule 43 (direction -> NTOP .)
    RBRACKET        reduce using rule 43 (direction -> NTOP .)
    SEMICOLON       reduce using rule 43 (direction -> NTOP .)
    error           reduce using rule 43 (direction -> NTOP .)


state 73

    (44) direction -> LEFT .

    COMMA           reduce using rule 44 (direction -> LEFT .)
    RBRACKET        reduce using rule 44 (direction -> LEFT .)
    SEMICOLON       reduce using rule 44 (direction -> LEFT .)
    error           reduce using rule 44 (direction -> LEFT .)


state 74

    (45) direction -> NLEFT .

    COMMA           reduce using rule 45 (direction -> NLEFT .)
    RBRACKET        reduce using rule 45 (direction -> NLEFT .)
    SEMICOLON       reduce using rule 45 (direction -> NLEFT .)
    error           reduce using rule 45 (direction -> NLEFT .)


state 75

    (46) direction -> RIGHT .

    COMMA           reduce using rule 46 (direction -> RIGHT .)
    RBRACKET        reduce using rule 46 (direction -> RIGHT .)
    SEMICOLON       reduce using rule 46 (direction -> RIGHT .)
    error           reduce using rule 46 (direction -> RIGHT .)


state 76

    (47) direction -> NRIGHT .

    COMMA           reduce using rule 47 (direction -> NRIGHT .)
    RBRACKET        reduce using rule 47 (direction -> NRIGHT .)
    SEMICOLON       reduce using rule 47 (direction -> NRIGHT .)
    error           reduce using rule 47 (direction -> NRIGHT .)


state 77

    (48) direction -> DOWN .

    COMMA           reduce using rule 48 (direction -> DOWN .)
    RBRACKET        reduce using rule 48 (direction -> DOWN .)
    SEMICOLON       reduce using rule 48 (direction -> DOWN .)
    error           reduce using rule 48 (direction -> DOWN .)


state 78

    (49) direction -> NDOWN .

    COMMA           reduce using rule 49 (direction -> NDOWN .)
    RBRACKET        reduce using rule 49 (direction -> NDOWN .)
    SEMICOLON       reduce using rule 49 (direction -> NDOWN .)
    error           reduce using rule 49 (direction -> NDOWN .)


state 79

    (50) direction -> BOTTOM .

    COMMA           reduce using rule 50 (direction -> BOTTOM .)
    RBRACKET        reduce using rule 50 (direction -> BOTTOM .)
    SEMICOLON       reduce using rule 50 (direction -> BOTTOM .)
    error           reduce using rule 50 (direction -> BOTTOM .)


state 80

    (65) assignment -> variable ASSIGNMENT . expression
    (70) operator -> variable ASSIGNMENT . robot
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (71) robot -> . direction
    (72) robot -> . XRAY
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (42) direction -> . TOP
    (43) direction -> . NTOP
    (44) direction -> . LEFT
    (45) direction -> . NLEFT
    (46) direction -> . RIGHT
    (47) direction -> . NRIGHT
    (48) direction -> . DOWN
    (49) direction -> . NDOWN
    (50) direction -> . BOTTOM

    LBRACKET        shift and go to state 19
    XRAY            shift and go to state 121
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21
    TOP             shift and go to state 71
    NTOP            shift and go to state 72
    LEFT            shift and go to state 73
    NLEFT           shift and go to state 74
    RIGHT           shift and go to state 75
    NRIGHT          shift and go to state 76
    DOWN            shift and go to state 77
    NDOWN           shift and go to state 78
    BOTTOM          shift and go to state 79

    variable                       shift and go to state 67
    expression                     shift and go to state 118
    robot                          shift and go to state 119
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69
    direction                      shift and go to state 120

state 81

    (64) prison -> SHARP variable .

    SEMICOLON       reduce using rule 64 (prison -> SHARP variable .)
    error           reduce using rule 64 (prison -> SHARP variable .)
    EQ              reduce using rule 64 (prison -> SHARP variable .)
    LESS            reduce using rule 64 (prison -> SHARP variable .)
    GREATER         reduce using rule 64 (prison -> SHARP variable .)
    NOTEQ           reduce using rule 64 (prison -> SHARP variable .)
    PLUS            reduce using rule 64 (prison -> SHARP variable .)
    MINUS           reduce using rule 64 (prison -> SHARP variable .)
    STAR            reduce using rule 64 (prison -> SHARP variable .)
    DIV             reduce using rule 64 (prison -> SHARP variable .)
    PROCENT         reduce using rule 64 (prison -> SHARP variable .)
    RBRACKET        reduce using rule 64 (prison -> SHARP variable .)
    COMMA           reduce using rule 64 (prison -> SHARP variable .)


state 82

    (66) if -> TESTONCE LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> TESTONCE LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    math_expression                shift and go to state 122
    compare                        shift and go to state 123
    expression                     shift and go to state 124
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    prison                         shift and go to state 69

state 83

    (68) while -> TESTREP LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> TESTREP LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    math_expression                shift and go to state 125
    compare                        shift and go to state 126
    expression                     shift and go to state 124
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    prison                         shift and go to state 69

state 84

    (73) function -> FUNC VAR . LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 127


state 85

    (74) function_call -> CALL VAR . LBRACKET vars RBRACKET

    LBRACKET        shift and go to state 128


state 86

    (4) statement -> declaration SEMICOLON NEWLINE .

    CONST           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    error           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SHARP           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    FUNC            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CALL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CELL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    VAR             reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)


state 87

    (13) statement -> declaration error NEWLINE .

    CONST           reduce using rule 13 (statement -> declaration error NEWLINE .)
    MATRIX          reduce using rule 13 (statement -> declaration error NEWLINE .)
    error           reduce using rule 13 (statement -> declaration error NEWLINE .)
    SHARP           reduce using rule 13 (statement -> declaration error NEWLINE .)
    TESTONCE        reduce using rule 13 (statement -> declaration error NEWLINE .)
    TESTREP         reduce using rule 13 (statement -> declaration error NEWLINE .)
    FUNC            reduce using rule 13 (statement -> declaration error NEWLINE .)
    CALL            reduce using rule 13 (statement -> declaration error NEWLINE .)
    SIGNED          reduce using rule 13 (statement -> declaration error NEWLINE .)
    UNSIGNED        reduce using rule 13 (statement -> declaration error NEWLINE .)
    CELL            reduce using rule 13 (statement -> declaration error NEWLINE .)
    VAR             reduce using rule 13 (statement -> declaration error NEWLINE .)
    LBRACKET        reduce using rule 13 (statement -> declaration error NEWLINE .)
    DECIMAL         reduce using rule 13 (statement -> declaration error NEWLINE .)
    $end            reduce using rule 13 (statement -> declaration error NEWLINE .)
    RBRACKET        reduce using rule 13 (statement -> declaration error NEWLINE .)


state 88

    (5) statement -> assignment SEMICOLON NEWLINE .

    CONST           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    error           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SHARP           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    FUNC            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CALL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CELL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    VAR             reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)


state 89

    (14) statement -> assignment error NEWLINE .

    CONST           reduce using rule 14 (statement -> assignment error NEWLINE .)
    MATRIX          reduce using rule 14 (statement -> assignment error NEWLINE .)
    error           reduce using rule 14 (statement -> assignment error NEWLINE .)
    SHARP           reduce using rule 14 (statement -> assignment error NEWLINE .)
    TESTONCE        reduce using rule 14 (statement -> assignment error NEWLINE .)
    TESTREP         reduce using rule 14 (statement -> assignment error NEWLINE .)
    FUNC            reduce using rule 14 (statement -> assignment error NEWLINE .)
    CALL            reduce using rule 14 (statement -> assignment error NEWLINE .)
    SIGNED          reduce using rule 14 (statement -> assignment error NEWLINE .)
    UNSIGNED        reduce using rule 14 (statement -> assignment error NEWLINE .)
    CELL            reduce using rule 14 (statement -> assignment error NEWLINE .)
    VAR             reduce using rule 14 (statement -> assignment error NEWLINE .)
    LBRACKET        reduce using rule 14 (statement -> assignment error NEWLINE .)
    DECIMAL         reduce using rule 14 (statement -> assignment error NEWLINE .)
    $end            reduce using rule 14 (statement -> assignment error NEWLINE .)
    RBRACKET        reduce using rule 14 (statement -> assignment error NEWLINE .)


state 90

    (6) statement -> compare SEMICOLON NEWLINE .

    CONST           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    error           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SHARP           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    FUNC            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CALL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CELL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    VAR             reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    $end            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)


state 91

    (15) statement -> compare error NEWLINE .

    CONST           reduce using rule 15 (statement -> compare error NEWLINE .)
    MATRIX          reduce using rule 15 (statement -> compare error NEWLINE .)
    error           reduce using rule 15 (statement -> compare error NEWLINE .)
    SHARP           reduce using rule 15 (statement -> compare error NEWLINE .)
    TESTONCE        reduce using rule 15 (statement -> compare error NEWLINE .)
    TESTREP         reduce using rule 15 (statement -> compare error NEWLINE .)
    FUNC            reduce using rule 15 (statement -> compare error NEWLINE .)
    CALL            reduce using rule 15 (statement -> compare error NEWLINE .)
    SIGNED          reduce using rule 15 (statement -> compare error NEWLINE .)
    UNSIGNED        reduce using rule 15 (statement -> compare error NEWLINE .)
    CELL            reduce using rule 15 (statement -> compare error NEWLINE .)
    VAR             reduce using rule 15 (statement -> compare error NEWLINE .)
    LBRACKET        reduce using rule 15 (statement -> compare error NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> compare error NEWLINE .)
    $end            reduce using rule 15 (statement -> compare error NEWLINE .)
    RBRACKET        reduce using rule 15 (statement -> compare error NEWLINE .)


state 92

    (7) statement -> prison SEMICOLON NEWLINE .

    CONST           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    error           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SHARP           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    FUNC            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CALL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CELL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    VAR             reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    $end            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)


state 93

    (16) statement -> prison error NEWLINE .

    CONST           reduce using rule 16 (statement -> prison error NEWLINE .)
    MATRIX          reduce using rule 16 (statement -> prison error NEWLINE .)
    error           reduce using rule 16 (statement -> prison error NEWLINE .)
    SHARP           reduce using rule 16 (statement -> prison error NEWLINE .)
    TESTONCE        reduce using rule 16 (statement -> prison error NEWLINE .)
    TESTREP         reduce using rule 16 (statement -> prison error NEWLINE .)
    FUNC            reduce using rule 16 (statement -> prison error NEWLINE .)
    CALL            reduce using rule 16 (statement -> prison error NEWLINE .)
    SIGNED          reduce using rule 16 (statement -> prison error NEWLINE .)
    UNSIGNED        reduce using rule 16 (statement -> prison error NEWLINE .)
    CELL            reduce using rule 16 (statement -> prison error NEWLINE .)
    VAR             reduce using rule 16 (statement -> prison error NEWLINE .)
    LBRACKET        reduce using rule 16 (statement -> prison error NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> prison error NEWLINE .)
    $end            reduce using rule 16 (statement -> prison error NEWLINE .)
    RBRACKET        reduce using rule 16 (statement -> prison error NEWLINE .)


state 94

    (10) statement -> operator SEMICOLON NEWLINE .

    CONST           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    error           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SHARP           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    FUNC            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CALL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CELL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    VAR             reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    $end            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)


state 95

    (17) statement -> operator error NEWLINE .

    CONST           reduce using rule 17 (statement -> operator error NEWLINE .)
    MATRIX          reduce using rule 17 (statement -> operator error NEWLINE .)
    error           reduce using rule 17 (statement -> operator error NEWLINE .)
    SHARP           reduce using rule 17 (statement -> operator error NEWLINE .)
    TESTONCE        reduce using rule 17 (statement -> operator error NEWLINE .)
    TESTREP         reduce using rule 17 (statement -> operator error NEWLINE .)
    FUNC            reduce using rule 17 (statement -> operator error NEWLINE .)
    CALL            reduce using rule 17 (statement -> operator error NEWLINE .)
    SIGNED          reduce using rule 17 (statement -> operator error NEWLINE .)
    UNSIGNED        reduce using rule 17 (statement -> operator error NEWLINE .)
    CELL            reduce using rule 17 (statement -> operator error NEWLINE .)
    VAR             reduce using rule 17 (statement -> operator error NEWLINE .)
    LBRACKET        reduce using rule 17 (statement -> operator error NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> operator error NEWLINE .)
    $end            reduce using rule 17 (statement -> operator error NEWLINE .)
    RBRACKET        reduce using rule 17 (statement -> operator error NEWLINE .)


state 96

    (12) statement -> function_call SEMICOLON NEWLINE .

    CONST           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    error           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SHARP           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    FUNC            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CALL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CELL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    VAR             reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    $end            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)


state 97

    (18) statement -> function_call error NEWLINE .

    CONST           reduce using rule 18 (statement -> function_call error NEWLINE .)
    MATRIX          reduce using rule 18 (statement -> function_call error NEWLINE .)
    error           reduce using rule 18 (statement -> function_call error NEWLINE .)
    SHARP           reduce using rule 18 (statement -> function_call error NEWLINE .)
    TESTONCE        reduce using rule 18 (statement -> function_call error NEWLINE .)
    TESTREP         reduce using rule 18 (statement -> function_call error NEWLINE .)
    FUNC            reduce using rule 18 (statement -> function_call error NEWLINE .)
    CALL            reduce using rule 18 (statement -> function_call error NEWLINE .)
    SIGNED          reduce using rule 18 (statement -> function_call error NEWLINE .)
    UNSIGNED        reduce using rule 18 (statement -> function_call error NEWLINE .)
    CELL            reduce using rule 18 (statement -> function_call error NEWLINE .)
    VAR             reduce using rule 18 (statement -> function_call error NEWLINE .)
    LBRACKET        reduce using rule 18 (statement -> function_call error NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> function_call error NEWLINE .)
    $end            reduce using rule 18 (statement -> function_call error NEWLINE .)
    RBRACKET        reduce using rule 18 (statement -> function_call error NEWLINE .)


state 98

    (25) declaration -> error VAR ASSIGNMENT . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 129
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 99

    (20) declaration -> type VAR ASSIGNMENT . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 130
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 100

    (62) variable -> VAR LQBRACKET index . RBRACKET LQBRACKET index RQBRACKET

    RBRACKET        shift and go to state 131


state 101

    (63) index -> UNSIGNED .

    RBRACKET        reduce using rule 63 (index -> UNSIGNED .)
    RQBRACKET       reduce using rule 63 (index -> UNSIGNED .)


state 102

    (51) compare -> expression EQ expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 51 (compare -> expression EQ expression .)
    error           reduce using rule 51 (compare -> expression EQ expression .)
    RBRACKET        reduce using rule 51 (compare -> expression EQ expression .)
    COMMA           reduce using rule 51 (compare -> expression EQ expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! STAR            [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 51 (compare -> expression EQ expression .) ]
  ! PROCENT         [ reduce using rule 51 (compare -> expression EQ expression .) ]


state 103

    (52) compare -> expression LESS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 52 (compare -> expression LESS expression .)
    error           reduce using rule 52 (compare -> expression LESS expression .)
    RBRACKET        reduce using rule 52 (compare -> expression LESS expression .)
    COMMA           reduce using rule 52 (compare -> expression LESS expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! STAR            [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 52 (compare -> expression LESS expression .) ]
  ! PROCENT         [ reduce using rule 52 (compare -> expression LESS expression .) ]


state 104

    (53) compare -> expression GREATER expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 53 (compare -> expression GREATER expression .)
    error           reduce using rule 53 (compare -> expression GREATER expression .)
    RBRACKET        reduce using rule 53 (compare -> expression GREATER expression .)
    COMMA           reduce using rule 53 (compare -> expression GREATER expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! STAR            [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 53 (compare -> expression GREATER expression .) ]
  ! PROCENT         [ reduce using rule 53 (compare -> expression GREATER expression .) ]


state 105

    (54) compare -> expression NOTEQ expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 54 (compare -> expression NOTEQ expression .)
    error           reduce using rule 54 (compare -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 54 (compare -> expression NOTEQ expression .)
    COMMA           reduce using rule 54 (compare -> expression NOTEQ expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! STAR            [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! DIV             [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]
  ! PROCENT         [ reduce using rule 54 (compare -> expression NOTEQ expression .) ]


state 106

    (55) math_expression -> expression PLUS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 55 (math_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 55 (math_expression -> expression PLUS expression .)
    error           reduce using rule 55 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! STAR            [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]
  ! PROCENT         [ reduce using rule 55 (math_expression -> expression PLUS expression .) ]


state 107

    (56) math_expression -> expression MINUS expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 56 (math_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 56 (math_expression -> expression MINUS expression .)
    error           reduce using rule 56 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! STAR            [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]
  ! PROCENT         [ reduce using rule 56 (math_expression -> expression MINUS expression .) ]


state 108

    (57) math_expression -> expression STAR expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 57 (math_expression -> expression STAR expression .)
    SEMICOLON       reduce using rule 57 (math_expression -> expression STAR expression .)
    error           reduce using rule 57 (math_expression -> expression STAR expression .)
    COMMA           reduce using rule 57 (math_expression -> expression STAR expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! LESS            [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! GREATER         [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! NOTEQ           [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! PLUS            [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! MINUS           [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! STAR            [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! DIV             [ reduce using rule 57 (math_expression -> expression STAR expression .) ]
  ! PROCENT         [ reduce using rule 57 (math_expression -> expression STAR expression .) ]


state 109

    (58) math_expression -> expression DIV expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 58 (math_expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 58 (math_expression -> expression DIV expression .)
    error           reduce using rule 58 (math_expression -> expression DIV expression .)
    COMMA           reduce using rule 58 (math_expression -> expression DIV expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! LESS            [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! GREATER         [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! NOTEQ           [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! STAR            [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 58 (math_expression -> expression DIV expression .) ]
  ! PROCENT         [ reduce using rule 58 (math_expression -> expression DIV expression .) ]


state 110

    (59) math_expression -> expression PROCENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 59 (math_expression -> expression PROCENT expression .)
    SEMICOLON       reduce using rule 59 (math_expression -> expression PROCENT expression .)
    error           reduce using rule 59 (math_expression -> expression PROCENT expression .)
    COMMA           reduce using rule 59 (math_expression -> expression PROCENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55

  ! EQ              [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! LESS            [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! GREATER         [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! NOTEQ           [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! PLUS            [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! MINUS           [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! STAR            [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! DIV             [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]
  ! PROCENT         [ reduce using rule 59 (math_expression -> expression PROCENT expression .) ]


state 111

    (21) declaration -> CONST type VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 132


state 112

    (26) declaration -> CONST error VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 133


state 113

    (22) declaration -> MATRIX type VAR .
    (23) declaration -> MATRIX type VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 22 (declaration -> MATRIX type VAR .)
    error           reduce using rule 22 (declaration -> MATRIX type VAR .)
    LBRACKET        shift and go to state 134


state 114

    (27) declaration -> MATRIX error VAR .
    (28) declaration -> MATRIX error VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 27 (declaration -> MATRIX error VAR .)
    error           reduce using rule 27 (declaration -> MATRIX error VAR .)
    LBRACKET        shift and go to state 135


state 115

    (38) expression -> LBRACKET expression RBRACKET .

    EQ              reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    STAR            reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    DIV             reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    PROCENT         reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    error           reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (expression -> LBRACKET expression RBRACKET .)


state 116

    (39) side -> LBRACKET directions RBRACKET .

    EQ              reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    LESS            reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    GREATER         reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    NOTEQ           reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    PLUS            reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    MINUS           reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    STAR            reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    DIV             reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    PROCENT         reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    RBRACKET        reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    SEMICOLON       reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    error           reduce using rule 39 (side -> LBRACKET directions RBRACKET .)
    COMMA           reduce using rule 39 (side -> LBRACKET directions RBRACKET .)


state 117

    (40) directions -> direction COMMA . directions
    (40) directions -> . direction COMMA directions
    (41) directions -> . direction
    (42) direction -> . TOP
    (43) direction -> . NTOP
    (44) direction -> . LEFT
    (45) direction -> . NLEFT
    (46) direction -> . RIGHT
    (47) direction -> . NRIGHT
    (48) direction -> . DOWN
    (49) direction -> . NDOWN
    (50) direction -> . BOTTOM

    TOP             shift and go to state 71
    NTOP            shift and go to state 72
    LEFT            shift and go to state 73
    NLEFT           shift and go to state 74
    RIGHT           shift and go to state 75
    NRIGHT          shift and go to state 76
    DOWN            shift and go to state 77
    NDOWN           shift and go to state 78
    BOTTOM          shift and go to state 79

    direction                      shift and go to state 70
    directions                     shift and go to state 136

state 118

    (65) assignment -> variable ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 65 (assignment -> variable ASSIGNMENT expression .)
    error           reduce using rule 65 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 119

    (70) operator -> variable ASSIGNMENT robot .

    SEMICOLON       reduce using rule 70 (operator -> variable ASSIGNMENT robot .)
    error           reduce using rule 70 (operator -> variable ASSIGNMENT robot .)


state 120

    (71) robot -> direction .

    SEMICOLON       reduce using rule 71 (robot -> direction .)
    error           reduce using rule 71 (robot -> direction .)


state 121

    (72) robot -> XRAY .

    SEMICOLON       reduce using rule 72 (robot -> XRAY .)
    error           reduce using rule 72 (robot -> XRAY .)


state 122

    (66) if -> TESTONCE LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (32) expression -> math_expression .

    RBRACKET        shift and go to state 137
    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    STAR            reduce using rule 32 (expression -> math_expression .)
    DIV             reduce using rule 32 (expression -> math_expression .)
    PROCENT         reduce using rule 32 (expression -> math_expression .)
    EQ              reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)
    NOTEQ           reduce using rule 32 (expression -> math_expression .)


state 123

    (67) if -> TESTONCE LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (36) expression -> compare .

    RBRACKET        shift and go to state 138
    PLUS            reduce using rule 36 (expression -> compare .)
    MINUS           reduce using rule 36 (expression -> compare .)
    STAR            reduce using rule 36 (expression -> compare .)
    DIV             reduce using rule 36 (expression -> compare .)
    PROCENT         reduce using rule 36 (expression -> compare .)
    EQ              reduce using rule 36 (expression -> compare .)
    LESS            reduce using rule 36 (expression -> compare .)
    GREATER         reduce using rule 36 (expression -> compare .)
    NOTEQ           reduce using rule 36 (expression -> compare .)


state 124

    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 125

    (68) while -> TESTREP LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (32) expression -> math_expression .

    RBRACKET        shift and go to state 139
    PLUS            reduce using rule 32 (expression -> math_expression .)
    MINUS           reduce using rule 32 (expression -> math_expression .)
    STAR            reduce using rule 32 (expression -> math_expression .)
    DIV             reduce using rule 32 (expression -> math_expression .)
    PROCENT         reduce using rule 32 (expression -> math_expression .)
    EQ              reduce using rule 32 (expression -> math_expression .)
    LESS            reduce using rule 32 (expression -> math_expression .)
    GREATER         reduce using rule 32 (expression -> math_expression .)
    NOTEQ           reduce using rule 32 (expression -> math_expression .)


state 126

    (69) while -> TESTREP LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (36) expression -> compare .

    RBRACKET        shift and go to state 140
    PLUS            reduce using rule 36 (expression -> compare .)
    MINUS           reduce using rule 36 (expression -> compare .)
    STAR            reduce using rule 36 (expression -> compare .)
    DIV             reduce using rule 36 (expression -> compare .)
    PROCENT         reduce using rule 36 (expression -> compare .)
    EQ              reduce using rule 36 (expression -> compare .)
    LESS            reduce using rule 36 (expression -> compare .)
    GREATER         reduce using rule 36 (expression -> compare .)
    NOTEQ           reduce using rule 36 (expression -> compare .)


state 127

    (73) function -> FUNC VAR LBRACKET . parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) parameters -> . type VAR COMMA parameters
    (78) parameters -> . type VAR
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL

    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29

    parameters                     shift and go to state 141
    type                           shift and go to state 142

state 128

    (74) function_call -> CALL VAR LBRACKET . vars RBRACKET
    (75) vars -> . vars
    (76) vars -> . VAR

    VAR             shift and go to state 143

    vars                           shift and go to state 144

state 129

    (25) declaration -> error VAR ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 25 (declaration -> error VAR ASSIGNMENT expression .)
    error           reduce using rule 25 (declaration -> error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 130

    (20) declaration -> type VAR ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 20 (declaration -> type VAR ASSIGNMENT expression .)
    error           reduce using rule 20 (declaration -> type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 131

    (62) variable -> VAR LQBRACKET index RBRACKET . LQBRACKET index RQBRACKET

    LQBRACKET       shift and go to state 145


state 132

    (21) declaration -> CONST type VAR ASSIGNMENT . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 146
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 133

    (26) declaration -> CONST error VAR ASSIGNMENT . expression
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 147
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 134

    (23) declaration -> MATRIX type VAR LBRACKET . expression COMMA expression RBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 148
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 135

    (28) declaration -> MATRIX error VAR LBRACKET . expression COMMA expression RBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 149
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 136

    (40) directions -> direction COMMA directions .

    RBRACKET        reduce using rule 40 (directions -> direction COMMA directions .)


state 137

    (66) if -> TESTONCE LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 150


state 138

    (67) if -> TESTONCE LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 151


state 139

    (68) while -> TESTREP LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 152


state 140

    (69) while -> TESTREP LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 153


state 141

    (73) function -> FUNC VAR LBRACKET parameters . RBRACKET LBRACKET NEWLINE state RBRACKET

    RBRACKET        shift and go to state 154


state 142

    (77) parameters -> type . VAR COMMA parameters
    (78) parameters -> type . VAR

    VAR             shift and go to state 155


state 143

    (76) vars -> VAR .

    RBRACKET        reduce using rule 76 (vars -> VAR .)


state 144

    (74) function_call -> CALL VAR LBRACKET vars . RBRACKET
    (75) vars -> vars .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 156

  ! RBRACKET        [ reduce using rule 75 (vars -> vars .) ]


state 145

    (62) variable -> VAR LQBRACKET index RBRACKET LQBRACKET . index RQBRACKET
    (63) index -> . UNSIGNED

    UNSIGNED        shift and go to state 101

    index                          shift and go to state 157

state 146

    (21) declaration -> CONST type VAR ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 21 (declaration -> CONST type VAR ASSIGNMENT expression .)
    error           reduce using rule 21 (declaration -> CONST type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 147

    (26) declaration -> CONST error VAR ASSIGNMENT expression .
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 26 (declaration -> CONST error VAR ASSIGNMENT expression .)
    error           reduce using rule 26 (declaration -> CONST error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 148

    (23) declaration -> MATRIX type VAR LBRACKET expression . COMMA expression RBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 158
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 149

    (28) declaration -> MATRIX error VAR LBRACKET expression . COMMA expression RBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 159
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 150

    (66) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 160


state 151

    (67) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 161


state 152

    (68) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 162


state 153

    (69) while -> TESTREP LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 163


state 154

    (73) function -> FUNC VAR LBRACKET parameters RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 164


state 155

    (77) parameters -> type VAR . COMMA parameters
    (78) parameters -> type VAR .

    COMMA           shift and go to state 165
    RBRACKET        reduce using rule 78 (parameters -> type VAR .)


state 156

    (74) function_call -> CALL VAR LBRACKET vars RBRACKET .

    SEMICOLON       reduce using rule 74 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    error           reduce using rule 74 (function_call -> CALL VAR LBRACKET vars RBRACKET .)


state 157

    (62) variable -> VAR LQBRACKET index RBRACKET LQBRACKET index . RQBRACKET

    RQBRACKET       shift and go to state 166


state 158

    (23) declaration -> MATRIX type VAR LBRACKET expression COMMA . expression RBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 167
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 159

    (28) declaration -> MATRIX error VAR LBRACKET expression COMMA . expression RBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (39) side -> . LBRACKET directions RBRACKET
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable

    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32
    VAR             shift and go to state 15
    SHARP           shift and go to state 21

    expression                     shift and go to state 168
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    variable                       shift and go to state 67
    side                           shift and go to state 31
    compare                        shift and go to state 68
    prison                         shift and go to state 69

state 160

    (66) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    math_expression                shift and go to state 23
    state                          shift and go to state 169
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    const                          shift and go to state 30
    side                           shift and go to state 31

state 161

    (67) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    compare                        shift and go to state 6
    state                          shift and go to state 170
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 162

    (68) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    math_expression                shift and go to state 23
    state                          shift and go to state 171
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    const                          shift and go to state 30
    side                           shift and go to state 31

state 163

    (69) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    compare                        shift and go to state 6
    state                          shift and go to state 172
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 164

    (73) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 173


state 165

    (77) parameters -> type VAR COMMA . parameters
    (77) parameters -> . type VAR COMMA parameters
    (78) parameters -> . type VAR
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL

    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29

    type                           shift and go to state 142
    parameters                     shift and go to state 174

state 166

    (62) variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .

    ASSIGNMENT      reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    EQ              reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    LESS            reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    GREATER         reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    NOTEQ           reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    PLUS            reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    MINUS           reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    STAR            reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    DIV             reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    PROCENT         reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    RBRACKET        reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    SEMICOLON       reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    error           reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)
    COMMA           reduce using rule 62 (variable -> VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET .)


state 167

    (23) declaration -> MATRIX type VAR LBRACKET expression COMMA expression . RBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 175
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 168

    (28) declaration -> MATRIX error VAR LBRACKET expression COMMA expression . RBRACKET
    (55) math_expression -> expression . PLUS expression
    (56) math_expression -> expression . MINUS expression
    (57) math_expression -> expression . STAR expression
    (58) math_expression -> expression . DIV expression
    (59) math_expression -> expression . PROCENT expression
    (51) compare -> expression . EQ expression
    (52) compare -> expression . LESS expression
    (53) compare -> expression . GREATER expression
    (54) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 176
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    STAR            shift and go to state 58
    DIV             shift and go to state 59
    PROCENT         shift and go to state 60
    EQ              shift and go to state 52
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    NOTEQ           shift and go to state 55


state 169

    (66) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 177
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    math_expression                shift and go to state 23
    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    const                          shift and go to state 30
    side                           shift and go to state 31

state 170

    (67) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 178
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    compare                        shift and go to state 6
    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 171

    (68) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 179
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    math_expression                shift and go to state 23
    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    const                          shift and go to state 30
    side                           shift and go to state 31

state 172

    (69) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 180
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    compare                        shift and go to state 6
    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 173

    (73) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    state                          shift and go to state 181
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 174

    (77) parameters -> type VAR COMMA parameters .

    RBRACKET        reduce using rule 77 (parameters -> type VAR COMMA parameters .)


state 175

    (23) declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 23 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 23 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)


state 176

    (28) declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 28 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 28 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)


state 177

    (66) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 66 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 178

    (67) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 67 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 179

    (68) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 68 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 180

    (69) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 69 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 181

    (73) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . declaration error NEWLINE
    (14) statement -> . assignment error NEWLINE
    (15) statement -> . compare error NEWLINE
    (16) statement -> . prison error NEWLINE
    (17) statement -> . operator error NEWLINE
    (18) statement -> . function_call error NEWLINE
    (19) declaration -> . type VAR
    (20) declaration -> . type VAR ASSIGNMENT expression
    (21) declaration -> . CONST type VAR ASSIGNMENT expression
    (22) declaration -> . MATRIX type VAR
    (23) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (24) declaration -> . error VAR
    (25) declaration -> . error VAR ASSIGNMENT expression
    (26) declaration -> . CONST error VAR ASSIGNMENT expression
    (27) declaration -> . MATRIX error VAR
    (28) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (65) assignment -> . variable ASSIGNMENT expression
    (51) compare -> . expression EQ expression
    (52) compare -> . expression LESS expression
    (53) compare -> . expression GREATER expression
    (54) compare -> . expression NOTEQ expression
    (64) prison -> . SHARP variable
    (66) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (67) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (68) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) operator -> . variable ASSIGNMENT robot
    (73) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (74) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (29) type -> . SIGNED
    (30) type -> . UNSIGNED
    (31) type -> . CELL
    (61) variable -> . VAR
    (62) variable -> . VAR LQBRACKET index RBRACKET LQBRACKET index RQBRACKET
    (32) expression -> . math_expression
    (33) expression -> . const
    (34) expression -> . variable
    (35) expression -> . side
    (36) expression -> . compare
    (37) expression -> . prison
    (38) expression -> . LBRACKET expression RBRACKET
    (55) math_expression -> . expression PLUS expression
    (56) math_expression -> . expression MINUS expression
    (57) math_expression -> . expression STAR expression
    (58) math_expression -> . expression DIV expression
    (59) math_expression -> . expression PROCENT expression
    (60) const -> . DECIMAL
    (39) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 182
    CONST           shift and go to state 17
    MATRIX          shift and go to state 18
    error           shift and go to state 13
    SHARP           shift and go to state 21
    TESTONCE        shift and go to state 22
    TESTREP         shift and go to state 24
    FUNC            shift and go to state 25
    CALL            shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    CELL            shift and go to state 29
    VAR             shift and go to state 15
    LBRACKET        shift and go to state 19
    DECIMAL         shift and go to state 32

    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    type                           shift and go to state 14
    expression                     shift and go to state 16
    variable                       shift and go to state 20
    math_expression                shift and go to state 23
    const                          shift and go to state 30
    side                           shift and go to state 31

state 182

    (73) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 73 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for STAR in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV in state 102 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for STAR in state 103 resolved as shift
WARNING: shift/reduce conflict for DIV in state 103 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for STAR in state 104 resolved as shift
WARNING: shift/reduce conflict for DIV in state 104 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for STAR in state 105 resolved as shift
WARNING: shift/reduce conflict for DIV in state 105 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for STAR in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV in state 106 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for STAR in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for STAR in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for STAR in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for STAR in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 144 resolved as shift
