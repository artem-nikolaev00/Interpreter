Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> state
Rule 2     state -> state statement
Rule 3     state -> statement
Rule 4     statement -> declaration SEMICOLON NEWLINE
Rule 5     statement -> assignment SEMICOLON NEWLINE
Rule 6     statement -> compare SEMICOLON NEWLINE
Rule 7     statement -> prison SEMICOLON NEWLINE
Rule 8     statement -> if NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> operator SEMICOLON NEWLINE
Rule 11    statement -> function NEWLINE
Rule 12    statement -> function_call SEMICOLON NEWLINE
Rule 13    statement -> function_return SEMICOLON NEWLINE
Rule 14    statement -> declaration error NEWLINE
Rule 15    statement -> assignment error NEWLINE
Rule 16    statement -> compare error NEWLINE
Rule 17    statement -> prison error NEWLINE
Rule 18    statement -> operator error NEWLINE
Rule 19    statement -> function_call error NEWLINE
Rule 20    statement -> function_return error NEWLINE
Rule 21    declaration -> type VAR
Rule 22    declaration -> type VAR ASSIGNMENT expression
Rule 23    declaration -> CONST type VAR ASSIGNMENT expression
Rule 24    declaration -> MATRIX type VAR
Rule 25    declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
Rule 26    declaration -> error VAR
Rule 27    declaration -> error VAR ASSIGNMENT expression
Rule 28    declaration -> CONST error VAR ASSIGNMENT expression
Rule 29    declaration -> MATRIX error VAR
Rule 30    declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
Rule 31    type -> SIGNED
Rule 32    type -> UNSIGNED
Rule 33    type -> CELL
Rule 34    expression -> math_expression
Rule 35    expression -> const
Rule 36    expression -> variable
Rule 37    expression -> side
Rule 38    expression -> compare
Rule 39    expression -> prison
Rule 40    expression -> function_call
Rule 41    expression -> LBRACKET expression RBRACKET
Rule 42    side -> LBRACKET directions RBRACKET
Rule 43    directions -> direction COMMA directions
Rule 44    directions -> direction
Rule 45    direction -> TOP
Rule 46    direction -> NTOP
Rule 47    direction -> LEFT
Rule 48    direction -> NLEFT
Rule 49    direction -> RIGHT
Rule 50    direction -> NRIGHT
Rule 51    direction -> DOWN
Rule 52    direction -> NDOWN
Rule 53    direction -> BOTTOM
Rule 54    compare -> expression EQ expression
Rule 55    compare -> expression LESS expression
Rule 56    compare -> expression GREATER expression
Rule 57    compare -> expression NOTEQ expression
Rule 58    math_expression -> expression PLUS expression
Rule 59    math_expression -> expression MINUS expression
Rule 60    math_expression -> expression STAR expression
Rule 61    math_expression -> expression DIV expression
Rule 62    math_expression -> expression PROCENT expression
Rule 63    const -> DECIMAL
Rule 64    variable -> VAR
Rule 65    variable -> VAR LBRACKET index COMMA index RBRACKET
Rule 66    index -> expression
Rule 67    prison -> SHARP variable
Rule 68    assignment -> variable ASSIGNMENT expression
Rule 69    if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 70    if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 71    while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 72    while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 73    operator -> variable ASSIGNMENT robot
Rule 74    robot -> direction
Rule 75    robot -> XRAY
Rule 76    function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 77    function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 78    function_return -> VAR
Rule 79    function_call -> CALL VAR LBRACKET vars RBRACKET
Rule 80    function_call -> CALL VAR LBRACKET RBRACKET
Rule 81    vars -> VAR vars
Rule 82    vars -> VAR
Rule 83    parameters -> type VAR COMMA parameters
Rule 84    parameters -> type VAR

Terminals, with rules where they appear

ASSIGNMENT           : 22 23 27 28 68 73
BOTTOM               : 53
CALL                 : 79 80
CELL                 : 33
COMMA                : 25 30 43 65 83
CONST                : 23 28
DECIMAL              : 63
DIV                  : 61
DOWN                 : 51
EQ                   : 54
FUNC                 : 76 77
GREATER              : 56
LBRACKET             : 25 30 41 42 65 69 69 70 70 71 71 72 72 76 76 77 77 79 80
LEFT                 : 47
LESS                 : 55
MATRIX               : 24 25 29 30
MINUS                : 59
NDOWN                : 52
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 69 70 71 72 76 77
NLEFT                : 48
NOTEQ                : 57
NRIGHT               : 50
NTOP                 : 46
PLUS                 : 58
PROCENT              : 62
RBRACKET             : 25 30 41 42 65 69 69 70 70 71 71 72 72 76 76 77 77 79 80
RIGHT                : 49
SEMICOLON            : 4 5 6 7 10 12 13
SHARP                : 67
SIGNED               : 31
STAR                 : 60
TESTONCE             : 69 70
TESTREP              : 71 72
TOP                  : 45
UNSIGNED             : 32
VAR                  : 21 22 23 24 25 26 27 28 29 30 64 65 76 77 78 79 80 81 82 83 84
XRAY                 : 75
error                : 14 15 16 17 18 19 20 26 27 28 29 30

Nonterminals, with rules where they appear

assignment           : 5 15
compare              : 6 16 38 70 72
const                : 35
declaration          : 4 14
direction            : 43 44 74
directions           : 42 43
expression           : 22 23 25 25 27 28 30 30 41 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 66 68
function             : 11
function_call        : 12 19 40
function_return      : 13 20
if                   : 8
index                : 65 65
math_expression      : 34 69 71
operator             : 10 18
parameters           : 76 83
prison               : 7 17 39
program              : 0
robot                : 73
side                 : 37
state                : 1 2 69 70 71 72 76 77
statement            : 2 3
type                 : 21 22 23 24 25 83 84
variable             : 36 67 68 73
vars                 : 79 81
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . state
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    program                        shift and go to state 1
    state                          shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 1

    (0) S' -> program .



state 2

    (1) program -> state .
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    $end            reduce using rule 1 (program -> state .)
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 3

    (3) state -> statement .

    CONST           reduce using rule 3 (state -> statement .)
    MATRIX          reduce using rule 3 (state -> statement .)
    error           reduce using rule 3 (state -> statement .)
    SHARP           reduce using rule 3 (state -> statement .)
    TESTONCE        reduce using rule 3 (state -> statement .)
    TESTREP         reduce using rule 3 (state -> statement .)
    FUNC            reduce using rule 3 (state -> statement .)
    CALL            reduce using rule 3 (state -> statement .)
    VAR             reduce using rule 3 (state -> statement .)
    SIGNED          reduce using rule 3 (state -> statement .)
    UNSIGNED        reduce using rule 3 (state -> statement .)
    CELL            reduce using rule 3 (state -> statement .)
    LBRACKET        reduce using rule 3 (state -> statement .)
    DECIMAL         reduce using rule 3 (state -> statement .)
    $end            reduce using rule 3 (state -> statement .)
    RBRACKET        reduce using rule 3 (state -> statement .)


state 4

    (4) statement -> declaration . SEMICOLON NEWLINE
    (14) statement -> declaration . error NEWLINE

    SEMICOLON       shift and go to state 35
    error           shift and go to state 36


state 5

    (5) statement -> assignment . SEMICOLON NEWLINE
    (15) statement -> assignment . error NEWLINE

    SEMICOLON       shift and go to state 37
    error           shift and go to state 38


state 6

    (6) statement -> compare . SEMICOLON NEWLINE
    (16) statement -> compare . error NEWLINE
    (38) expression -> compare .

    SEMICOLON       shift and go to state 39
    error           shift and go to state 40
    EQ              reduce using rule 38 (expression -> compare .)
    LESS            reduce using rule 38 (expression -> compare .)
    GREATER         reduce using rule 38 (expression -> compare .)
    NOTEQ           reduce using rule 38 (expression -> compare .)
    PLUS            reduce using rule 38 (expression -> compare .)
    MINUS           reduce using rule 38 (expression -> compare .)
    STAR            reduce using rule 38 (expression -> compare .)
    DIV             reduce using rule 38 (expression -> compare .)
    PROCENT         reduce using rule 38 (expression -> compare .)


state 7

    (7) statement -> prison . SEMICOLON NEWLINE
    (17) statement -> prison . error NEWLINE
    (39) expression -> prison .

    SEMICOLON       shift and go to state 41
    error           shift and go to state 42
    EQ              reduce using rule 39 (expression -> prison .)
    LESS            reduce using rule 39 (expression -> prison .)
    GREATER         reduce using rule 39 (expression -> prison .)
    NOTEQ           reduce using rule 39 (expression -> prison .)
    PLUS            reduce using rule 39 (expression -> prison .)
    MINUS           reduce using rule 39 (expression -> prison .)
    STAR            reduce using rule 39 (expression -> prison .)
    DIV             reduce using rule 39 (expression -> prison .)
    PROCENT         reduce using rule 39 (expression -> prison .)


state 8

    (8) statement -> if . NEWLINE

    NEWLINE         shift and go to state 43


state 9

    (9) statement -> while . NEWLINE

    NEWLINE         shift and go to state 44


state 10

    (10) statement -> operator . SEMICOLON NEWLINE
    (18) statement -> operator . error NEWLINE

    SEMICOLON       shift and go to state 45
    error           shift and go to state 46


state 11

    (11) statement -> function . NEWLINE

    NEWLINE         shift and go to state 47


state 12

    (12) statement -> function_call . SEMICOLON NEWLINE
    (19) statement -> function_call . error NEWLINE
    (40) expression -> function_call .

    SEMICOLON       shift and go to state 48
    error           shift and go to state 49
    EQ              reduce using rule 40 (expression -> function_call .)
    LESS            reduce using rule 40 (expression -> function_call .)
    GREATER         reduce using rule 40 (expression -> function_call .)
    NOTEQ           reduce using rule 40 (expression -> function_call .)
    PLUS            reduce using rule 40 (expression -> function_call .)
    MINUS           reduce using rule 40 (expression -> function_call .)
    STAR            reduce using rule 40 (expression -> function_call .)
    DIV             reduce using rule 40 (expression -> function_call .)
    PROCENT         reduce using rule 40 (expression -> function_call .)


state 13

    (13) statement -> function_return . SEMICOLON NEWLINE
    (20) statement -> function_return . error NEWLINE

    SEMICOLON       shift and go to state 50
    error           shift and go to state 51


state 14

    (26) declaration -> error . VAR
    (27) declaration -> error . VAR ASSIGNMENT expression

    VAR             shift and go to state 52


state 15

    (21) declaration -> type . VAR
    (22) declaration -> type . VAR ASSIGNMENT expression

    VAR             shift and go to state 53


state 16

    (78) function_return -> VAR .
    (64) variable -> VAR .
    (65) variable -> VAR . LBRACKET index COMMA index RBRACKET

    SEMICOLON       reduce using rule 78 (function_return -> VAR .)
    error           reduce using rule 78 (function_return -> VAR .)
    ASSIGNMENT      reduce using rule 64 (variable -> VAR .)
    EQ              reduce using rule 64 (variable -> VAR .)
    LESS            reduce using rule 64 (variable -> VAR .)
    GREATER         reduce using rule 64 (variable -> VAR .)
    NOTEQ           reduce using rule 64 (variable -> VAR .)
    PLUS            reduce using rule 64 (variable -> VAR .)
    MINUS           reduce using rule 64 (variable -> VAR .)
    STAR            reduce using rule 64 (variable -> VAR .)
    DIV             reduce using rule 64 (variable -> VAR .)
    PROCENT         reduce using rule 64 (variable -> VAR .)
    LBRACKET        shift and go to state 54


state 17

    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression

    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63


state 18

    (23) declaration -> CONST . type VAR ASSIGNMENT expression
    (28) declaration -> CONST . error VAR ASSIGNMENT expression
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL

    error           shift and go to state 65
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 64

state 19

    (24) declaration -> MATRIX . type VAR
    (25) declaration -> MATRIX . type VAR LBRACKET expression COMMA expression RBRACKET
    (29) declaration -> MATRIX . error VAR
    (30) declaration -> MATRIX . error VAR LBRACKET expression COMMA expression RBRACKET
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL

    error           shift and go to state 67
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 66

state 20

    (41) expression -> LBRACKET . expression RBRACKET
    (42) side -> LBRACKET . directions RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (43) directions -> . direction COMMA directions
    (44) directions -> . direction
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (45) direction -> . TOP
    (46) direction -> . NTOP
    (47) direction -> . LEFT
    (48) direction -> . NLEFT
    (49) direction -> . RIGHT
    (50) direction -> . NRIGHT
    (51) direction -> . DOWN
    (52) direction -> . NDOWN
    (53) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27
    TOP             shift and go to state 76
    NTOP            shift and go to state 77
    LEFT            shift and go to state 78
    NLEFT           shift and go to state 79
    RIGHT           shift and go to state 80
    NRIGHT          shift and go to state 81
    DOWN            shift and go to state 82
    NDOWN           shift and go to state 83
    BOTTOM          shift and go to state 84

    expression                     shift and go to state 68
    directions                     shift and go to state 69
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73
    direction                      shift and go to state 74

state 21

    (68) assignment -> variable . ASSIGNMENT expression
    (73) operator -> variable . ASSIGNMENT robot
    (36) expression -> variable .

    ASSIGNMENT      shift and go to state 85
    EQ              reduce using rule 36 (expression -> variable .)
    LESS            reduce using rule 36 (expression -> variable .)
    GREATER         reduce using rule 36 (expression -> variable .)
    NOTEQ           reduce using rule 36 (expression -> variable .)
    PLUS            reduce using rule 36 (expression -> variable .)
    MINUS           reduce using rule 36 (expression -> variable .)
    STAR            reduce using rule 36 (expression -> variable .)
    DIV             reduce using rule 36 (expression -> variable .)
    PROCENT         reduce using rule 36 (expression -> variable .)


state 22

    (67) prison -> SHARP . variable
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET

    VAR             shift and go to state 75

    variable                       shift and go to state 86

state 23

    (69) if -> TESTONCE . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> TESTONCE . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 87


state 24

    (34) expression -> math_expression .

    EQ              reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)
    NOTEQ           reduce using rule 34 (expression -> math_expression .)
    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    STAR            reduce using rule 34 (expression -> math_expression .)
    DIV             reduce using rule 34 (expression -> math_expression .)
    PROCENT         reduce using rule 34 (expression -> math_expression .)
    RBRACKET        reduce using rule 34 (expression -> math_expression .)
    COMMA           reduce using rule 34 (expression -> math_expression .)
    SEMICOLON       reduce using rule 34 (expression -> math_expression .)
    error           reduce using rule 34 (expression -> math_expression .)


state 25

    (71) while -> TESTREP . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> TESTREP . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 88


state 26

    (76) function -> FUNC . VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> FUNC . VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    VAR             shift and go to state 89


state 27

    (79) function_call -> CALL . VAR LBRACKET vars RBRACKET
    (80) function_call -> CALL . VAR LBRACKET RBRACKET

    VAR             shift and go to state 90


state 28

    (31) type -> SIGNED .

    VAR             reduce using rule 31 (type -> SIGNED .)


state 29

    (32) type -> UNSIGNED .

    VAR             reduce using rule 32 (type -> UNSIGNED .)


state 30

    (33) type -> CELL .

    VAR             reduce using rule 33 (type -> CELL .)


state 31

    (35) expression -> const .

    EQ              reduce using rule 35 (expression -> const .)
    LESS            reduce using rule 35 (expression -> const .)
    GREATER         reduce using rule 35 (expression -> const .)
    NOTEQ           reduce using rule 35 (expression -> const .)
    PLUS            reduce using rule 35 (expression -> const .)
    MINUS           reduce using rule 35 (expression -> const .)
    STAR            reduce using rule 35 (expression -> const .)
    DIV             reduce using rule 35 (expression -> const .)
    PROCENT         reduce using rule 35 (expression -> const .)
    RBRACKET        reduce using rule 35 (expression -> const .)
    COMMA           reduce using rule 35 (expression -> const .)
    SEMICOLON       reduce using rule 35 (expression -> const .)
    error           reduce using rule 35 (expression -> const .)


state 32

    (37) expression -> side .

    EQ              reduce using rule 37 (expression -> side .)
    LESS            reduce using rule 37 (expression -> side .)
    GREATER         reduce using rule 37 (expression -> side .)
    NOTEQ           reduce using rule 37 (expression -> side .)
    PLUS            reduce using rule 37 (expression -> side .)
    MINUS           reduce using rule 37 (expression -> side .)
    STAR            reduce using rule 37 (expression -> side .)
    DIV             reduce using rule 37 (expression -> side .)
    PROCENT         reduce using rule 37 (expression -> side .)
    RBRACKET        reduce using rule 37 (expression -> side .)
    COMMA           reduce using rule 37 (expression -> side .)
    SEMICOLON       reduce using rule 37 (expression -> side .)
    error           reduce using rule 37 (expression -> side .)


state 33

    (63) const -> DECIMAL .

    EQ              reduce using rule 63 (const -> DECIMAL .)
    LESS            reduce using rule 63 (const -> DECIMAL .)
    GREATER         reduce using rule 63 (const -> DECIMAL .)
    NOTEQ           reduce using rule 63 (const -> DECIMAL .)
    PLUS            reduce using rule 63 (const -> DECIMAL .)
    MINUS           reduce using rule 63 (const -> DECIMAL .)
    STAR            reduce using rule 63 (const -> DECIMAL .)
    DIV             reduce using rule 63 (const -> DECIMAL .)
    PROCENT         reduce using rule 63 (const -> DECIMAL .)
    RBRACKET        reduce using rule 63 (const -> DECIMAL .)
    COMMA           reduce using rule 63 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 63 (const -> DECIMAL .)
    error           reduce using rule 63 (const -> DECIMAL .)


state 34

    (2) state -> state statement .

    CONST           reduce using rule 2 (state -> state statement .)
    MATRIX          reduce using rule 2 (state -> state statement .)
    error           reduce using rule 2 (state -> state statement .)
    SHARP           reduce using rule 2 (state -> state statement .)
    TESTONCE        reduce using rule 2 (state -> state statement .)
    TESTREP         reduce using rule 2 (state -> state statement .)
    FUNC            reduce using rule 2 (state -> state statement .)
    CALL            reduce using rule 2 (state -> state statement .)
    VAR             reduce using rule 2 (state -> state statement .)
    SIGNED          reduce using rule 2 (state -> state statement .)
    UNSIGNED        reduce using rule 2 (state -> state statement .)
    CELL            reduce using rule 2 (state -> state statement .)
    LBRACKET        reduce using rule 2 (state -> state statement .)
    DECIMAL         reduce using rule 2 (state -> state statement .)
    $end            reduce using rule 2 (state -> state statement .)
    RBRACKET        reduce using rule 2 (state -> state statement .)


state 35

    (4) statement -> declaration SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 91


state 36

    (14) statement -> declaration error . NEWLINE

    NEWLINE         shift and go to state 92


state 37

    (5) statement -> assignment SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 93


state 38

    (15) statement -> assignment error . NEWLINE

    NEWLINE         shift and go to state 94


state 39

    (6) statement -> compare SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 95


state 40

    (16) statement -> compare error . NEWLINE

    NEWLINE         shift and go to state 96


state 41

    (7) statement -> prison SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 97


state 42

    (17) statement -> prison error . NEWLINE

    NEWLINE         shift and go to state 98


state 43

    (8) statement -> if NEWLINE .

    CONST           reduce using rule 8 (statement -> if NEWLINE .)
    MATRIX          reduce using rule 8 (statement -> if NEWLINE .)
    error           reduce using rule 8 (statement -> if NEWLINE .)
    SHARP           reduce using rule 8 (statement -> if NEWLINE .)
    TESTONCE        reduce using rule 8 (statement -> if NEWLINE .)
    TESTREP         reduce using rule 8 (statement -> if NEWLINE .)
    FUNC            reduce using rule 8 (statement -> if NEWLINE .)
    CALL            reduce using rule 8 (statement -> if NEWLINE .)
    VAR             reduce using rule 8 (statement -> if NEWLINE .)
    SIGNED          reduce using rule 8 (statement -> if NEWLINE .)
    UNSIGNED        reduce using rule 8 (statement -> if NEWLINE .)
    CELL            reduce using rule 8 (statement -> if NEWLINE .)
    LBRACKET        reduce using rule 8 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 8 (statement -> if NEWLINE .)
    $end            reduce using rule 8 (statement -> if NEWLINE .)
    RBRACKET        reduce using rule 8 (statement -> if NEWLINE .)


state 44

    (9) statement -> while NEWLINE .

    CONST           reduce using rule 9 (statement -> while NEWLINE .)
    MATRIX          reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    SHARP           reduce using rule 9 (statement -> while NEWLINE .)
    TESTONCE        reduce using rule 9 (statement -> while NEWLINE .)
    TESTREP         reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    VAR             reduce using rule 9 (statement -> while NEWLINE .)
    SIGNED          reduce using rule 9 (statement -> while NEWLINE .)
    UNSIGNED        reduce using rule 9 (statement -> while NEWLINE .)
    CELL            reduce using rule 9 (statement -> while NEWLINE .)
    LBRACKET        reduce using rule 9 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    RBRACKET        reduce using rule 9 (statement -> while NEWLINE .)


state 45

    (10) statement -> operator SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 99


state 46

    (18) statement -> operator error . NEWLINE

    NEWLINE         shift and go to state 100


state 47

    (11) statement -> function NEWLINE .

    CONST           reduce using rule 11 (statement -> function NEWLINE .)
    MATRIX          reduce using rule 11 (statement -> function NEWLINE .)
    error           reduce using rule 11 (statement -> function NEWLINE .)
    SHARP           reduce using rule 11 (statement -> function NEWLINE .)
    TESTONCE        reduce using rule 11 (statement -> function NEWLINE .)
    TESTREP         reduce using rule 11 (statement -> function NEWLINE .)
    FUNC            reduce using rule 11 (statement -> function NEWLINE .)
    CALL            reduce using rule 11 (statement -> function NEWLINE .)
    VAR             reduce using rule 11 (statement -> function NEWLINE .)
    SIGNED          reduce using rule 11 (statement -> function NEWLINE .)
    UNSIGNED        reduce using rule 11 (statement -> function NEWLINE .)
    CELL            reduce using rule 11 (statement -> function NEWLINE .)
    LBRACKET        reduce using rule 11 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 11 (statement -> function NEWLINE .)
    $end            reduce using rule 11 (statement -> function NEWLINE .)
    RBRACKET        reduce using rule 11 (statement -> function NEWLINE .)


state 48

    (12) statement -> function_call SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 101


state 49

    (19) statement -> function_call error . NEWLINE

    NEWLINE         shift and go to state 102


state 50

    (13) statement -> function_return SEMICOLON . NEWLINE

    NEWLINE         shift and go to state 103


state 51

    (20) statement -> function_return error . NEWLINE

    NEWLINE         shift and go to state 104


state 52

    (26) declaration -> error VAR .
    (27) declaration -> error VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 26 (declaration -> error VAR .)
    error           reduce using rule 26 (declaration -> error VAR .)
    ASSIGNMENT      shift and go to state 105


state 53

    (21) declaration -> type VAR .
    (22) declaration -> type VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 21 (declaration -> type VAR .)
    error           reduce using rule 21 (declaration -> type VAR .)
    ASSIGNMENT      shift and go to state 106


state 54

    (65) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (66) index -> . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    index                          shift and go to state 107
    expression                     shift and go to state 108
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 55

    (54) compare -> expression EQ . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 109
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 56

    (55) compare -> expression LESS . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 110
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 57

    (56) compare -> expression GREATER . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 111
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 58

    (57) compare -> expression NOTEQ . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 112
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 59

    (58) math_expression -> expression PLUS . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 113
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 60

    (59) math_expression -> expression MINUS . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 114
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 61

    (60) math_expression -> expression STAR . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 115
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 62

    (61) math_expression -> expression DIV . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 116
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 63

    (62) math_expression -> expression PROCENT . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 117
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 64

    (23) declaration -> CONST type . VAR ASSIGNMENT expression

    VAR             shift and go to state 118


state 65

    (28) declaration -> CONST error . VAR ASSIGNMENT expression

    VAR             shift and go to state 119


state 66

    (24) declaration -> MATRIX type . VAR
    (25) declaration -> MATRIX type . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 120


state 67

    (29) declaration -> MATRIX error . VAR
    (30) declaration -> MATRIX error . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 121


state 68

    (41) expression -> LBRACKET expression . RBRACKET
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 122
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 69

    (42) side -> LBRACKET directions . RBRACKET

    RBRACKET        shift and go to state 123


state 70

    (36) expression -> variable .

    RBRACKET        reduce using rule 36 (expression -> variable .)
    PLUS            reduce using rule 36 (expression -> variable .)
    MINUS           reduce using rule 36 (expression -> variable .)
    STAR            reduce using rule 36 (expression -> variable .)
    DIV             reduce using rule 36 (expression -> variable .)
    PROCENT         reduce using rule 36 (expression -> variable .)
    EQ              reduce using rule 36 (expression -> variable .)
    LESS            reduce using rule 36 (expression -> variable .)
    GREATER         reduce using rule 36 (expression -> variable .)
    NOTEQ           reduce using rule 36 (expression -> variable .)
    COMMA           reduce using rule 36 (expression -> variable .)
    SEMICOLON       reduce using rule 36 (expression -> variable .)
    error           reduce using rule 36 (expression -> variable .)


state 71

    (38) expression -> compare .

    RBRACKET        reduce using rule 38 (expression -> compare .)
    PLUS            reduce using rule 38 (expression -> compare .)
    MINUS           reduce using rule 38 (expression -> compare .)
    STAR            reduce using rule 38 (expression -> compare .)
    DIV             reduce using rule 38 (expression -> compare .)
    PROCENT         reduce using rule 38 (expression -> compare .)
    EQ              reduce using rule 38 (expression -> compare .)
    LESS            reduce using rule 38 (expression -> compare .)
    GREATER         reduce using rule 38 (expression -> compare .)
    NOTEQ           reduce using rule 38 (expression -> compare .)
    COMMA           reduce using rule 38 (expression -> compare .)
    SEMICOLON       reduce using rule 38 (expression -> compare .)
    error           reduce using rule 38 (expression -> compare .)


state 72

    (39) expression -> prison .

    RBRACKET        reduce using rule 39 (expression -> prison .)
    PLUS            reduce using rule 39 (expression -> prison .)
    MINUS           reduce using rule 39 (expression -> prison .)
    STAR            reduce using rule 39 (expression -> prison .)
    DIV             reduce using rule 39 (expression -> prison .)
    PROCENT         reduce using rule 39 (expression -> prison .)
    EQ              reduce using rule 39 (expression -> prison .)
    LESS            reduce using rule 39 (expression -> prison .)
    GREATER         reduce using rule 39 (expression -> prison .)
    NOTEQ           reduce using rule 39 (expression -> prison .)
    COMMA           reduce using rule 39 (expression -> prison .)
    SEMICOLON       reduce using rule 39 (expression -> prison .)
    error           reduce using rule 39 (expression -> prison .)


state 73

    (40) expression -> function_call .

    RBRACKET        reduce using rule 40 (expression -> function_call .)
    PLUS            reduce using rule 40 (expression -> function_call .)
    MINUS           reduce using rule 40 (expression -> function_call .)
    STAR            reduce using rule 40 (expression -> function_call .)
    DIV             reduce using rule 40 (expression -> function_call .)
    PROCENT         reduce using rule 40 (expression -> function_call .)
    EQ              reduce using rule 40 (expression -> function_call .)
    LESS            reduce using rule 40 (expression -> function_call .)
    GREATER         reduce using rule 40 (expression -> function_call .)
    NOTEQ           reduce using rule 40 (expression -> function_call .)
    COMMA           reduce using rule 40 (expression -> function_call .)
    SEMICOLON       reduce using rule 40 (expression -> function_call .)
    error           reduce using rule 40 (expression -> function_call .)


state 74

    (43) directions -> direction . COMMA directions
    (44) directions -> direction .

    COMMA           shift and go to state 124
    RBRACKET        reduce using rule 44 (directions -> direction .)


state 75

    (64) variable -> VAR .
    (65) variable -> VAR . LBRACKET index COMMA index RBRACKET

    RBRACKET        reduce using rule 64 (variable -> VAR .)
    PLUS            reduce using rule 64 (variable -> VAR .)
    MINUS           reduce using rule 64 (variable -> VAR .)
    STAR            reduce using rule 64 (variable -> VAR .)
    DIV             reduce using rule 64 (variable -> VAR .)
    PROCENT         reduce using rule 64 (variable -> VAR .)
    EQ              reduce using rule 64 (variable -> VAR .)
    LESS            reduce using rule 64 (variable -> VAR .)
    GREATER         reduce using rule 64 (variable -> VAR .)
    NOTEQ           reduce using rule 64 (variable -> VAR .)
    SEMICOLON       reduce using rule 64 (variable -> VAR .)
    error           reduce using rule 64 (variable -> VAR .)
    COMMA           reduce using rule 64 (variable -> VAR .)
    LBRACKET        shift and go to state 54


state 76

    (45) direction -> TOP .

    COMMA           reduce using rule 45 (direction -> TOP .)
    RBRACKET        reduce using rule 45 (direction -> TOP .)
    SEMICOLON       reduce using rule 45 (direction -> TOP .)
    error           reduce using rule 45 (direction -> TOP .)


state 77

    (46) direction -> NTOP .

    COMMA           reduce using rule 46 (direction -> NTOP .)
    RBRACKET        reduce using rule 46 (direction -> NTOP .)
    SEMICOLON       reduce using rule 46 (direction -> NTOP .)
    error           reduce using rule 46 (direction -> NTOP .)


state 78

    (47) direction -> LEFT .

    COMMA           reduce using rule 47 (direction -> LEFT .)
    RBRACKET        reduce using rule 47 (direction -> LEFT .)
    SEMICOLON       reduce using rule 47 (direction -> LEFT .)
    error           reduce using rule 47 (direction -> LEFT .)


state 79

    (48) direction -> NLEFT .

    COMMA           reduce using rule 48 (direction -> NLEFT .)
    RBRACKET        reduce using rule 48 (direction -> NLEFT .)
    SEMICOLON       reduce using rule 48 (direction -> NLEFT .)
    error           reduce using rule 48 (direction -> NLEFT .)


state 80

    (49) direction -> RIGHT .

    COMMA           reduce using rule 49 (direction -> RIGHT .)
    RBRACKET        reduce using rule 49 (direction -> RIGHT .)
    SEMICOLON       reduce using rule 49 (direction -> RIGHT .)
    error           reduce using rule 49 (direction -> RIGHT .)


state 81

    (50) direction -> NRIGHT .

    COMMA           reduce using rule 50 (direction -> NRIGHT .)
    RBRACKET        reduce using rule 50 (direction -> NRIGHT .)
    SEMICOLON       reduce using rule 50 (direction -> NRIGHT .)
    error           reduce using rule 50 (direction -> NRIGHT .)


state 82

    (51) direction -> DOWN .

    COMMA           reduce using rule 51 (direction -> DOWN .)
    RBRACKET        reduce using rule 51 (direction -> DOWN .)
    SEMICOLON       reduce using rule 51 (direction -> DOWN .)
    error           reduce using rule 51 (direction -> DOWN .)


state 83

    (52) direction -> NDOWN .

    COMMA           reduce using rule 52 (direction -> NDOWN .)
    RBRACKET        reduce using rule 52 (direction -> NDOWN .)
    SEMICOLON       reduce using rule 52 (direction -> NDOWN .)
    error           reduce using rule 52 (direction -> NDOWN .)


state 84

    (53) direction -> BOTTOM .

    COMMA           reduce using rule 53 (direction -> BOTTOM .)
    RBRACKET        reduce using rule 53 (direction -> BOTTOM .)
    SEMICOLON       reduce using rule 53 (direction -> BOTTOM .)
    error           reduce using rule 53 (direction -> BOTTOM .)


state 85

    (68) assignment -> variable ASSIGNMENT . expression
    (73) operator -> variable ASSIGNMENT . robot
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (74) robot -> . direction
    (75) robot -> . XRAY
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (45) direction -> . TOP
    (46) direction -> . NTOP
    (47) direction -> . LEFT
    (48) direction -> . NLEFT
    (49) direction -> . RIGHT
    (50) direction -> . NRIGHT
    (51) direction -> . DOWN
    (52) direction -> . NDOWN
    (53) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    XRAY            shift and go to state 128
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27
    TOP             shift and go to state 76
    NTOP            shift and go to state 77
    LEFT            shift and go to state 78
    NLEFT           shift and go to state 79
    RIGHT           shift and go to state 80
    NRIGHT          shift and go to state 81
    DOWN            shift and go to state 82
    NDOWN           shift and go to state 83
    BOTTOM          shift and go to state 84

    variable                       shift and go to state 70
    expression                     shift and go to state 125
    robot                          shift and go to state 126
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73
    direction                      shift and go to state 127

state 86

    (67) prison -> SHARP variable .

    SEMICOLON       reduce using rule 67 (prison -> SHARP variable .)
    error           reduce using rule 67 (prison -> SHARP variable .)
    EQ              reduce using rule 67 (prison -> SHARP variable .)
    LESS            reduce using rule 67 (prison -> SHARP variable .)
    GREATER         reduce using rule 67 (prison -> SHARP variable .)
    NOTEQ           reduce using rule 67 (prison -> SHARP variable .)
    PLUS            reduce using rule 67 (prison -> SHARP variable .)
    MINUS           reduce using rule 67 (prison -> SHARP variable .)
    STAR            reduce using rule 67 (prison -> SHARP variable .)
    DIV             reduce using rule 67 (prison -> SHARP variable .)
    PROCENT         reduce using rule 67 (prison -> SHARP variable .)
    RBRACKET        reduce using rule 67 (prison -> SHARP variable .)
    COMMA           reduce using rule 67 (prison -> SHARP variable .)


state 87

    (69) if -> TESTONCE LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> TESTONCE LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    math_expression                shift and go to state 129
    compare                        shift and go to state 130
    expression                     shift and go to state 131
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 88

    (71) while -> TESTREP LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> TESTREP LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    math_expression                shift and go to state 132
    compare                        shift and go to state 133
    expression                     shift and go to state 131
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 89

    (76) function -> FUNC VAR . LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> FUNC VAR . LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 134


state 90

    (79) function_call -> CALL VAR . LBRACKET vars RBRACKET
    (80) function_call -> CALL VAR . LBRACKET RBRACKET

    LBRACKET        shift and go to state 135


state 91

    (4) statement -> declaration SEMICOLON NEWLINE .

    CONST           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    error           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SHARP           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    FUNC            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CALL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    VAR             reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CELL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)


state 92

    (14) statement -> declaration error NEWLINE .

    CONST           reduce using rule 14 (statement -> declaration error NEWLINE .)
    MATRIX          reduce using rule 14 (statement -> declaration error NEWLINE .)
    error           reduce using rule 14 (statement -> declaration error NEWLINE .)
    SHARP           reduce using rule 14 (statement -> declaration error NEWLINE .)
    TESTONCE        reduce using rule 14 (statement -> declaration error NEWLINE .)
    TESTREP         reduce using rule 14 (statement -> declaration error NEWLINE .)
    FUNC            reduce using rule 14 (statement -> declaration error NEWLINE .)
    CALL            reduce using rule 14 (statement -> declaration error NEWLINE .)
    VAR             reduce using rule 14 (statement -> declaration error NEWLINE .)
    SIGNED          reduce using rule 14 (statement -> declaration error NEWLINE .)
    UNSIGNED        reduce using rule 14 (statement -> declaration error NEWLINE .)
    CELL            reduce using rule 14 (statement -> declaration error NEWLINE .)
    LBRACKET        reduce using rule 14 (statement -> declaration error NEWLINE .)
    DECIMAL         reduce using rule 14 (statement -> declaration error NEWLINE .)
    $end            reduce using rule 14 (statement -> declaration error NEWLINE .)
    RBRACKET        reduce using rule 14 (statement -> declaration error NEWLINE .)


state 93

    (5) statement -> assignment SEMICOLON NEWLINE .

    CONST           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    error           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SHARP           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    FUNC            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CALL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    VAR             reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CELL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)


state 94

    (15) statement -> assignment error NEWLINE .

    CONST           reduce using rule 15 (statement -> assignment error NEWLINE .)
    MATRIX          reduce using rule 15 (statement -> assignment error NEWLINE .)
    error           reduce using rule 15 (statement -> assignment error NEWLINE .)
    SHARP           reduce using rule 15 (statement -> assignment error NEWLINE .)
    TESTONCE        reduce using rule 15 (statement -> assignment error NEWLINE .)
    TESTREP         reduce using rule 15 (statement -> assignment error NEWLINE .)
    FUNC            reduce using rule 15 (statement -> assignment error NEWLINE .)
    CALL            reduce using rule 15 (statement -> assignment error NEWLINE .)
    VAR             reduce using rule 15 (statement -> assignment error NEWLINE .)
    SIGNED          reduce using rule 15 (statement -> assignment error NEWLINE .)
    UNSIGNED        reduce using rule 15 (statement -> assignment error NEWLINE .)
    CELL            reduce using rule 15 (statement -> assignment error NEWLINE .)
    LBRACKET        reduce using rule 15 (statement -> assignment error NEWLINE .)
    DECIMAL         reduce using rule 15 (statement -> assignment error NEWLINE .)
    $end            reduce using rule 15 (statement -> assignment error NEWLINE .)
    RBRACKET        reduce using rule 15 (statement -> assignment error NEWLINE .)


state 95

    (6) statement -> compare SEMICOLON NEWLINE .

    CONST           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    error           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SHARP           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    FUNC            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CALL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    VAR             reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CELL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    $end            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)


state 96

    (16) statement -> compare error NEWLINE .

    CONST           reduce using rule 16 (statement -> compare error NEWLINE .)
    MATRIX          reduce using rule 16 (statement -> compare error NEWLINE .)
    error           reduce using rule 16 (statement -> compare error NEWLINE .)
    SHARP           reduce using rule 16 (statement -> compare error NEWLINE .)
    TESTONCE        reduce using rule 16 (statement -> compare error NEWLINE .)
    TESTREP         reduce using rule 16 (statement -> compare error NEWLINE .)
    FUNC            reduce using rule 16 (statement -> compare error NEWLINE .)
    CALL            reduce using rule 16 (statement -> compare error NEWLINE .)
    VAR             reduce using rule 16 (statement -> compare error NEWLINE .)
    SIGNED          reduce using rule 16 (statement -> compare error NEWLINE .)
    UNSIGNED        reduce using rule 16 (statement -> compare error NEWLINE .)
    CELL            reduce using rule 16 (statement -> compare error NEWLINE .)
    LBRACKET        reduce using rule 16 (statement -> compare error NEWLINE .)
    DECIMAL         reduce using rule 16 (statement -> compare error NEWLINE .)
    $end            reduce using rule 16 (statement -> compare error NEWLINE .)
    RBRACKET        reduce using rule 16 (statement -> compare error NEWLINE .)


state 97

    (7) statement -> prison SEMICOLON NEWLINE .

    CONST           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    error           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SHARP           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    FUNC            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CALL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    VAR             reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CELL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    $end            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)


state 98

    (17) statement -> prison error NEWLINE .

    CONST           reduce using rule 17 (statement -> prison error NEWLINE .)
    MATRIX          reduce using rule 17 (statement -> prison error NEWLINE .)
    error           reduce using rule 17 (statement -> prison error NEWLINE .)
    SHARP           reduce using rule 17 (statement -> prison error NEWLINE .)
    TESTONCE        reduce using rule 17 (statement -> prison error NEWLINE .)
    TESTREP         reduce using rule 17 (statement -> prison error NEWLINE .)
    FUNC            reduce using rule 17 (statement -> prison error NEWLINE .)
    CALL            reduce using rule 17 (statement -> prison error NEWLINE .)
    VAR             reduce using rule 17 (statement -> prison error NEWLINE .)
    SIGNED          reduce using rule 17 (statement -> prison error NEWLINE .)
    UNSIGNED        reduce using rule 17 (statement -> prison error NEWLINE .)
    CELL            reduce using rule 17 (statement -> prison error NEWLINE .)
    LBRACKET        reduce using rule 17 (statement -> prison error NEWLINE .)
    DECIMAL         reduce using rule 17 (statement -> prison error NEWLINE .)
    $end            reduce using rule 17 (statement -> prison error NEWLINE .)
    RBRACKET        reduce using rule 17 (statement -> prison error NEWLINE .)


state 99

    (10) statement -> operator SEMICOLON NEWLINE .

    CONST           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    error           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SHARP           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    FUNC            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CALL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    VAR             reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CELL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    $end            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)


state 100

    (18) statement -> operator error NEWLINE .

    CONST           reduce using rule 18 (statement -> operator error NEWLINE .)
    MATRIX          reduce using rule 18 (statement -> operator error NEWLINE .)
    error           reduce using rule 18 (statement -> operator error NEWLINE .)
    SHARP           reduce using rule 18 (statement -> operator error NEWLINE .)
    TESTONCE        reduce using rule 18 (statement -> operator error NEWLINE .)
    TESTREP         reduce using rule 18 (statement -> operator error NEWLINE .)
    FUNC            reduce using rule 18 (statement -> operator error NEWLINE .)
    CALL            reduce using rule 18 (statement -> operator error NEWLINE .)
    VAR             reduce using rule 18 (statement -> operator error NEWLINE .)
    SIGNED          reduce using rule 18 (statement -> operator error NEWLINE .)
    UNSIGNED        reduce using rule 18 (statement -> operator error NEWLINE .)
    CELL            reduce using rule 18 (statement -> operator error NEWLINE .)
    LBRACKET        reduce using rule 18 (statement -> operator error NEWLINE .)
    DECIMAL         reduce using rule 18 (statement -> operator error NEWLINE .)
    $end            reduce using rule 18 (statement -> operator error NEWLINE .)
    RBRACKET        reduce using rule 18 (statement -> operator error NEWLINE .)


state 101

    (12) statement -> function_call SEMICOLON NEWLINE .

    CONST           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    error           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SHARP           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    FUNC            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CALL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    VAR             reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CELL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    $end            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)


state 102

    (19) statement -> function_call error NEWLINE .

    CONST           reduce using rule 19 (statement -> function_call error NEWLINE .)
    MATRIX          reduce using rule 19 (statement -> function_call error NEWLINE .)
    error           reduce using rule 19 (statement -> function_call error NEWLINE .)
    SHARP           reduce using rule 19 (statement -> function_call error NEWLINE .)
    TESTONCE        reduce using rule 19 (statement -> function_call error NEWLINE .)
    TESTREP         reduce using rule 19 (statement -> function_call error NEWLINE .)
    FUNC            reduce using rule 19 (statement -> function_call error NEWLINE .)
    CALL            reduce using rule 19 (statement -> function_call error NEWLINE .)
    VAR             reduce using rule 19 (statement -> function_call error NEWLINE .)
    SIGNED          reduce using rule 19 (statement -> function_call error NEWLINE .)
    UNSIGNED        reduce using rule 19 (statement -> function_call error NEWLINE .)
    CELL            reduce using rule 19 (statement -> function_call error NEWLINE .)
    LBRACKET        reduce using rule 19 (statement -> function_call error NEWLINE .)
    DECIMAL         reduce using rule 19 (statement -> function_call error NEWLINE .)
    $end            reduce using rule 19 (statement -> function_call error NEWLINE .)
    RBRACKET        reduce using rule 19 (statement -> function_call error NEWLINE .)


state 103

    (13) statement -> function_return SEMICOLON NEWLINE .

    CONST           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    error           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SHARP           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    FUNC            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CALL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    VAR             reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CELL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    $end            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)


state 104

    (20) statement -> function_return error NEWLINE .

    CONST           reduce using rule 20 (statement -> function_return error NEWLINE .)
    MATRIX          reduce using rule 20 (statement -> function_return error NEWLINE .)
    error           reduce using rule 20 (statement -> function_return error NEWLINE .)
    SHARP           reduce using rule 20 (statement -> function_return error NEWLINE .)
    TESTONCE        reduce using rule 20 (statement -> function_return error NEWLINE .)
    TESTREP         reduce using rule 20 (statement -> function_return error NEWLINE .)
    FUNC            reduce using rule 20 (statement -> function_return error NEWLINE .)
    CALL            reduce using rule 20 (statement -> function_return error NEWLINE .)
    VAR             reduce using rule 20 (statement -> function_return error NEWLINE .)
    SIGNED          reduce using rule 20 (statement -> function_return error NEWLINE .)
    UNSIGNED        reduce using rule 20 (statement -> function_return error NEWLINE .)
    CELL            reduce using rule 20 (statement -> function_return error NEWLINE .)
    LBRACKET        reduce using rule 20 (statement -> function_return error NEWLINE .)
    DECIMAL         reduce using rule 20 (statement -> function_return error NEWLINE .)
    $end            reduce using rule 20 (statement -> function_return error NEWLINE .)
    RBRACKET        reduce using rule 20 (statement -> function_return error NEWLINE .)


state 105

    (27) declaration -> error VAR ASSIGNMENT . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 136
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 106

    (22) declaration -> type VAR ASSIGNMENT . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 137
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 107

    (65) variable -> VAR LBRACKET index . COMMA index RBRACKET

    COMMA           shift and go to state 138


state 108

    (66) index -> expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    COMMA           reduce using rule 66 (index -> expression .)
    RBRACKET        reduce using rule 66 (index -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 109

    (54) compare -> expression EQ expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 54 (compare -> expression EQ expression .)
    error           reduce using rule 54 (compare -> expression EQ expression .)
    RBRACKET        reduce using rule 54 (compare -> expression EQ expression .)
    COMMA           reduce using rule 54 (compare -> expression EQ expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! STAR            [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 54 (compare -> expression EQ expression .) ]
  ! PROCENT         [ reduce using rule 54 (compare -> expression EQ expression .) ]


state 110

    (55) compare -> expression LESS expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 55 (compare -> expression LESS expression .)
    error           reduce using rule 55 (compare -> expression LESS expression .)
    RBRACKET        reduce using rule 55 (compare -> expression LESS expression .)
    COMMA           reduce using rule 55 (compare -> expression LESS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! STAR            [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 55 (compare -> expression LESS expression .) ]
  ! PROCENT         [ reduce using rule 55 (compare -> expression LESS expression .) ]


state 111

    (56) compare -> expression GREATER expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 56 (compare -> expression GREATER expression .)
    error           reduce using rule 56 (compare -> expression GREATER expression .)
    RBRACKET        reduce using rule 56 (compare -> expression GREATER expression .)
    COMMA           reduce using rule 56 (compare -> expression GREATER expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! STAR            [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 56 (compare -> expression GREATER expression .) ]
  ! PROCENT         [ reduce using rule 56 (compare -> expression GREATER expression .) ]


state 112

    (57) compare -> expression NOTEQ expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 57 (compare -> expression NOTEQ expression .)
    error           reduce using rule 57 (compare -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 57 (compare -> expression NOTEQ expression .)
    COMMA           reduce using rule 57 (compare -> expression NOTEQ expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! STAR            [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! DIV             [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]
  ! PROCENT         [ reduce using rule 57 (compare -> expression NOTEQ expression .) ]


state 113

    (58) math_expression -> expression PLUS expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 58 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 58 (math_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 58 (math_expression -> expression PLUS expression .)
    error           reduce using rule 58 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! STAR            [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]
  ! PROCENT         [ reduce using rule 58 (math_expression -> expression PLUS expression .) ]


state 114

    (59) math_expression -> expression MINUS expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 59 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 59 (math_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 59 (math_expression -> expression MINUS expression .)
    error           reduce using rule 59 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! STAR            [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]
  ! PROCENT         [ reduce using rule 59 (math_expression -> expression MINUS expression .) ]


state 115

    (60) math_expression -> expression STAR expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 60 (math_expression -> expression STAR expression .)
    COMMA           reduce using rule 60 (math_expression -> expression STAR expression .)
    SEMICOLON       reduce using rule 60 (math_expression -> expression STAR expression .)
    error           reduce using rule 60 (math_expression -> expression STAR expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! LESS            [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! GREATER         [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! NOTEQ           [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! PLUS            [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! MINUS           [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! STAR            [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! DIV             [ reduce using rule 60 (math_expression -> expression STAR expression .) ]
  ! PROCENT         [ reduce using rule 60 (math_expression -> expression STAR expression .) ]


state 116

    (61) math_expression -> expression DIV expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 61 (math_expression -> expression DIV expression .)
    COMMA           reduce using rule 61 (math_expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 61 (math_expression -> expression DIV expression .)
    error           reduce using rule 61 (math_expression -> expression DIV expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! LESS            [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! GREATER         [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! NOTEQ           [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! STAR            [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 61 (math_expression -> expression DIV expression .) ]
  ! PROCENT         [ reduce using rule 61 (math_expression -> expression DIV expression .) ]


state 117

    (62) math_expression -> expression PROCENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 62 (math_expression -> expression PROCENT expression .)
    COMMA           reduce using rule 62 (math_expression -> expression PROCENT expression .)
    SEMICOLON       reduce using rule 62 (math_expression -> expression PROCENT expression .)
    error           reduce using rule 62 (math_expression -> expression PROCENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58

  ! EQ              [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! LESS            [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! GREATER         [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! NOTEQ           [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! PLUS            [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! MINUS           [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! STAR            [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! DIV             [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]
  ! PROCENT         [ reduce using rule 62 (math_expression -> expression PROCENT expression .) ]


state 118

    (23) declaration -> CONST type VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 139


state 119

    (28) declaration -> CONST error VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 140


state 120

    (24) declaration -> MATRIX type VAR .
    (25) declaration -> MATRIX type VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 24 (declaration -> MATRIX type VAR .)
    error           reduce using rule 24 (declaration -> MATRIX type VAR .)
    LBRACKET        shift and go to state 141


state 121

    (29) declaration -> MATRIX error VAR .
    (30) declaration -> MATRIX error VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 29 (declaration -> MATRIX error VAR .)
    error           reduce using rule 29 (declaration -> MATRIX error VAR .)
    LBRACKET        shift and go to state 142


state 122

    (41) expression -> LBRACKET expression RBRACKET .

    EQ              reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    STAR            reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    DIV             reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    PROCENT         reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)
    error           reduce using rule 41 (expression -> LBRACKET expression RBRACKET .)


state 123

    (42) side -> LBRACKET directions RBRACKET .

    EQ              reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    LESS            reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    GREATER         reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    NOTEQ           reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    PLUS            reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    MINUS           reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    STAR            reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    DIV             reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    PROCENT         reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    RBRACKET        reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    COMMA           reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    SEMICOLON       reduce using rule 42 (side -> LBRACKET directions RBRACKET .)
    error           reduce using rule 42 (side -> LBRACKET directions RBRACKET .)


state 124

    (43) directions -> direction COMMA . directions
    (43) directions -> . direction COMMA directions
    (44) directions -> . direction
    (45) direction -> . TOP
    (46) direction -> . NTOP
    (47) direction -> . LEFT
    (48) direction -> . NLEFT
    (49) direction -> . RIGHT
    (50) direction -> . NRIGHT
    (51) direction -> . DOWN
    (52) direction -> . NDOWN
    (53) direction -> . BOTTOM

    TOP             shift and go to state 76
    NTOP            shift and go to state 77
    LEFT            shift and go to state 78
    NLEFT           shift and go to state 79
    RIGHT           shift and go to state 80
    NRIGHT          shift and go to state 81
    DOWN            shift and go to state 82
    NDOWN           shift and go to state 83
    BOTTOM          shift and go to state 84

    direction                      shift and go to state 74
    directions                     shift and go to state 143

state 125

    (68) assignment -> variable ASSIGNMENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 68 (assignment -> variable ASSIGNMENT expression .)
    error           reduce using rule 68 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 126

    (73) operator -> variable ASSIGNMENT robot .

    SEMICOLON       reduce using rule 73 (operator -> variable ASSIGNMENT robot .)
    error           reduce using rule 73 (operator -> variable ASSIGNMENT robot .)


state 127

    (74) robot -> direction .

    SEMICOLON       reduce using rule 74 (robot -> direction .)
    error           reduce using rule 74 (robot -> direction .)


state 128

    (75) robot -> XRAY .

    SEMICOLON       reduce using rule 75 (robot -> XRAY .)
    error           reduce using rule 75 (robot -> XRAY .)


state 129

    (69) if -> TESTONCE LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (34) expression -> math_expression .

    RBRACKET        shift and go to state 144
    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    STAR            reduce using rule 34 (expression -> math_expression .)
    DIV             reduce using rule 34 (expression -> math_expression .)
    PROCENT         reduce using rule 34 (expression -> math_expression .)
    EQ              reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)
    NOTEQ           reduce using rule 34 (expression -> math_expression .)


state 130

    (70) if -> TESTONCE LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (38) expression -> compare .

    RBRACKET        shift and go to state 145
    PLUS            reduce using rule 38 (expression -> compare .)
    MINUS           reduce using rule 38 (expression -> compare .)
    STAR            reduce using rule 38 (expression -> compare .)
    DIV             reduce using rule 38 (expression -> compare .)
    PROCENT         reduce using rule 38 (expression -> compare .)
    EQ              reduce using rule 38 (expression -> compare .)
    LESS            reduce using rule 38 (expression -> compare .)
    GREATER         reduce using rule 38 (expression -> compare .)
    NOTEQ           reduce using rule 38 (expression -> compare .)


state 131

    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 132

    (71) while -> TESTREP LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (34) expression -> math_expression .

    RBRACKET        shift and go to state 146
    PLUS            reduce using rule 34 (expression -> math_expression .)
    MINUS           reduce using rule 34 (expression -> math_expression .)
    STAR            reduce using rule 34 (expression -> math_expression .)
    DIV             reduce using rule 34 (expression -> math_expression .)
    PROCENT         reduce using rule 34 (expression -> math_expression .)
    EQ              reduce using rule 34 (expression -> math_expression .)
    LESS            reduce using rule 34 (expression -> math_expression .)
    GREATER         reduce using rule 34 (expression -> math_expression .)
    NOTEQ           reduce using rule 34 (expression -> math_expression .)


state 133

    (72) while -> TESTREP LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (38) expression -> compare .

    RBRACKET        shift and go to state 147
    PLUS            reduce using rule 38 (expression -> compare .)
    MINUS           reduce using rule 38 (expression -> compare .)
    STAR            reduce using rule 38 (expression -> compare .)
    DIV             reduce using rule 38 (expression -> compare .)
    PROCENT         reduce using rule 38 (expression -> compare .)
    EQ              reduce using rule 38 (expression -> compare .)
    LESS            reduce using rule 38 (expression -> compare .)
    GREATER         reduce using rule 38 (expression -> compare .)
    NOTEQ           reduce using rule 38 (expression -> compare .)


state 134

    (76) function -> FUNC VAR LBRACKET . parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> FUNC VAR LBRACKET . RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) parameters -> . type VAR COMMA parameters
    (84) parameters -> . type VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL

    RBRACKET        shift and go to state 149
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    parameters                     shift and go to state 148
    type                           shift and go to state 150

state 135

    (79) function_call -> CALL VAR LBRACKET . vars RBRACKET
    (80) function_call -> CALL VAR LBRACKET . RBRACKET
    (81) vars -> . VAR vars
    (82) vars -> . VAR

    RBRACKET        shift and go to state 153
    VAR             shift and go to state 151

    vars                           shift and go to state 152

state 136

    (27) declaration -> error VAR ASSIGNMENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 27 (declaration -> error VAR ASSIGNMENT expression .)
    error           reduce using rule 27 (declaration -> error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 137

    (22) declaration -> type VAR ASSIGNMENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 22 (declaration -> type VAR ASSIGNMENT expression .)
    error           reduce using rule 22 (declaration -> type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 138

    (65) variable -> VAR LBRACKET index COMMA . index RBRACKET
    (66) index -> . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    index                          shift and go to state 154
    expression                     shift and go to state 108
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 139

    (23) declaration -> CONST type VAR ASSIGNMENT . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 155
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 140

    (28) declaration -> CONST error VAR ASSIGNMENT . expression
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 156
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 141

    (25) declaration -> MATRIX type VAR LBRACKET . expression COMMA expression RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 157
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 142

    (30) declaration -> MATRIX error VAR LBRACKET . expression COMMA expression RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 158
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 143

    (43) directions -> direction COMMA directions .

    RBRACKET        reduce using rule 43 (directions -> direction COMMA directions .)


state 144

    (69) if -> TESTONCE LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 159


state 145

    (70) if -> TESTONCE LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 160


state 146

    (71) while -> TESTREP LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 161


state 147

    (72) while -> TESTREP LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 162


state 148

    (76) function -> FUNC VAR LBRACKET parameters . RBRACKET LBRACKET NEWLINE state RBRACKET

    RBRACKET        shift and go to state 163


state 149

    (77) function -> FUNC VAR LBRACKET RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 164


state 150

    (83) parameters -> type . VAR COMMA parameters
    (84) parameters -> type . VAR

    VAR             shift and go to state 165


state 151

    (81) vars -> VAR . vars
    (82) vars -> VAR .
    (81) vars -> . VAR vars
    (82) vars -> . VAR

    RBRACKET        reduce using rule 82 (vars -> VAR .)
    VAR             shift and go to state 151

    vars                           shift and go to state 166

state 152

    (79) function_call -> CALL VAR LBRACKET vars . RBRACKET

    RBRACKET        shift and go to state 167


state 153

    (80) function_call -> CALL VAR LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    error           reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    EQ              reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    LESS            reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    GREATER         reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    NOTEQ           reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PLUS            reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    MINUS           reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    STAR            reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    DIV             reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PROCENT         reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)
    COMMA           reduce using rule 80 (function_call -> CALL VAR LBRACKET RBRACKET .)


state 154

    (65) variable -> VAR LBRACKET index COMMA index . RBRACKET

    RBRACKET        shift and go to state 168


state 155

    (23) declaration -> CONST type VAR ASSIGNMENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 23 (declaration -> CONST type VAR ASSIGNMENT expression .)
    error           reduce using rule 23 (declaration -> CONST type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 156

    (28) declaration -> CONST error VAR ASSIGNMENT expression .
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 28 (declaration -> CONST error VAR ASSIGNMENT expression .)
    error           reduce using rule 28 (declaration -> CONST error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 157

    (25) declaration -> MATRIX type VAR LBRACKET expression . COMMA expression RBRACKET
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 169
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 158

    (30) declaration -> MATRIX error VAR LBRACKET expression . COMMA expression RBRACKET
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 170
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 159

    (69) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 171


state 160

    (70) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 172


state 161

    (71) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 173


state 162

    (72) while -> TESTREP LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 174


state 163

    (76) function -> FUNC VAR LBRACKET parameters RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 175


state 164

    (77) function -> FUNC VAR LBRACKET RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 176


state 165

    (83) parameters -> type VAR . COMMA parameters
    (84) parameters -> type VAR .

    COMMA           shift and go to state 177
    RBRACKET        reduce using rule 84 (parameters -> type VAR .)


state 166

    (81) vars -> VAR vars .

    RBRACKET        reduce using rule 81 (vars -> VAR vars .)


state 167

    (79) function_call -> CALL VAR LBRACKET vars RBRACKET .

    SEMICOLON       reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    error           reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    EQ              reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    LESS            reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    GREATER         reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    NOTEQ           reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PLUS            reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    MINUS           reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    STAR            reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    DIV             reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PROCENT         reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    RBRACKET        reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    COMMA           reduce using rule 79 (function_call -> CALL VAR LBRACKET vars RBRACKET .)


state 168

    (65) variable -> VAR LBRACKET index COMMA index RBRACKET .

    ASSIGNMENT      reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    EQ              reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    LESS            reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    GREATER         reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    NOTEQ           reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PLUS            reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    MINUS           reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    STAR            reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    DIV             reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PROCENT         reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    RBRACKET        reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    SEMICOLON       reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    error           reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    COMMA           reduce using rule 65 (variable -> VAR LBRACKET index COMMA index RBRACKET .)


state 169

    (25) declaration -> MATRIX type VAR LBRACKET expression COMMA . expression RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 178
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 170

    (30) declaration -> MATRIX error VAR LBRACKET expression COMMA . expression RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (42) side -> . LBRACKET directions RBRACKET
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    VAR             shift and go to state 75
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 179
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 70
    side                           shift and go to state 32
    compare                        shift and go to state 71
    prison                         shift and go to state 72
    function_call                  shift and go to state 73

state 171

    (69) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    math_expression                shift and go to state 24
    state                          shift and go to state 180
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 172

    (70) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    compare                        shift and go to state 6
    state                          shift and go to state 181
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 173

    (71) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    math_expression                shift and go to state 24
    state                          shift and go to state 182
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 174

    (72) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    compare                        shift and go to state 6
    state                          shift and go to state 183
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 175

    (76) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 184


state 176

    (77) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    state                          shift and go to state 185
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 177

    (83) parameters -> type VAR COMMA . parameters
    (83) parameters -> . type VAR COMMA parameters
    (84) parameters -> . type VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL

    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 150
    parameters                     shift and go to state 186

state 178

    (25) declaration -> MATRIX type VAR LBRACKET expression COMMA expression . RBRACKET
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 187
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 179

    (30) declaration -> MATRIX error VAR LBRACKET expression COMMA expression . RBRACKET
    (58) math_expression -> expression . PLUS expression
    (59) math_expression -> expression . MINUS expression
    (60) math_expression -> expression . STAR expression
    (61) math_expression -> expression . DIV expression
    (62) math_expression -> expression . PROCENT expression
    (54) compare -> expression . EQ expression
    (55) compare -> expression . LESS expression
    (56) compare -> expression . GREATER expression
    (57) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 188
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    STAR            shift and go to state 61
    DIV             shift and go to state 62
    PROCENT         shift and go to state 63
    EQ              shift and go to state 55
    LESS            shift and go to state 56
    GREATER         shift and go to state 57
    NOTEQ           shift and go to state 58


state 180

    (69) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 189
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    math_expression                shift and go to state 24
    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 181

    (70) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 190
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    compare                        shift and go to state 6
    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 182

    (71) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 191
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    math_expression                shift and go to state 24
    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 183

    (72) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 192
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    compare                        shift and go to state 6
    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 184

    (76) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    state                          shift and go to state 193
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 185

    (77) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 194
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 186

    (83) parameters -> type VAR COMMA parameters .

    RBRACKET        reduce using rule 83 (parameters -> type VAR COMMA parameters .)


state 187

    (25) declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 25 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 25 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)


state 188

    (30) declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 30 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 30 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)


state 189

    (69) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 69 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 190

    (70) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 70 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 191

    (71) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 71 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 192

    (72) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 72 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 193

    (76) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration error NEWLINE
    (15) statement -> . assignment error NEWLINE
    (16) statement -> . compare error NEWLINE
    (17) statement -> . prison error NEWLINE
    (18) statement -> . operator error NEWLINE
    (19) statement -> . function_call error NEWLINE
    (20) statement -> . function_return error NEWLINE
    (21) declaration -> . type VAR
    (22) declaration -> . type VAR ASSIGNMENT expression
    (23) declaration -> . CONST type VAR ASSIGNMENT expression
    (24) declaration -> . MATRIX type VAR
    (25) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (26) declaration -> . error VAR
    (27) declaration -> . error VAR ASSIGNMENT expression
    (28) declaration -> . CONST error VAR ASSIGNMENT expression
    (29) declaration -> . MATRIX error VAR
    (30) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (68) assignment -> . variable ASSIGNMENT expression
    (54) compare -> . expression EQ expression
    (55) compare -> . expression LESS expression
    (56) compare -> . expression GREATER expression
    (57) compare -> . expression NOTEQ expression
    (67) prison -> . SHARP variable
    (69) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (71) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (72) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (73) operator -> . variable ASSIGNMENT robot
    (76) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (77) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (79) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (80) function_call -> . CALL VAR LBRACKET RBRACKET
    (78) function_return -> . VAR
    (31) type -> . SIGNED
    (32) type -> . UNSIGNED
    (33) type -> . CELL
    (64) variable -> . VAR
    (65) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (34) expression -> . math_expression
    (35) expression -> . const
    (36) expression -> . variable
    (37) expression -> . side
    (38) expression -> . compare
    (39) expression -> . prison
    (40) expression -> . function_call
    (41) expression -> . LBRACKET expression RBRACKET
    (58) math_expression -> . expression PLUS expression
    (59) math_expression -> . expression MINUS expression
    (60) math_expression -> . expression STAR expression
    (61) math_expression -> . expression DIV expression
    (62) math_expression -> . expression PROCENT expression
    (63) const -> . DECIMAL
    (42) side -> . LBRACKET directions RBRACKET

    RBRACKET        shift and go to state 195
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33

    statement                      shift and go to state 34
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 194

    (77) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 77 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 195

    (76) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 76 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for STAR in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for STAR in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for STAR in state 111 resolved as shift
WARNING: shift/reduce conflict for DIV in state 111 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for STAR in state 112 resolved as shift
WARNING: shift/reduce conflict for DIV in state 112 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for STAR in state 113 resolved as shift
WARNING: shift/reduce conflict for DIV in state 113 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for LESS in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for STAR in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for STAR in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for LESS in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 115 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for STAR in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 116 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for STAR in state 117 resolved as shift
WARNING: shift/reduce conflict for DIV in state 117 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 117 resolved as shift
