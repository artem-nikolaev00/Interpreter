Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> state
Rule 2     state -> state statement
Rule 3     state -> statement
Rule 4     statement -> declaration SEMICOLON NEWLINE
Rule 5     statement -> assignment SEMICOLON NEWLINE
Rule 6     statement -> compare SEMICOLON NEWLINE
Rule 7     statement -> prison SEMICOLON NEWLINE
Rule 8     statement -> if NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> operator SEMICOLON NEWLINE
Rule 11    statement -> function NEWLINE
Rule 12    statement -> function_call SEMICOLON NEWLINE
Rule 13    statement -> function_return SEMICOLON NEWLINE
Rule 14    statement -> declaration SEMICOLON
Rule 15    statement -> assignment SEMICOLON
Rule 16    statement -> compare SEMICOLON
Rule 17    statement -> prison SEMICOLON
Rule 18    statement -> if
Rule 19    statement -> while
Rule 20    statement -> operator SEMICOLON
Rule 21    statement -> function
Rule 22    statement -> function_call SEMICOLON
Rule 23    statement -> function_return SEMICOLON
Rule 24    statement -> declaration error NEWLINE
Rule 25    statement -> assignment error NEWLINE
Rule 26    statement -> compare error NEWLINE
Rule 27    statement -> prison error NEWLINE
Rule 28    statement -> operator error NEWLINE
Rule 29    statement -> function_call error NEWLINE
Rule 30    statement -> function_return error NEWLINE
Rule 31    declaration -> type VAR
Rule 32    declaration -> type VAR ASSIGNMENT expression
Rule 33    declaration -> CONST type VAR ASSIGNMENT expression
Rule 34    declaration -> MATRIX type VAR
Rule 35    declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
Rule 36    declaration -> error VAR
Rule 37    declaration -> error VAR ASSIGNMENT expression
Rule 38    declaration -> CONST error VAR ASSIGNMENT expression
Rule 39    declaration -> MATRIX error VAR
Rule 40    declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
Rule 41    type -> SIGNED
Rule 42    type -> UNSIGNED
Rule 43    type -> CELL
Rule 44    expression -> math_expression
Rule 45    expression -> const
Rule 46    expression -> variable
Rule 47    expression -> side
Rule 48    expression -> compare
Rule 49    expression -> prison
Rule 50    expression -> function_call
Rule 51    expression -> LBRACKET expression RBRACKET
Rule 52    side -> LBRACKET directions RBRACKET
Rule 53    side -> LBRACKET error RBRACKET
Rule 54    directions -> direction COMMA directions
Rule 55    directions -> direction
Rule 56    direction -> TOP
Rule 57    direction -> NTOP
Rule 58    direction -> LEFT
Rule 59    direction -> NLEFT
Rule 60    direction -> RIGHT
Rule 61    direction -> NRIGHT
Rule 62    direction -> DOWN
Rule 63    direction -> NDOWN
Rule 64    direction -> BOTTOM
Rule 65    compare -> expression EQ expression
Rule 66    compare -> expression LESS expression
Rule 67    compare -> expression GREATER expression
Rule 68    compare -> expression NOTEQ expression
Rule 69    math_expression -> expression PLUS expression
Rule 70    math_expression -> expression MINUS expression
Rule 71    math_expression -> expression STAR expression
Rule 72    math_expression -> expression DIV expression
Rule 73    math_expression -> expression PROCENT expression
Rule 74    const -> DECIMAL
Rule 75    const -> UDECIMAL
Rule 76    variable -> VAR
Rule 77    variable -> VAR LBRACKET index COMMA index RBRACKET
Rule 78    index -> expression
Rule 79    prison -> SHARP variable
Rule 80    assignment -> variable ASSIGNMENT expression
Rule 81    assignment -> variable ASSIGNMENT error
Rule 82    if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 83    if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 84    if -> TESTONCE error
Rule 85    while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 86    while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 87    if -> TESTREP error
Rule 88    operator -> variable ASSIGNMENT robot
Rule 89    robot -> direction
Rule 90    robot -> XRAY
Rule 91    function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 92    function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 93    function_return -> VAR
Rule 94    function_call -> CALL VAR LBRACKET vars RBRACKET
Rule 95    function_call -> CALL VAR LBRACKET RBRACKET
Rule 96    function_call -> VAR LBRACKET vars RBRACKET error
Rule 97    function_call -> VAR LBRACKET RBRACKET error
Rule 98    vars -> VAR vars
Rule 99    vars -> VAR
Rule 100   parameters -> type VAR COMMA parameters
Rule 101   parameters -> type VAR

Terminals, with rules where they appear

ASSIGNMENT           : 32 33 37 38 80 81 88
BOTTOM               : 64
CALL                 : 94 95
CELL                 : 43
COMMA                : 35 40 54 77 100
CONST                : 33 38
DECIMAL              : 74
DIV                  : 72
DOWN                 : 62
EQ                   : 65
FUNC                 : 91 92
GREATER              : 67
LBRACKET             : 35 40 51 52 53 77 82 82 83 83 85 85 86 86 91 91 92 92 94 95 96 97
LEFT                 : 58
LESS                 : 66
MATRIX               : 34 35 39 40
MINUS                : 70
NDOWN                : 63
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 24 25 26 27 28 29 30 82 83 85 86 91 92
NLEFT                : 59
NOTEQ                : 68
NRIGHT               : 61
NTOP                 : 57
PLUS                 : 69
PROCENT              : 73
RBRACKET             : 35 40 51 52 53 77 82 82 83 83 85 85 86 86 91 91 92 92 94 95 96 97
RIGHT                : 60
SEMICOLON            : 4 5 6 7 10 12 13 14 15 16 17 20 22 23
SHARP                : 79
SIGNED               : 41
STAR                 : 71
TESTONCE             : 82 83 84
TESTREP              : 85 86 87
TOP                  : 56
UDECIMAL             : 75
UNSIGNED             : 42
VAR                  : 31 32 33 34 35 36 37 38 39 40 76 77 91 92 93 94 95 96 97 98 99 100 101
XRAY                 : 90
error                : 24 25 26 27 28 29 30 36 37 38 39 40 53 81 84 87 96 97

Nonterminals, with rules where they appear

assignment           : 5 15 25
compare              : 6 16 26 48 83 86
const                : 45
declaration          : 4 14 24
direction            : 54 55 89
directions           : 52 54
expression           : 32 33 35 35 37 38 40 40 51 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 78 80
function             : 11 21
function_call        : 12 22 29 50
function_return      : 13 23 30
if                   : 8 18
index                : 77 77
math_expression      : 44 82 85
operator             : 10 20 28
parameters           : 91 100
prison               : 7 17 27 49
program              : 0
robot                : 88
side                 : 47
state                : 1 2 82 83 85 86 91 92
statement            : 2 3
type                 : 31 32 33 34 35 100 101
variable             : 46 79 80 81 88
vars                 : 94 96 98
while                : 9 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . state
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    program                        shift and go to state 1
    state                          shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 1

    (0) S' -> program .



state 2

    (1) program -> state .
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    $end            reduce using rule 1 (program -> state .)
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 3

    (3) state -> statement .

    CONST           reduce using rule 3 (state -> statement .)
    MATRIX          reduce using rule 3 (state -> statement .)
    error           reduce using rule 3 (state -> statement .)
    SHARP           reduce using rule 3 (state -> statement .)
    TESTONCE        reduce using rule 3 (state -> statement .)
    TESTREP         reduce using rule 3 (state -> statement .)
    FUNC            reduce using rule 3 (state -> statement .)
    CALL            reduce using rule 3 (state -> statement .)
    VAR             reduce using rule 3 (state -> statement .)
    SIGNED          reduce using rule 3 (state -> statement .)
    UNSIGNED        reduce using rule 3 (state -> statement .)
    CELL            reduce using rule 3 (state -> statement .)
    LBRACKET        reduce using rule 3 (state -> statement .)
    DECIMAL         reduce using rule 3 (state -> statement .)
    UDECIMAL        reduce using rule 3 (state -> statement .)
    $end            reduce using rule 3 (state -> statement .)
    RBRACKET        reduce using rule 3 (state -> statement .)


state 4

    (4) statement -> declaration . SEMICOLON NEWLINE
    (14) statement -> declaration . SEMICOLON
    (24) statement -> declaration . error NEWLINE

    SEMICOLON       shift and go to state 36
    error           shift and go to state 37


state 5

    (5) statement -> assignment . SEMICOLON NEWLINE
    (15) statement -> assignment . SEMICOLON
    (25) statement -> assignment . error NEWLINE

    SEMICOLON       shift and go to state 38
    error           shift and go to state 39


state 6

    (6) statement -> compare . SEMICOLON NEWLINE
    (16) statement -> compare . SEMICOLON
    (26) statement -> compare . error NEWLINE
    (48) expression -> compare .

    SEMICOLON       shift and go to state 40
    error           shift and go to state 41
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)


state 7

    (7) statement -> prison . SEMICOLON NEWLINE
    (17) statement -> prison . SEMICOLON
    (27) statement -> prison . error NEWLINE
    (49) expression -> prison .

    SEMICOLON       shift and go to state 42
    error           shift and go to state 43
    EQ              reduce using rule 49 (expression -> prison .)
    LESS            reduce using rule 49 (expression -> prison .)
    GREATER         reduce using rule 49 (expression -> prison .)
    NOTEQ           reduce using rule 49 (expression -> prison .)
    PLUS            reduce using rule 49 (expression -> prison .)
    MINUS           reduce using rule 49 (expression -> prison .)
    STAR            reduce using rule 49 (expression -> prison .)
    DIV             reduce using rule 49 (expression -> prison .)
    PROCENT         reduce using rule 49 (expression -> prison .)


state 8

    (8) statement -> if . NEWLINE
    (18) statement -> if .

    NEWLINE         shift and go to state 44
    CONST           reduce using rule 18 (statement -> if .)
    MATRIX          reduce using rule 18 (statement -> if .)
    error           reduce using rule 18 (statement -> if .)
    SHARP           reduce using rule 18 (statement -> if .)
    TESTONCE        reduce using rule 18 (statement -> if .)
    TESTREP         reduce using rule 18 (statement -> if .)
    FUNC            reduce using rule 18 (statement -> if .)
    CALL            reduce using rule 18 (statement -> if .)
    VAR             reduce using rule 18 (statement -> if .)
    SIGNED          reduce using rule 18 (statement -> if .)
    UNSIGNED        reduce using rule 18 (statement -> if .)
    CELL            reduce using rule 18 (statement -> if .)
    LBRACKET        reduce using rule 18 (statement -> if .)
    DECIMAL         reduce using rule 18 (statement -> if .)
    UDECIMAL        reduce using rule 18 (statement -> if .)
    $end            reduce using rule 18 (statement -> if .)
    RBRACKET        reduce using rule 18 (statement -> if .)


state 9

    (9) statement -> while . NEWLINE
    (19) statement -> while .

    NEWLINE         shift and go to state 45
    CONST           reduce using rule 19 (statement -> while .)
    MATRIX          reduce using rule 19 (statement -> while .)
    error           reduce using rule 19 (statement -> while .)
    SHARP           reduce using rule 19 (statement -> while .)
    TESTONCE        reduce using rule 19 (statement -> while .)
    TESTREP         reduce using rule 19 (statement -> while .)
    FUNC            reduce using rule 19 (statement -> while .)
    CALL            reduce using rule 19 (statement -> while .)
    VAR             reduce using rule 19 (statement -> while .)
    SIGNED          reduce using rule 19 (statement -> while .)
    UNSIGNED        reduce using rule 19 (statement -> while .)
    CELL            reduce using rule 19 (statement -> while .)
    LBRACKET        reduce using rule 19 (statement -> while .)
    DECIMAL         reduce using rule 19 (statement -> while .)
    UDECIMAL        reduce using rule 19 (statement -> while .)
    $end            reduce using rule 19 (statement -> while .)
    RBRACKET        reduce using rule 19 (statement -> while .)


state 10

    (10) statement -> operator . SEMICOLON NEWLINE
    (20) statement -> operator . SEMICOLON
    (28) statement -> operator . error NEWLINE

    SEMICOLON       shift and go to state 46
    error           shift and go to state 47


state 11

    (11) statement -> function . NEWLINE
    (21) statement -> function .

    NEWLINE         shift and go to state 48
    CONST           reduce using rule 21 (statement -> function .)
    MATRIX          reduce using rule 21 (statement -> function .)
    error           reduce using rule 21 (statement -> function .)
    SHARP           reduce using rule 21 (statement -> function .)
    TESTONCE        reduce using rule 21 (statement -> function .)
    TESTREP         reduce using rule 21 (statement -> function .)
    FUNC            reduce using rule 21 (statement -> function .)
    CALL            reduce using rule 21 (statement -> function .)
    VAR             reduce using rule 21 (statement -> function .)
    SIGNED          reduce using rule 21 (statement -> function .)
    UNSIGNED        reduce using rule 21 (statement -> function .)
    CELL            reduce using rule 21 (statement -> function .)
    LBRACKET        reduce using rule 21 (statement -> function .)
    DECIMAL         reduce using rule 21 (statement -> function .)
    UDECIMAL        reduce using rule 21 (statement -> function .)
    $end            reduce using rule 21 (statement -> function .)
    RBRACKET        reduce using rule 21 (statement -> function .)


state 12

    (12) statement -> function_call . SEMICOLON NEWLINE
    (22) statement -> function_call . SEMICOLON
    (29) statement -> function_call . error NEWLINE
    (50) expression -> function_call .

    SEMICOLON       shift and go to state 49
    error           shift and go to state 50
    EQ              reduce using rule 50 (expression -> function_call .)
    LESS            reduce using rule 50 (expression -> function_call .)
    GREATER         reduce using rule 50 (expression -> function_call .)
    NOTEQ           reduce using rule 50 (expression -> function_call .)
    PLUS            reduce using rule 50 (expression -> function_call .)
    MINUS           reduce using rule 50 (expression -> function_call .)
    STAR            reduce using rule 50 (expression -> function_call .)
    DIV             reduce using rule 50 (expression -> function_call .)
    PROCENT         reduce using rule 50 (expression -> function_call .)


state 13

    (13) statement -> function_return . SEMICOLON NEWLINE
    (23) statement -> function_return . SEMICOLON
    (30) statement -> function_return . error NEWLINE

    SEMICOLON       shift and go to state 51
    error           shift and go to state 52


state 14

    (36) declaration -> error . VAR
    (37) declaration -> error . VAR ASSIGNMENT expression

    VAR             shift and go to state 53


state 15

    (31) declaration -> type . VAR
    (32) declaration -> type . VAR ASSIGNMENT expression

    VAR             shift and go to state 54


state 16

    (96) function_call -> VAR . LBRACKET vars RBRACKET error
    (97) function_call -> VAR . LBRACKET RBRACKET error
    (93) function_return -> VAR .
    (76) variable -> VAR .
    (77) variable -> VAR . LBRACKET index COMMA index RBRACKET

    LBRACKET        shift and go to state 55
    SEMICOLON       reduce using rule 93 (function_return -> VAR .)
    error           reduce using rule 93 (function_return -> VAR .)
    ASSIGNMENT      reduce using rule 76 (variable -> VAR .)
    EQ              reduce using rule 76 (variable -> VAR .)
    LESS            reduce using rule 76 (variable -> VAR .)
    GREATER         reduce using rule 76 (variable -> VAR .)
    NOTEQ           reduce using rule 76 (variable -> VAR .)
    PLUS            reduce using rule 76 (variable -> VAR .)
    MINUS           reduce using rule 76 (variable -> VAR .)
    STAR            reduce using rule 76 (variable -> VAR .)
    DIV             reduce using rule 76 (variable -> VAR .)
    PROCENT         reduce using rule 76 (variable -> VAR .)


state 17

    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression

    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64


state 18

    (33) declaration -> CONST . type VAR ASSIGNMENT expression
    (38) declaration -> CONST . error VAR ASSIGNMENT expression
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    error           shift and go to state 66
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 65

state 19

    (34) declaration -> MATRIX . type VAR
    (35) declaration -> MATRIX . type VAR LBRACKET expression COMMA expression RBRACKET
    (39) declaration -> MATRIX . error VAR
    (40) declaration -> MATRIX . error VAR LBRACKET expression COMMA expression RBRACKET
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    error           shift and go to state 68
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 67

state 20

    (51) expression -> LBRACKET . expression RBRACKET
    (52) side -> LBRACKET . directions RBRACKET
    (53) side -> LBRACKET . error RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (54) directions -> . direction COMMA directions
    (55) directions -> . direction
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (56) direction -> . TOP
    (57) direction -> . NTOP
    (58) direction -> . LEFT
    (59) direction -> . NLEFT
    (60) direction -> . RIGHT
    (61) direction -> . NRIGHT
    (62) direction -> . DOWN
    (63) direction -> . NDOWN
    (64) direction -> . BOTTOM

    error           shift and go to state 71
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27
    TOP             shift and go to state 78
    NTOP            shift and go to state 79
    LEFT            shift and go to state 80
    NLEFT           shift and go to state 81
    RIGHT           shift and go to state 82
    NRIGHT          shift and go to state 83
    DOWN            shift and go to state 84
    NDOWN           shift and go to state 85
    BOTTOM          shift and go to state 86

    expression                     shift and go to state 69
    directions                     shift and go to state 70
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75
    direction                      shift and go to state 76

state 21

    (80) assignment -> variable . ASSIGNMENT expression
    (81) assignment -> variable . ASSIGNMENT error
    (88) operator -> variable . ASSIGNMENT robot
    (46) expression -> variable .

    ASSIGNMENT      shift and go to state 87
    EQ              reduce using rule 46 (expression -> variable .)
    LESS            reduce using rule 46 (expression -> variable .)
    GREATER         reduce using rule 46 (expression -> variable .)
    NOTEQ           reduce using rule 46 (expression -> variable .)
    PLUS            reduce using rule 46 (expression -> variable .)
    MINUS           reduce using rule 46 (expression -> variable .)
    STAR            reduce using rule 46 (expression -> variable .)
    DIV             reduce using rule 46 (expression -> variable .)
    PROCENT         reduce using rule 46 (expression -> variable .)


state 22

    (79) prison -> SHARP . variable
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET

    VAR             shift and go to state 89

    variable                       shift and go to state 88

state 23

    (82) if -> TESTONCE . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> TESTONCE . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> TESTONCE . error

    LBRACKET        shift and go to state 90
    error           shift and go to state 91


state 24

    (44) expression -> math_expression .

    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    RBRACKET        reduce using rule 44 (expression -> math_expression .)
    COMMA           reduce using rule 44 (expression -> math_expression .)
    SEMICOLON       reduce using rule 44 (expression -> math_expression .)
    error           reduce using rule 44 (expression -> math_expression .)


state 25

    (87) if -> TESTREP . error
    (85) while -> TESTREP . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> TESTREP . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET

    error           shift and go to state 92
    LBRACKET        shift and go to state 93


state 26

    (91) function -> FUNC . VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> FUNC . VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    VAR             shift and go to state 94


state 27

    (94) function_call -> CALL . VAR LBRACKET vars RBRACKET
    (95) function_call -> CALL . VAR LBRACKET RBRACKET

    VAR             shift and go to state 95


state 28

    (41) type -> SIGNED .

    VAR             reduce using rule 41 (type -> SIGNED .)


state 29

    (42) type -> UNSIGNED .

    VAR             reduce using rule 42 (type -> UNSIGNED .)


state 30

    (43) type -> CELL .

    VAR             reduce using rule 43 (type -> CELL .)


state 31

    (45) expression -> const .

    EQ              reduce using rule 45 (expression -> const .)
    LESS            reduce using rule 45 (expression -> const .)
    GREATER         reduce using rule 45 (expression -> const .)
    NOTEQ           reduce using rule 45 (expression -> const .)
    PLUS            reduce using rule 45 (expression -> const .)
    MINUS           reduce using rule 45 (expression -> const .)
    STAR            reduce using rule 45 (expression -> const .)
    DIV             reduce using rule 45 (expression -> const .)
    PROCENT         reduce using rule 45 (expression -> const .)
    RBRACKET        reduce using rule 45 (expression -> const .)
    COMMA           reduce using rule 45 (expression -> const .)
    SEMICOLON       reduce using rule 45 (expression -> const .)
    error           reduce using rule 45 (expression -> const .)


state 32

    (47) expression -> side .

    EQ              reduce using rule 47 (expression -> side .)
    LESS            reduce using rule 47 (expression -> side .)
    GREATER         reduce using rule 47 (expression -> side .)
    NOTEQ           reduce using rule 47 (expression -> side .)
    PLUS            reduce using rule 47 (expression -> side .)
    MINUS           reduce using rule 47 (expression -> side .)
    STAR            reduce using rule 47 (expression -> side .)
    DIV             reduce using rule 47 (expression -> side .)
    PROCENT         reduce using rule 47 (expression -> side .)
    RBRACKET        reduce using rule 47 (expression -> side .)
    COMMA           reduce using rule 47 (expression -> side .)
    SEMICOLON       reduce using rule 47 (expression -> side .)
    error           reduce using rule 47 (expression -> side .)


state 33

    (74) const -> DECIMAL .

    EQ              reduce using rule 74 (const -> DECIMAL .)
    LESS            reduce using rule 74 (const -> DECIMAL .)
    GREATER         reduce using rule 74 (const -> DECIMAL .)
    NOTEQ           reduce using rule 74 (const -> DECIMAL .)
    PLUS            reduce using rule 74 (const -> DECIMAL .)
    MINUS           reduce using rule 74 (const -> DECIMAL .)
    STAR            reduce using rule 74 (const -> DECIMAL .)
    DIV             reduce using rule 74 (const -> DECIMAL .)
    PROCENT         reduce using rule 74 (const -> DECIMAL .)
    RBRACKET        reduce using rule 74 (const -> DECIMAL .)
    COMMA           reduce using rule 74 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 74 (const -> DECIMAL .)
    error           reduce using rule 74 (const -> DECIMAL .)


state 34

    (75) const -> UDECIMAL .

    EQ              reduce using rule 75 (const -> UDECIMAL .)
    LESS            reduce using rule 75 (const -> UDECIMAL .)
    GREATER         reduce using rule 75 (const -> UDECIMAL .)
    NOTEQ           reduce using rule 75 (const -> UDECIMAL .)
    PLUS            reduce using rule 75 (const -> UDECIMAL .)
    MINUS           reduce using rule 75 (const -> UDECIMAL .)
    STAR            reduce using rule 75 (const -> UDECIMAL .)
    DIV             reduce using rule 75 (const -> UDECIMAL .)
    PROCENT         reduce using rule 75 (const -> UDECIMAL .)
    RBRACKET        reduce using rule 75 (const -> UDECIMAL .)
    COMMA           reduce using rule 75 (const -> UDECIMAL .)
    SEMICOLON       reduce using rule 75 (const -> UDECIMAL .)
    error           reduce using rule 75 (const -> UDECIMAL .)


state 35

    (2) state -> state statement .

    CONST           reduce using rule 2 (state -> state statement .)
    MATRIX          reduce using rule 2 (state -> state statement .)
    error           reduce using rule 2 (state -> state statement .)
    SHARP           reduce using rule 2 (state -> state statement .)
    TESTONCE        reduce using rule 2 (state -> state statement .)
    TESTREP         reduce using rule 2 (state -> state statement .)
    FUNC            reduce using rule 2 (state -> state statement .)
    CALL            reduce using rule 2 (state -> state statement .)
    VAR             reduce using rule 2 (state -> state statement .)
    SIGNED          reduce using rule 2 (state -> state statement .)
    UNSIGNED        reduce using rule 2 (state -> state statement .)
    CELL            reduce using rule 2 (state -> state statement .)
    LBRACKET        reduce using rule 2 (state -> state statement .)
    DECIMAL         reduce using rule 2 (state -> state statement .)
    UDECIMAL        reduce using rule 2 (state -> state statement .)
    $end            reduce using rule 2 (state -> state statement .)
    RBRACKET        reduce using rule 2 (state -> state statement .)


state 36

    (4) statement -> declaration SEMICOLON . NEWLINE
    (14) statement -> declaration SEMICOLON .

    NEWLINE         shift and go to state 96
    CONST           reduce using rule 14 (statement -> declaration SEMICOLON .)
    MATRIX          reduce using rule 14 (statement -> declaration SEMICOLON .)
    error           reduce using rule 14 (statement -> declaration SEMICOLON .)
    SHARP           reduce using rule 14 (statement -> declaration SEMICOLON .)
    TESTONCE        reduce using rule 14 (statement -> declaration SEMICOLON .)
    TESTREP         reduce using rule 14 (statement -> declaration SEMICOLON .)
    FUNC            reduce using rule 14 (statement -> declaration SEMICOLON .)
    CALL            reduce using rule 14 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 14 (statement -> declaration SEMICOLON .)
    SIGNED          reduce using rule 14 (statement -> declaration SEMICOLON .)
    UNSIGNED        reduce using rule 14 (statement -> declaration SEMICOLON .)
    CELL            reduce using rule 14 (statement -> declaration SEMICOLON .)
    LBRACKET        reduce using rule 14 (statement -> declaration SEMICOLON .)
    DECIMAL         reduce using rule 14 (statement -> declaration SEMICOLON .)
    UDECIMAL        reduce using rule 14 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 14 (statement -> declaration SEMICOLON .)
    RBRACKET        reduce using rule 14 (statement -> declaration SEMICOLON .)


state 37

    (24) statement -> declaration error . NEWLINE

    NEWLINE         shift and go to state 97


state 38

    (5) statement -> assignment SEMICOLON . NEWLINE
    (15) statement -> assignment SEMICOLON .

    NEWLINE         shift and go to state 98
    CONST           reduce using rule 15 (statement -> assignment SEMICOLON .)
    MATRIX          reduce using rule 15 (statement -> assignment SEMICOLON .)
    error           reduce using rule 15 (statement -> assignment SEMICOLON .)
    SHARP           reduce using rule 15 (statement -> assignment SEMICOLON .)
    TESTONCE        reduce using rule 15 (statement -> assignment SEMICOLON .)
    TESTREP         reduce using rule 15 (statement -> assignment SEMICOLON .)
    FUNC            reduce using rule 15 (statement -> assignment SEMICOLON .)
    CALL            reduce using rule 15 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 15 (statement -> assignment SEMICOLON .)
    SIGNED          reduce using rule 15 (statement -> assignment SEMICOLON .)
    UNSIGNED        reduce using rule 15 (statement -> assignment SEMICOLON .)
    CELL            reduce using rule 15 (statement -> assignment SEMICOLON .)
    LBRACKET        reduce using rule 15 (statement -> assignment SEMICOLON .)
    DECIMAL         reduce using rule 15 (statement -> assignment SEMICOLON .)
    UDECIMAL        reduce using rule 15 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 15 (statement -> assignment SEMICOLON .)
    RBRACKET        reduce using rule 15 (statement -> assignment SEMICOLON .)


state 39

    (25) statement -> assignment error . NEWLINE

    NEWLINE         shift and go to state 99


state 40

    (6) statement -> compare SEMICOLON . NEWLINE
    (16) statement -> compare SEMICOLON .

    NEWLINE         shift and go to state 100
    CONST           reduce using rule 16 (statement -> compare SEMICOLON .)
    MATRIX          reduce using rule 16 (statement -> compare SEMICOLON .)
    error           reduce using rule 16 (statement -> compare SEMICOLON .)
    SHARP           reduce using rule 16 (statement -> compare SEMICOLON .)
    TESTONCE        reduce using rule 16 (statement -> compare SEMICOLON .)
    TESTREP         reduce using rule 16 (statement -> compare SEMICOLON .)
    FUNC            reduce using rule 16 (statement -> compare SEMICOLON .)
    CALL            reduce using rule 16 (statement -> compare SEMICOLON .)
    VAR             reduce using rule 16 (statement -> compare SEMICOLON .)
    SIGNED          reduce using rule 16 (statement -> compare SEMICOLON .)
    UNSIGNED        reduce using rule 16 (statement -> compare SEMICOLON .)
    CELL            reduce using rule 16 (statement -> compare SEMICOLON .)
    LBRACKET        reduce using rule 16 (statement -> compare SEMICOLON .)
    DECIMAL         reduce using rule 16 (statement -> compare SEMICOLON .)
    UDECIMAL        reduce using rule 16 (statement -> compare SEMICOLON .)
    $end            reduce using rule 16 (statement -> compare SEMICOLON .)
    RBRACKET        reduce using rule 16 (statement -> compare SEMICOLON .)


state 41

    (26) statement -> compare error . NEWLINE

    NEWLINE         shift and go to state 101


state 42

    (7) statement -> prison SEMICOLON . NEWLINE
    (17) statement -> prison SEMICOLON .

    NEWLINE         shift and go to state 102
    CONST           reduce using rule 17 (statement -> prison SEMICOLON .)
    MATRIX          reduce using rule 17 (statement -> prison SEMICOLON .)
    error           reduce using rule 17 (statement -> prison SEMICOLON .)
    SHARP           reduce using rule 17 (statement -> prison SEMICOLON .)
    TESTONCE        reduce using rule 17 (statement -> prison SEMICOLON .)
    TESTREP         reduce using rule 17 (statement -> prison SEMICOLON .)
    FUNC            reduce using rule 17 (statement -> prison SEMICOLON .)
    CALL            reduce using rule 17 (statement -> prison SEMICOLON .)
    VAR             reduce using rule 17 (statement -> prison SEMICOLON .)
    SIGNED          reduce using rule 17 (statement -> prison SEMICOLON .)
    UNSIGNED        reduce using rule 17 (statement -> prison SEMICOLON .)
    CELL            reduce using rule 17 (statement -> prison SEMICOLON .)
    LBRACKET        reduce using rule 17 (statement -> prison SEMICOLON .)
    DECIMAL         reduce using rule 17 (statement -> prison SEMICOLON .)
    UDECIMAL        reduce using rule 17 (statement -> prison SEMICOLON .)
    $end            reduce using rule 17 (statement -> prison SEMICOLON .)
    RBRACKET        reduce using rule 17 (statement -> prison SEMICOLON .)


state 43

    (27) statement -> prison error . NEWLINE

    NEWLINE         shift and go to state 103


state 44

    (8) statement -> if NEWLINE .

    CONST           reduce using rule 8 (statement -> if NEWLINE .)
    MATRIX          reduce using rule 8 (statement -> if NEWLINE .)
    error           reduce using rule 8 (statement -> if NEWLINE .)
    SHARP           reduce using rule 8 (statement -> if NEWLINE .)
    TESTONCE        reduce using rule 8 (statement -> if NEWLINE .)
    TESTREP         reduce using rule 8 (statement -> if NEWLINE .)
    FUNC            reduce using rule 8 (statement -> if NEWLINE .)
    CALL            reduce using rule 8 (statement -> if NEWLINE .)
    VAR             reduce using rule 8 (statement -> if NEWLINE .)
    SIGNED          reduce using rule 8 (statement -> if NEWLINE .)
    UNSIGNED        reduce using rule 8 (statement -> if NEWLINE .)
    CELL            reduce using rule 8 (statement -> if NEWLINE .)
    LBRACKET        reduce using rule 8 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 8 (statement -> if NEWLINE .)
    UDECIMAL        reduce using rule 8 (statement -> if NEWLINE .)
    $end            reduce using rule 8 (statement -> if NEWLINE .)
    RBRACKET        reduce using rule 8 (statement -> if NEWLINE .)


state 45

    (9) statement -> while NEWLINE .

    CONST           reduce using rule 9 (statement -> while NEWLINE .)
    MATRIX          reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    SHARP           reduce using rule 9 (statement -> while NEWLINE .)
    TESTONCE        reduce using rule 9 (statement -> while NEWLINE .)
    TESTREP         reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    VAR             reduce using rule 9 (statement -> while NEWLINE .)
    SIGNED          reduce using rule 9 (statement -> while NEWLINE .)
    UNSIGNED        reduce using rule 9 (statement -> while NEWLINE .)
    CELL            reduce using rule 9 (statement -> while NEWLINE .)
    LBRACKET        reduce using rule 9 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 9 (statement -> while NEWLINE .)
    UDECIMAL        reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    RBRACKET        reduce using rule 9 (statement -> while NEWLINE .)


state 46

    (10) statement -> operator SEMICOLON . NEWLINE
    (20) statement -> operator SEMICOLON .

    NEWLINE         shift and go to state 104
    CONST           reduce using rule 20 (statement -> operator SEMICOLON .)
    MATRIX          reduce using rule 20 (statement -> operator SEMICOLON .)
    error           reduce using rule 20 (statement -> operator SEMICOLON .)
    SHARP           reduce using rule 20 (statement -> operator SEMICOLON .)
    TESTONCE        reduce using rule 20 (statement -> operator SEMICOLON .)
    TESTREP         reduce using rule 20 (statement -> operator SEMICOLON .)
    FUNC            reduce using rule 20 (statement -> operator SEMICOLON .)
    CALL            reduce using rule 20 (statement -> operator SEMICOLON .)
    VAR             reduce using rule 20 (statement -> operator SEMICOLON .)
    SIGNED          reduce using rule 20 (statement -> operator SEMICOLON .)
    UNSIGNED        reduce using rule 20 (statement -> operator SEMICOLON .)
    CELL            reduce using rule 20 (statement -> operator SEMICOLON .)
    LBRACKET        reduce using rule 20 (statement -> operator SEMICOLON .)
    DECIMAL         reduce using rule 20 (statement -> operator SEMICOLON .)
    UDECIMAL        reduce using rule 20 (statement -> operator SEMICOLON .)
    $end            reduce using rule 20 (statement -> operator SEMICOLON .)
    RBRACKET        reduce using rule 20 (statement -> operator SEMICOLON .)


state 47

    (28) statement -> operator error . NEWLINE

    NEWLINE         shift and go to state 105


state 48

    (11) statement -> function NEWLINE .

    CONST           reduce using rule 11 (statement -> function NEWLINE .)
    MATRIX          reduce using rule 11 (statement -> function NEWLINE .)
    error           reduce using rule 11 (statement -> function NEWLINE .)
    SHARP           reduce using rule 11 (statement -> function NEWLINE .)
    TESTONCE        reduce using rule 11 (statement -> function NEWLINE .)
    TESTREP         reduce using rule 11 (statement -> function NEWLINE .)
    FUNC            reduce using rule 11 (statement -> function NEWLINE .)
    CALL            reduce using rule 11 (statement -> function NEWLINE .)
    VAR             reduce using rule 11 (statement -> function NEWLINE .)
    SIGNED          reduce using rule 11 (statement -> function NEWLINE .)
    UNSIGNED        reduce using rule 11 (statement -> function NEWLINE .)
    CELL            reduce using rule 11 (statement -> function NEWLINE .)
    LBRACKET        reduce using rule 11 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 11 (statement -> function NEWLINE .)
    UDECIMAL        reduce using rule 11 (statement -> function NEWLINE .)
    $end            reduce using rule 11 (statement -> function NEWLINE .)
    RBRACKET        reduce using rule 11 (statement -> function NEWLINE .)


state 49

    (12) statement -> function_call SEMICOLON . NEWLINE
    (22) statement -> function_call SEMICOLON .

    NEWLINE         shift and go to state 106
    CONST           reduce using rule 22 (statement -> function_call SEMICOLON .)
    MATRIX          reduce using rule 22 (statement -> function_call SEMICOLON .)
    error           reduce using rule 22 (statement -> function_call SEMICOLON .)
    SHARP           reduce using rule 22 (statement -> function_call SEMICOLON .)
    TESTONCE        reduce using rule 22 (statement -> function_call SEMICOLON .)
    TESTREP         reduce using rule 22 (statement -> function_call SEMICOLON .)
    FUNC            reduce using rule 22 (statement -> function_call SEMICOLON .)
    CALL            reduce using rule 22 (statement -> function_call SEMICOLON .)
    VAR             reduce using rule 22 (statement -> function_call SEMICOLON .)
    SIGNED          reduce using rule 22 (statement -> function_call SEMICOLON .)
    UNSIGNED        reduce using rule 22 (statement -> function_call SEMICOLON .)
    CELL            reduce using rule 22 (statement -> function_call SEMICOLON .)
    LBRACKET        reduce using rule 22 (statement -> function_call SEMICOLON .)
    DECIMAL         reduce using rule 22 (statement -> function_call SEMICOLON .)
    UDECIMAL        reduce using rule 22 (statement -> function_call SEMICOLON .)
    $end            reduce using rule 22 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 22 (statement -> function_call SEMICOLON .)


state 50

    (29) statement -> function_call error . NEWLINE

    NEWLINE         shift and go to state 107


state 51

    (13) statement -> function_return SEMICOLON . NEWLINE
    (23) statement -> function_return SEMICOLON .

    NEWLINE         shift and go to state 108
    CONST           reduce using rule 23 (statement -> function_return SEMICOLON .)
    MATRIX          reduce using rule 23 (statement -> function_return SEMICOLON .)
    error           reduce using rule 23 (statement -> function_return SEMICOLON .)
    SHARP           reduce using rule 23 (statement -> function_return SEMICOLON .)
    TESTONCE        reduce using rule 23 (statement -> function_return SEMICOLON .)
    TESTREP         reduce using rule 23 (statement -> function_return SEMICOLON .)
    FUNC            reduce using rule 23 (statement -> function_return SEMICOLON .)
    CALL            reduce using rule 23 (statement -> function_return SEMICOLON .)
    VAR             reduce using rule 23 (statement -> function_return SEMICOLON .)
    SIGNED          reduce using rule 23 (statement -> function_return SEMICOLON .)
    UNSIGNED        reduce using rule 23 (statement -> function_return SEMICOLON .)
    CELL            reduce using rule 23 (statement -> function_return SEMICOLON .)
    LBRACKET        reduce using rule 23 (statement -> function_return SEMICOLON .)
    DECIMAL         reduce using rule 23 (statement -> function_return SEMICOLON .)
    UDECIMAL        reduce using rule 23 (statement -> function_return SEMICOLON .)
    $end            reduce using rule 23 (statement -> function_return SEMICOLON .)
    RBRACKET        reduce using rule 23 (statement -> function_return SEMICOLON .)


state 52

    (30) statement -> function_return error . NEWLINE

    NEWLINE         shift and go to state 109


state 53

    (36) declaration -> error VAR .
    (37) declaration -> error VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 36 (declaration -> error VAR .)
    error           reduce using rule 36 (declaration -> error VAR .)
    ASSIGNMENT      shift and go to state 110


state 54

    (31) declaration -> type VAR .
    (32) declaration -> type VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 31 (declaration -> type VAR .)
    error           reduce using rule 31 (declaration -> type VAR .)
    ASSIGNMENT      shift and go to state 111


state 55

    (96) function_call -> VAR LBRACKET . vars RBRACKET error
    (97) function_call -> VAR LBRACKET . RBRACKET error
    (77) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (98) vars -> . VAR vars
    (99) vars -> . VAR
    (78) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    RBRACKET        shift and go to state 114
    VAR             shift and go to state 112
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    vars                           shift and go to state 113
    index                          shift and go to state 115
    expression                     shift and go to state 116
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 56

    (65) compare -> expression EQ . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 117
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 57

    (66) compare -> expression LESS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 118
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 58

    (67) compare -> expression GREATER . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 119
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 59

    (68) compare -> expression NOTEQ . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 120
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 60

    (69) math_expression -> expression PLUS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 121
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 61

    (70) math_expression -> expression MINUS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 122
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 62

    (71) math_expression -> expression STAR . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 123
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 63

    (72) math_expression -> expression DIV . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 124
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 64

    (73) math_expression -> expression PROCENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 125
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 65

    (33) declaration -> CONST type . VAR ASSIGNMENT expression

    VAR             shift and go to state 126


state 66

    (38) declaration -> CONST error . VAR ASSIGNMENT expression

    VAR             shift and go to state 127


state 67

    (34) declaration -> MATRIX type . VAR
    (35) declaration -> MATRIX type . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 128


state 68

    (39) declaration -> MATRIX error . VAR
    (40) declaration -> MATRIX error . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 129


state 69

    (51) expression -> LBRACKET expression . RBRACKET
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 130
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 70

    (52) side -> LBRACKET directions . RBRACKET

    RBRACKET        shift and go to state 131


state 71

    (53) side -> LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 132


state 72

    (46) expression -> variable .

    RBRACKET        reduce using rule 46 (expression -> variable .)
    PLUS            reduce using rule 46 (expression -> variable .)
    MINUS           reduce using rule 46 (expression -> variable .)
    STAR            reduce using rule 46 (expression -> variable .)
    DIV             reduce using rule 46 (expression -> variable .)
    PROCENT         reduce using rule 46 (expression -> variable .)
    EQ              reduce using rule 46 (expression -> variable .)
    LESS            reduce using rule 46 (expression -> variable .)
    GREATER         reduce using rule 46 (expression -> variable .)
    NOTEQ           reduce using rule 46 (expression -> variable .)
    COMMA           reduce using rule 46 (expression -> variable .)
    SEMICOLON       reduce using rule 46 (expression -> variable .)
    error           reduce using rule 46 (expression -> variable .)


state 73

    (48) expression -> compare .

    RBRACKET        reduce using rule 48 (expression -> compare .)
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)
    COMMA           reduce using rule 48 (expression -> compare .)
    SEMICOLON       reduce using rule 48 (expression -> compare .)
    error           reduce using rule 48 (expression -> compare .)


state 74

    (49) expression -> prison .

    RBRACKET        reduce using rule 49 (expression -> prison .)
    PLUS            reduce using rule 49 (expression -> prison .)
    MINUS           reduce using rule 49 (expression -> prison .)
    STAR            reduce using rule 49 (expression -> prison .)
    DIV             reduce using rule 49 (expression -> prison .)
    PROCENT         reduce using rule 49 (expression -> prison .)
    EQ              reduce using rule 49 (expression -> prison .)
    LESS            reduce using rule 49 (expression -> prison .)
    GREATER         reduce using rule 49 (expression -> prison .)
    NOTEQ           reduce using rule 49 (expression -> prison .)
    COMMA           reduce using rule 49 (expression -> prison .)
    SEMICOLON       reduce using rule 49 (expression -> prison .)
    error           reduce using rule 49 (expression -> prison .)


state 75

    (50) expression -> function_call .

    RBRACKET        reduce using rule 50 (expression -> function_call .)
    PLUS            reduce using rule 50 (expression -> function_call .)
    MINUS           reduce using rule 50 (expression -> function_call .)
    STAR            reduce using rule 50 (expression -> function_call .)
    DIV             reduce using rule 50 (expression -> function_call .)
    PROCENT         reduce using rule 50 (expression -> function_call .)
    EQ              reduce using rule 50 (expression -> function_call .)
    LESS            reduce using rule 50 (expression -> function_call .)
    GREATER         reduce using rule 50 (expression -> function_call .)
    NOTEQ           reduce using rule 50 (expression -> function_call .)
    COMMA           reduce using rule 50 (expression -> function_call .)
    SEMICOLON       reduce using rule 50 (expression -> function_call .)
    error           reduce using rule 50 (expression -> function_call .)


state 76

    (54) directions -> direction . COMMA directions
    (55) directions -> direction .

    COMMA           shift and go to state 133
    RBRACKET        reduce using rule 55 (directions -> direction .)


state 77

    (76) variable -> VAR .
    (77) variable -> VAR . LBRACKET index COMMA index RBRACKET
    (96) function_call -> VAR . LBRACKET vars RBRACKET error
    (97) function_call -> VAR . LBRACKET RBRACKET error

    RBRACKET        reduce using rule 76 (variable -> VAR .)
    PLUS            reduce using rule 76 (variable -> VAR .)
    MINUS           reduce using rule 76 (variable -> VAR .)
    STAR            reduce using rule 76 (variable -> VAR .)
    DIV             reduce using rule 76 (variable -> VAR .)
    PROCENT         reduce using rule 76 (variable -> VAR .)
    EQ              reduce using rule 76 (variable -> VAR .)
    LESS            reduce using rule 76 (variable -> VAR .)
    GREATER         reduce using rule 76 (variable -> VAR .)
    NOTEQ           reduce using rule 76 (variable -> VAR .)
    SEMICOLON       reduce using rule 76 (variable -> VAR .)
    error           reduce using rule 76 (variable -> VAR .)
    COMMA           reduce using rule 76 (variable -> VAR .)
    LBRACKET        shift and go to state 134


state 78

    (56) direction -> TOP .

    COMMA           reduce using rule 56 (direction -> TOP .)
    RBRACKET        reduce using rule 56 (direction -> TOP .)
    SEMICOLON       reduce using rule 56 (direction -> TOP .)
    error           reduce using rule 56 (direction -> TOP .)


state 79

    (57) direction -> NTOP .

    COMMA           reduce using rule 57 (direction -> NTOP .)
    RBRACKET        reduce using rule 57 (direction -> NTOP .)
    SEMICOLON       reduce using rule 57 (direction -> NTOP .)
    error           reduce using rule 57 (direction -> NTOP .)


state 80

    (58) direction -> LEFT .

    COMMA           reduce using rule 58 (direction -> LEFT .)
    RBRACKET        reduce using rule 58 (direction -> LEFT .)
    SEMICOLON       reduce using rule 58 (direction -> LEFT .)
    error           reduce using rule 58 (direction -> LEFT .)


state 81

    (59) direction -> NLEFT .

    COMMA           reduce using rule 59 (direction -> NLEFT .)
    RBRACKET        reduce using rule 59 (direction -> NLEFT .)
    SEMICOLON       reduce using rule 59 (direction -> NLEFT .)
    error           reduce using rule 59 (direction -> NLEFT .)


state 82

    (60) direction -> RIGHT .

    COMMA           reduce using rule 60 (direction -> RIGHT .)
    RBRACKET        reduce using rule 60 (direction -> RIGHT .)
    SEMICOLON       reduce using rule 60 (direction -> RIGHT .)
    error           reduce using rule 60 (direction -> RIGHT .)


state 83

    (61) direction -> NRIGHT .

    COMMA           reduce using rule 61 (direction -> NRIGHT .)
    RBRACKET        reduce using rule 61 (direction -> NRIGHT .)
    SEMICOLON       reduce using rule 61 (direction -> NRIGHT .)
    error           reduce using rule 61 (direction -> NRIGHT .)


state 84

    (62) direction -> DOWN .

    COMMA           reduce using rule 62 (direction -> DOWN .)
    RBRACKET        reduce using rule 62 (direction -> DOWN .)
    SEMICOLON       reduce using rule 62 (direction -> DOWN .)
    error           reduce using rule 62 (direction -> DOWN .)


state 85

    (63) direction -> NDOWN .

    COMMA           reduce using rule 63 (direction -> NDOWN .)
    RBRACKET        reduce using rule 63 (direction -> NDOWN .)
    SEMICOLON       reduce using rule 63 (direction -> NDOWN .)
    error           reduce using rule 63 (direction -> NDOWN .)


state 86

    (64) direction -> BOTTOM .

    COMMA           reduce using rule 64 (direction -> BOTTOM .)
    RBRACKET        reduce using rule 64 (direction -> BOTTOM .)
    SEMICOLON       reduce using rule 64 (direction -> BOTTOM .)
    error           reduce using rule 64 (direction -> BOTTOM .)


state 87

    (80) assignment -> variable ASSIGNMENT . expression
    (81) assignment -> variable ASSIGNMENT . error
    (88) operator -> variable ASSIGNMENT . robot
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (89) robot -> . direction
    (90) robot -> . XRAY
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (56) direction -> . TOP
    (57) direction -> . NTOP
    (58) direction -> . LEFT
    (59) direction -> . NLEFT
    (60) direction -> . RIGHT
    (61) direction -> . NRIGHT
    (62) direction -> . DOWN
    (63) direction -> . NDOWN
    (64) direction -> . BOTTOM

    error           shift and go to state 136
    LBRACKET        shift and go to state 20
    XRAY            shift and go to state 139
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27
    TOP             shift and go to state 78
    NTOP            shift and go to state 79
    LEFT            shift and go to state 80
    NLEFT           shift and go to state 81
    RIGHT           shift and go to state 82
    NRIGHT          shift and go to state 83
    DOWN            shift and go to state 84
    NDOWN           shift and go to state 85
    BOTTOM          shift and go to state 86

    variable                       shift and go to state 72
    expression                     shift and go to state 135
    robot                          shift and go to state 137
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75
    direction                      shift and go to state 138

state 88

    (79) prison -> SHARP variable .

    SEMICOLON       reduce using rule 79 (prison -> SHARP variable .)
    error           reduce using rule 79 (prison -> SHARP variable .)
    EQ              reduce using rule 79 (prison -> SHARP variable .)
    LESS            reduce using rule 79 (prison -> SHARP variable .)
    GREATER         reduce using rule 79 (prison -> SHARP variable .)
    NOTEQ           reduce using rule 79 (prison -> SHARP variable .)
    PLUS            reduce using rule 79 (prison -> SHARP variable .)
    MINUS           reduce using rule 79 (prison -> SHARP variable .)
    STAR            reduce using rule 79 (prison -> SHARP variable .)
    DIV             reduce using rule 79 (prison -> SHARP variable .)
    PROCENT         reduce using rule 79 (prison -> SHARP variable .)
    RBRACKET        reduce using rule 79 (prison -> SHARP variable .)
    COMMA           reduce using rule 79 (prison -> SHARP variable .)


state 89

    (76) variable -> VAR .
    (77) variable -> VAR . LBRACKET index COMMA index RBRACKET

    SEMICOLON       reduce using rule 76 (variable -> VAR .)
    error           reduce using rule 76 (variable -> VAR .)
    EQ              reduce using rule 76 (variable -> VAR .)
    LESS            reduce using rule 76 (variable -> VAR .)
    GREATER         reduce using rule 76 (variable -> VAR .)
    NOTEQ           reduce using rule 76 (variable -> VAR .)
    PLUS            reduce using rule 76 (variable -> VAR .)
    MINUS           reduce using rule 76 (variable -> VAR .)
    STAR            reduce using rule 76 (variable -> VAR .)
    DIV             reduce using rule 76 (variable -> VAR .)
    PROCENT         reduce using rule 76 (variable -> VAR .)
    RBRACKET        reduce using rule 76 (variable -> VAR .)
    COMMA           reduce using rule 76 (variable -> VAR .)
    LBRACKET        shift and go to state 140


state 90

    (82) if -> TESTONCE LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> TESTONCE LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    math_expression                shift and go to state 141
    compare                        shift and go to state 142
    expression                     shift and go to state 143
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 91

    (84) if -> TESTONCE error .

    NEWLINE         reduce using rule 84 (if -> TESTONCE error .)
    CONST           reduce using rule 84 (if -> TESTONCE error .)
    MATRIX          reduce using rule 84 (if -> TESTONCE error .)
    error           reduce using rule 84 (if -> TESTONCE error .)
    SHARP           reduce using rule 84 (if -> TESTONCE error .)
    TESTONCE        reduce using rule 84 (if -> TESTONCE error .)
    TESTREP         reduce using rule 84 (if -> TESTONCE error .)
    FUNC            reduce using rule 84 (if -> TESTONCE error .)
    CALL            reduce using rule 84 (if -> TESTONCE error .)
    VAR             reduce using rule 84 (if -> TESTONCE error .)
    SIGNED          reduce using rule 84 (if -> TESTONCE error .)
    UNSIGNED        reduce using rule 84 (if -> TESTONCE error .)
    CELL            reduce using rule 84 (if -> TESTONCE error .)
    LBRACKET        reduce using rule 84 (if -> TESTONCE error .)
    DECIMAL         reduce using rule 84 (if -> TESTONCE error .)
    UDECIMAL        reduce using rule 84 (if -> TESTONCE error .)
    $end            reduce using rule 84 (if -> TESTONCE error .)
    RBRACKET        reduce using rule 84 (if -> TESTONCE error .)


state 92

    (87) if -> TESTREP error .

    NEWLINE         reduce using rule 87 (if -> TESTREP error .)
    CONST           reduce using rule 87 (if -> TESTREP error .)
    MATRIX          reduce using rule 87 (if -> TESTREP error .)
    error           reduce using rule 87 (if -> TESTREP error .)
    SHARP           reduce using rule 87 (if -> TESTREP error .)
    TESTONCE        reduce using rule 87 (if -> TESTREP error .)
    TESTREP         reduce using rule 87 (if -> TESTREP error .)
    FUNC            reduce using rule 87 (if -> TESTREP error .)
    CALL            reduce using rule 87 (if -> TESTREP error .)
    VAR             reduce using rule 87 (if -> TESTREP error .)
    SIGNED          reduce using rule 87 (if -> TESTREP error .)
    UNSIGNED        reduce using rule 87 (if -> TESTREP error .)
    CELL            reduce using rule 87 (if -> TESTREP error .)
    LBRACKET        reduce using rule 87 (if -> TESTREP error .)
    DECIMAL         reduce using rule 87 (if -> TESTREP error .)
    UDECIMAL        reduce using rule 87 (if -> TESTREP error .)
    $end            reduce using rule 87 (if -> TESTREP error .)
    RBRACKET        reduce using rule 87 (if -> TESTREP error .)


state 93

    (85) while -> TESTREP LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> TESTREP LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    math_expression                shift and go to state 144
    compare                        shift and go to state 145
    expression                     shift and go to state 143
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 94

    (91) function -> FUNC VAR . LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> FUNC VAR . LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 146


state 95

    (94) function_call -> CALL VAR . LBRACKET vars RBRACKET
    (95) function_call -> CALL VAR . LBRACKET RBRACKET

    LBRACKET        shift and go to state 147


state 96

    (4) statement -> declaration SEMICOLON NEWLINE .

    CONST           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    error           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SHARP           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    FUNC            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CALL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    VAR             reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CELL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)


state 97

    (24) statement -> declaration error NEWLINE .

    CONST           reduce using rule 24 (statement -> declaration error NEWLINE .)
    MATRIX          reduce using rule 24 (statement -> declaration error NEWLINE .)
    error           reduce using rule 24 (statement -> declaration error NEWLINE .)
    SHARP           reduce using rule 24 (statement -> declaration error NEWLINE .)
    TESTONCE        reduce using rule 24 (statement -> declaration error NEWLINE .)
    TESTREP         reduce using rule 24 (statement -> declaration error NEWLINE .)
    FUNC            reduce using rule 24 (statement -> declaration error NEWLINE .)
    CALL            reduce using rule 24 (statement -> declaration error NEWLINE .)
    VAR             reduce using rule 24 (statement -> declaration error NEWLINE .)
    SIGNED          reduce using rule 24 (statement -> declaration error NEWLINE .)
    UNSIGNED        reduce using rule 24 (statement -> declaration error NEWLINE .)
    CELL            reduce using rule 24 (statement -> declaration error NEWLINE .)
    LBRACKET        reduce using rule 24 (statement -> declaration error NEWLINE .)
    DECIMAL         reduce using rule 24 (statement -> declaration error NEWLINE .)
    UDECIMAL        reduce using rule 24 (statement -> declaration error NEWLINE .)
    $end            reduce using rule 24 (statement -> declaration error NEWLINE .)
    RBRACKET        reduce using rule 24 (statement -> declaration error NEWLINE .)


state 98

    (5) statement -> assignment SEMICOLON NEWLINE .

    CONST           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    error           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SHARP           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    FUNC            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CALL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    VAR             reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CELL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)


state 99

    (25) statement -> assignment error NEWLINE .

    CONST           reduce using rule 25 (statement -> assignment error NEWLINE .)
    MATRIX          reduce using rule 25 (statement -> assignment error NEWLINE .)
    error           reduce using rule 25 (statement -> assignment error NEWLINE .)
    SHARP           reduce using rule 25 (statement -> assignment error NEWLINE .)
    TESTONCE        reduce using rule 25 (statement -> assignment error NEWLINE .)
    TESTREP         reduce using rule 25 (statement -> assignment error NEWLINE .)
    FUNC            reduce using rule 25 (statement -> assignment error NEWLINE .)
    CALL            reduce using rule 25 (statement -> assignment error NEWLINE .)
    VAR             reduce using rule 25 (statement -> assignment error NEWLINE .)
    SIGNED          reduce using rule 25 (statement -> assignment error NEWLINE .)
    UNSIGNED        reduce using rule 25 (statement -> assignment error NEWLINE .)
    CELL            reduce using rule 25 (statement -> assignment error NEWLINE .)
    LBRACKET        reduce using rule 25 (statement -> assignment error NEWLINE .)
    DECIMAL         reduce using rule 25 (statement -> assignment error NEWLINE .)
    UDECIMAL        reduce using rule 25 (statement -> assignment error NEWLINE .)
    $end            reduce using rule 25 (statement -> assignment error NEWLINE .)
    RBRACKET        reduce using rule 25 (statement -> assignment error NEWLINE .)


state 100

    (6) statement -> compare SEMICOLON NEWLINE .

    CONST           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    error           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SHARP           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    FUNC            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CALL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    VAR             reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CELL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    $end            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)


state 101

    (26) statement -> compare error NEWLINE .

    CONST           reduce using rule 26 (statement -> compare error NEWLINE .)
    MATRIX          reduce using rule 26 (statement -> compare error NEWLINE .)
    error           reduce using rule 26 (statement -> compare error NEWLINE .)
    SHARP           reduce using rule 26 (statement -> compare error NEWLINE .)
    TESTONCE        reduce using rule 26 (statement -> compare error NEWLINE .)
    TESTREP         reduce using rule 26 (statement -> compare error NEWLINE .)
    FUNC            reduce using rule 26 (statement -> compare error NEWLINE .)
    CALL            reduce using rule 26 (statement -> compare error NEWLINE .)
    VAR             reduce using rule 26 (statement -> compare error NEWLINE .)
    SIGNED          reduce using rule 26 (statement -> compare error NEWLINE .)
    UNSIGNED        reduce using rule 26 (statement -> compare error NEWLINE .)
    CELL            reduce using rule 26 (statement -> compare error NEWLINE .)
    LBRACKET        reduce using rule 26 (statement -> compare error NEWLINE .)
    DECIMAL         reduce using rule 26 (statement -> compare error NEWLINE .)
    UDECIMAL        reduce using rule 26 (statement -> compare error NEWLINE .)
    $end            reduce using rule 26 (statement -> compare error NEWLINE .)
    RBRACKET        reduce using rule 26 (statement -> compare error NEWLINE .)


state 102

    (7) statement -> prison SEMICOLON NEWLINE .

    CONST           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    error           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SHARP           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    FUNC            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CALL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    VAR             reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CELL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    $end            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)


state 103

    (27) statement -> prison error NEWLINE .

    CONST           reduce using rule 27 (statement -> prison error NEWLINE .)
    MATRIX          reduce using rule 27 (statement -> prison error NEWLINE .)
    error           reduce using rule 27 (statement -> prison error NEWLINE .)
    SHARP           reduce using rule 27 (statement -> prison error NEWLINE .)
    TESTONCE        reduce using rule 27 (statement -> prison error NEWLINE .)
    TESTREP         reduce using rule 27 (statement -> prison error NEWLINE .)
    FUNC            reduce using rule 27 (statement -> prison error NEWLINE .)
    CALL            reduce using rule 27 (statement -> prison error NEWLINE .)
    VAR             reduce using rule 27 (statement -> prison error NEWLINE .)
    SIGNED          reduce using rule 27 (statement -> prison error NEWLINE .)
    UNSIGNED        reduce using rule 27 (statement -> prison error NEWLINE .)
    CELL            reduce using rule 27 (statement -> prison error NEWLINE .)
    LBRACKET        reduce using rule 27 (statement -> prison error NEWLINE .)
    DECIMAL         reduce using rule 27 (statement -> prison error NEWLINE .)
    UDECIMAL        reduce using rule 27 (statement -> prison error NEWLINE .)
    $end            reduce using rule 27 (statement -> prison error NEWLINE .)
    RBRACKET        reduce using rule 27 (statement -> prison error NEWLINE .)


state 104

    (10) statement -> operator SEMICOLON NEWLINE .

    CONST           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    error           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SHARP           reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    FUNC            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CALL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    VAR             reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    CELL            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    $end            reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 10 (statement -> operator SEMICOLON NEWLINE .)


state 105

    (28) statement -> operator error NEWLINE .

    CONST           reduce using rule 28 (statement -> operator error NEWLINE .)
    MATRIX          reduce using rule 28 (statement -> operator error NEWLINE .)
    error           reduce using rule 28 (statement -> operator error NEWLINE .)
    SHARP           reduce using rule 28 (statement -> operator error NEWLINE .)
    TESTONCE        reduce using rule 28 (statement -> operator error NEWLINE .)
    TESTREP         reduce using rule 28 (statement -> operator error NEWLINE .)
    FUNC            reduce using rule 28 (statement -> operator error NEWLINE .)
    CALL            reduce using rule 28 (statement -> operator error NEWLINE .)
    VAR             reduce using rule 28 (statement -> operator error NEWLINE .)
    SIGNED          reduce using rule 28 (statement -> operator error NEWLINE .)
    UNSIGNED        reduce using rule 28 (statement -> operator error NEWLINE .)
    CELL            reduce using rule 28 (statement -> operator error NEWLINE .)
    LBRACKET        reduce using rule 28 (statement -> operator error NEWLINE .)
    DECIMAL         reduce using rule 28 (statement -> operator error NEWLINE .)
    UDECIMAL        reduce using rule 28 (statement -> operator error NEWLINE .)
    $end            reduce using rule 28 (statement -> operator error NEWLINE .)
    RBRACKET        reduce using rule 28 (statement -> operator error NEWLINE .)


state 106

    (12) statement -> function_call SEMICOLON NEWLINE .

    CONST           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    error           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SHARP           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    FUNC            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CALL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    VAR             reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CELL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    $end            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)


state 107

    (29) statement -> function_call error NEWLINE .

    CONST           reduce using rule 29 (statement -> function_call error NEWLINE .)
    MATRIX          reduce using rule 29 (statement -> function_call error NEWLINE .)
    error           reduce using rule 29 (statement -> function_call error NEWLINE .)
    SHARP           reduce using rule 29 (statement -> function_call error NEWLINE .)
    TESTONCE        reduce using rule 29 (statement -> function_call error NEWLINE .)
    TESTREP         reduce using rule 29 (statement -> function_call error NEWLINE .)
    FUNC            reduce using rule 29 (statement -> function_call error NEWLINE .)
    CALL            reduce using rule 29 (statement -> function_call error NEWLINE .)
    VAR             reduce using rule 29 (statement -> function_call error NEWLINE .)
    SIGNED          reduce using rule 29 (statement -> function_call error NEWLINE .)
    UNSIGNED        reduce using rule 29 (statement -> function_call error NEWLINE .)
    CELL            reduce using rule 29 (statement -> function_call error NEWLINE .)
    LBRACKET        reduce using rule 29 (statement -> function_call error NEWLINE .)
    DECIMAL         reduce using rule 29 (statement -> function_call error NEWLINE .)
    UDECIMAL        reduce using rule 29 (statement -> function_call error NEWLINE .)
    $end            reduce using rule 29 (statement -> function_call error NEWLINE .)
    RBRACKET        reduce using rule 29 (statement -> function_call error NEWLINE .)


state 108

    (13) statement -> function_return SEMICOLON NEWLINE .

    CONST           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    error           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SHARP           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    FUNC            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CALL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    VAR             reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CELL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    $end            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)


state 109

    (30) statement -> function_return error NEWLINE .

    CONST           reduce using rule 30 (statement -> function_return error NEWLINE .)
    MATRIX          reduce using rule 30 (statement -> function_return error NEWLINE .)
    error           reduce using rule 30 (statement -> function_return error NEWLINE .)
    SHARP           reduce using rule 30 (statement -> function_return error NEWLINE .)
    TESTONCE        reduce using rule 30 (statement -> function_return error NEWLINE .)
    TESTREP         reduce using rule 30 (statement -> function_return error NEWLINE .)
    FUNC            reduce using rule 30 (statement -> function_return error NEWLINE .)
    CALL            reduce using rule 30 (statement -> function_return error NEWLINE .)
    VAR             reduce using rule 30 (statement -> function_return error NEWLINE .)
    SIGNED          reduce using rule 30 (statement -> function_return error NEWLINE .)
    UNSIGNED        reduce using rule 30 (statement -> function_return error NEWLINE .)
    CELL            reduce using rule 30 (statement -> function_return error NEWLINE .)
    LBRACKET        reduce using rule 30 (statement -> function_return error NEWLINE .)
    DECIMAL         reduce using rule 30 (statement -> function_return error NEWLINE .)
    UDECIMAL        reduce using rule 30 (statement -> function_return error NEWLINE .)
    $end            reduce using rule 30 (statement -> function_return error NEWLINE .)
    RBRACKET        reduce using rule 30 (statement -> function_return error NEWLINE .)


state 110

    (37) declaration -> error VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 148
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 111

    (32) declaration -> type VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 149
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 112

    (98) vars -> VAR . vars
    (99) vars -> VAR .
    (76) variable -> VAR .
    (77) variable -> VAR . LBRACKET index COMMA index RBRACKET
    (96) function_call -> VAR . LBRACKET vars RBRACKET error
    (97) function_call -> VAR . LBRACKET RBRACKET error
    (98) vars -> . VAR vars
    (99) vars -> . VAR

    RBRACKET        reduce using rule 99 (vars -> VAR .)
    PLUS            reduce using rule 76 (variable -> VAR .)
    MINUS           reduce using rule 76 (variable -> VAR .)
    STAR            reduce using rule 76 (variable -> VAR .)
    DIV             reduce using rule 76 (variable -> VAR .)
    PROCENT         reduce using rule 76 (variable -> VAR .)
    EQ              reduce using rule 76 (variable -> VAR .)
    LESS            reduce using rule 76 (variable -> VAR .)
    GREATER         reduce using rule 76 (variable -> VAR .)
    NOTEQ           reduce using rule 76 (variable -> VAR .)
    COMMA           reduce using rule 76 (variable -> VAR .)
    LBRACKET        shift and go to state 134
    VAR             shift and go to state 150

    vars                           shift and go to state 151

state 113

    (96) function_call -> VAR LBRACKET vars . RBRACKET error

    RBRACKET        shift and go to state 152


state 114

    (97) function_call -> VAR LBRACKET RBRACKET . error

    error           shift and go to state 153


state 115

    (77) variable -> VAR LBRACKET index . COMMA index RBRACKET

    COMMA           shift and go to state 154


state 116

    (78) index -> expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    COMMA           reduce using rule 78 (index -> expression .)
    RBRACKET        reduce using rule 78 (index -> expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 117

    (65) compare -> expression EQ expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 65 (compare -> expression EQ expression .)
    error           reduce using rule 65 (compare -> expression EQ expression .)
    RBRACKET        reduce using rule 65 (compare -> expression EQ expression .)
    COMMA           reduce using rule 65 (compare -> expression EQ expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! LESS            [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! GREATER         [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! NOTEQ           [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! STAR            [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 65 (compare -> expression EQ expression .) ]
  ! PROCENT         [ reduce using rule 65 (compare -> expression EQ expression .) ]


state 118

    (66) compare -> expression LESS expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 66 (compare -> expression LESS expression .)
    error           reduce using rule 66 (compare -> expression LESS expression .)
    RBRACKET        reduce using rule 66 (compare -> expression LESS expression .)
    COMMA           reduce using rule 66 (compare -> expression LESS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! NOTEQ           [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! STAR            [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! DIV             [ reduce using rule 66 (compare -> expression LESS expression .) ]
  ! PROCENT         [ reduce using rule 66 (compare -> expression LESS expression .) ]


state 119

    (67) compare -> expression GREATER expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 67 (compare -> expression GREATER expression .)
    error           reduce using rule 67 (compare -> expression GREATER expression .)
    RBRACKET        reduce using rule 67 (compare -> expression GREATER expression .)
    COMMA           reduce using rule 67 (compare -> expression GREATER expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! NOTEQ           [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! STAR            [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! DIV             [ reduce using rule 67 (compare -> expression GREATER expression .) ]
  ! PROCENT         [ reduce using rule 67 (compare -> expression GREATER expression .) ]


state 120

    (68) compare -> expression NOTEQ expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    SEMICOLON       reduce using rule 68 (compare -> expression NOTEQ expression .)
    error           reduce using rule 68 (compare -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 68 (compare -> expression NOTEQ expression .)
    COMMA           reduce using rule 68 (compare -> expression NOTEQ expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! LESS            [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! GREATER         [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! NOTEQ           [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! PLUS            [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! MINUS           [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! STAR            [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! DIV             [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]
  ! PROCENT         [ reduce using rule 68 (compare -> expression NOTEQ expression .) ]


state 121

    (69) math_expression -> expression PLUS expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 69 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 69 (math_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 69 (math_expression -> expression PLUS expression .)
    error           reduce using rule 69 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! STAR            [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]
  ! PROCENT         [ reduce using rule 69 (math_expression -> expression PLUS expression .) ]


state 122

    (70) math_expression -> expression MINUS expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 70 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 70 (math_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 70 (math_expression -> expression MINUS expression .)
    error           reduce using rule 70 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! STAR            [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]
  ! PROCENT         [ reduce using rule 70 (math_expression -> expression MINUS expression .) ]


state 123

    (71) math_expression -> expression STAR expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 71 (math_expression -> expression STAR expression .)
    COMMA           reduce using rule 71 (math_expression -> expression STAR expression .)
    SEMICOLON       reduce using rule 71 (math_expression -> expression STAR expression .)
    error           reduce using rule 71 (math_expression -> expression STAR expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! LESS            [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! GREATER         [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! NOTEQ           [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! PLUS            [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! MINUS           [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! STAR            [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! DIV             [ reduce using rule 71 (math_expression -> expression STAR expression .) ]
  ! PROCENT         [ reduce using rule 71 (math_expression -> expression STAR expression .) ]


state 124

    (72) math_expression -> expression DIV expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 72 (math_expression -> expression DIV expression .)
    COMMA           reduce using rule 72 (math_expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 72 (math_expression -> expression DIV expression .)
    error           reduce using rule 72 (math_expression -> expression DIV expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! LESS            [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! GREATER         [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! NOTEQ           [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! STAR            [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 72 (math_expression -> expression DIV expression .) ]
  ! PROCENT         [ reduce using rule 72 (math_expression -> expression DIV expression .) ]


state 125

    (73) math_expression -> expression PROCENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 73 (math_expression -> expression PROCENT expression .)
    COMMA           reduce using rule 73 (math_expression -> expression PROCENT expression .)
    SEMICOLON       reduce using rule 73 (math_expression -> expression PROCENT expression .)
    error           reduce using rule 73 (math_expression -> expression PROCENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59

  ! EQ              [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! LESS            [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! GREATER         [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! NOTEQ           [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! PLUS            [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! MINUS           [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! STAR            [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! DIV             [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]
  ! PROCENT         [ reduce using rule 73 (math_expression -> expression PROCENT expression .) ]


state 126

    (33) declaration -> CONST type VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 155


state 127

    (38) declaration -> CONST error VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 156


state 128

    (34) declaration -> MATRIX type VAR .
    (35) declaration -> MATRIX type VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 34 (declaration -> MATRIX type VAR .)
    error           reduce using rule 34 (declaration -> MATRIX type VAR .)
    LBRACKET        shift and go to state 157


state 129

    (39) declaration -> MATRIX error VAR .
    (40) declaration -> MATRIX error VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 39 (declaration -> MATRIX error VAR .)
    error           reduce using rule 39 (declaration -> MATRIX error VAR .)
    LBRACKET        shift and go to state 158


state 130

    (51) expression -> LBRACKET expression RBRACKET .

    EQ              reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    STAR            reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    DIV             reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    PROCENT         reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)
    error           reduce using rule 51 (expression -> LBRACKET expression RBRACKET .)


state 131

    (52) side -> LBRACKET directions RBRACKET .

    EQ              reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    LESS            reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    GREATER         reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    NOTEQ           reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    PLUS            reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    MINUS           reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    STAR            reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    DIV             reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    PROCENT         reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    RBRACKET        reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    COMMA           reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    SEMICOLON       reduce using rule 52 (side -> LBRACKET directions RBRACKET .)
    error           reduce using rule 52 (side -> LBRACKET directions RBRACKET .)


state 132

    (53) side -> LBRACKET error RBRACKET .

    EQ              reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    LESS            reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    GREATER         reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    NOTEQ           reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    PLUS            reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    MINUS           reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    STAR            reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    DIV             reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    PROCENT         reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    COMMA           reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    SEMICOLON       reduce using rule 53 (side -> LBRACKET error RBRACKET .)
    error           reduce using rule 53 (side -> LBRACKET error RBRACKET .)


state 133

    (54) directions -> direction COMMA . directions
    (54) directions -> . direction COMMA directions
    (55) directions -> . direction
    (56) direction -> . TOP
    (57) direction -> . NTOP
    (58) direction -> . LEFT
    (59) direction -> . NLEFT
    (60) direction -> . RIGHT
    (61) direction -> . NRIGHT
    (62) direction -> . DOWN
    (63) direction -> . NDOWN
    (64) direction -> . BOTTOM

    TOP             shift and go to state 78
    NTOP            shift and go to state 79
    LEFT            shift and go to state 80
    NLEFT           shift and go to state 81
    RIGHT           shift and go to state 82
    NRIGHT          shift and go to state 83
    DOWN            shift and go to state 84
    NDOWN           shift and go to state 85
    BOTTOM          shift and go to state 86

    direction                      shift and go to state 76
    directions                     shift and go to state 159

state 134

    (77) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (96) function_call -> VAR LBRACKET . vars RBRACKET error
    (97) function_call -> VAR LBRACKET . RBRACKET error
    (78) index -> . expression
    (98) vars -> . VAR vars
    (99) vars -> . VAR
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    RBRACKET        shift and go to state 114
    VAR             shift and go to state 112
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    index                          shift and go to state 115
    vars                           shift and go to state 113
    expression                     shift and go to state 116
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 135

    (80) assignment -> variable ASSIGNMENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 80 (assignment -> variable ASSIGNMENT expression .)
    error           reduce using rule 80 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 136

    (81) assignment -> variable ASSIGNMENT error .

    SEMICOLON       reduce using rule 81 (assignment -> variable ASSIGNMENT error .)
    error           reduce using rule 81 (assignment -> variable ASSIGNMENT error .)


state 137

    (88) operator -> variable ASSIGNMENT robot .

    SEMICOLON       reduce using rule 88 (operator -> variable ASSIGNMENT robot .)
    error           reduce using rule 88 (operator -> variable ASSIGNMENT robot .)


state 138

    (89) robot -> direction .

    SEMICOLON       reduce using rule 89 (robot -> direction .)
    error           reduce using rule 89 (robot -> direction .)


state 139

    (90) robot -> XRAY .

    SEMICOLON       reduce using rule 90 (robot -> XRAY .)
    error           reduce using rule 90 (robot -> XRAY .)


state 140

    (77) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (78) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    index                          shift and go to state 115
    expression                     shift and go to state 116
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 141

    (82) if -> TESTONCE LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (44) expression -> math_expression .

    RBRACKET        shift and go to state 160
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)


state 142

    (83) if -> TESTONCE LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (48) expression -> compare .

    RBRACKET        shift and go to state 161
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)


state 143

    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 144

    (85) while -> TESTREP LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (44) expression -> math_expression .

    RBRACKET        shift and go to state 162
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)


state 145

    (86) while -> TESTREP LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (48) expression -> compare .

    RBRACKET        shift and go to state 163
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)


state 146

    (91) function -> FUNC VAR LBRACKET . parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> FUNC VAR LBRACKET . RBRACKET LBRACKET NEWLINE state RBRACKET
    (100) parameters -> . type VAR COMMA parameters
    (101) parameters -> . type VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    RBRACKET        shift and go to state 165
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    parameters                     shift and go to state 164
    type                           shift and go to state 166

state 147

    (94) function_call -> CALL VAR LBRACKET . vars RBRACKET
    (95) function_call -> CALL VAR LBRACKET . RBRACKET
    (98) vars -> . VAR vars
    (99) vars -> . VAR

    RBRACKET        shift and go to state 168
    VAR             shift and go to state 150

    vars                           shift and go to state 167

state 148

    (37) declaration -> error VAR ASSIGNMENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 37 (declaration -> error VAR ASSIGNMENT expression .)
    error           reduce using rule 37 (declaration -> error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 149

    (32) declaration -> type VAR ASSIGNMENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 32 (declaration -> type VAR ASSIGNMENT expression .)
    error           reduce using rule 32 (declaration -> type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 150

    (98) vars -> VAR . vars
    (99) vars -> VAR .
    (98) vars -> . VAR vars
    (99) vars -> . VAR

    RBRACKET        reduce using rule 99 (vars -> VAR .)
    VAR             shift and go to state 150

    vars                           shift and go to state 151

state 151

    (98) vars -> VAR vars .

    RBRACKET        reduce using rule 98 (vars -> VAR vars .)


state 152

    (96) function_call -> VAR LBRACKET vars RBRACKET . error

    error           shift and go to state 169


state 153

    (97) function_call -> VAR LBRACKET RBRACKET error .

    SEMICOLON       reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    error           reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    EQ              reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    LESS            reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    GREATER         reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    NOTEQ           reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    PLUS            reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    MINUS           reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    STAR            reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    DIV             reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    PROCENT         reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    RBRACKET        reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)
    COMMA           reduce using rule 97 (function_call -> VAR LBRACKET RBRACKET error .)


state 154

    (77) variable -> VAR LBRACKET index COMMA . index RBRACKET
    (78) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    index                          shift and go to state 170
    expression                     shift and go to state 116
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 155

    (33) declaration -> CONST type VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 171
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 156

    (38) declaration -> CONST error VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 172
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 157

    (35) declaration -> MATRIX type VAR LBRACKET . expression COMMA expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 173
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 158

    (40) declaration -> MATRIX error VAR LBRACKET . expression COMMA expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 174
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 159

    (54) directions -> direction COMMA directions .

    RBRACKET        reduce using rule 54 (directions -> direction COMMA directions .)


state 160

    (82) if -> TESTONCE LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 175


state 161

    (83) if -> TESTONCE LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 176


state 162

    (85) while -> TESTREP LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 177


state 163

    (86) while -> TESTREP LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 178


state 164

    (91) function -> FUNC VAR LBRACKET parameters . RBRACKET LBRACKET NEWLINE state RBRACKET

    RBRACKET        shift and go to state 179


state 165

    (92) function -> FUNC VAR LBRACKET RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 180


state 166

    (100) parameters -> type . VAR COMMA parameters
    (101) parameters -> type . VAR

    VAR             shift and go to state 181


state 167

    (94) function_call -> CALL VAR LBRACKET vars . RBRACKET

    RBRACKET        shift and go to state 182


state 168

    (95) function_call -> CALL VAR LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    error           reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    EQ              reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    LESS            reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    GREATER         reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    NOTEQ           reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PLUS            reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    MINUS           reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    STAR            reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    DIV             reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PROCENT         reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)
    COMMA           reduce using rule 95 (function_call -> CALL VAR LBRACKET RBRACKET .)


state 169

    (96) function_call -> VAR LBRACKET vars RBRACKET error .

    SEMICOLON       reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    error           reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    EQ              reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    LESS            reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    GREATER         reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    NOTEQ           reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    PLUS            reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    MINUS           reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    STAR            reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    DIV             reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    PROCENT         reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    RBRACKET        reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)
    COMMA           reduce using rule 96 (function_call -> VAR LBRACKET vars RBRACKET error .)


state 170

    (77) variable -> VAR LBRACKET index COMMA index . RBRACKET

    RBRACKET        shift and go to state 183


state 171

    (33) declaration -> CONST type VAR ASSIGNMENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 33 (declaration -> CONST type VAR ASSIGNMENT expression .)
    error           reduce using rule 33 (declaration -> CONST type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 172

    (38) declaration -> CONST error VAR ASSIGNMENT expression .
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 38 (declaration -> CONST error VAR ASSIGNMENT expression .)
    error           reduce using rule 38 (declaration -> CONST error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 173

    (35) declaration -> MATRIX type VAR LBRACKET expression . COMMA expression RBRACKET
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 184
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 174

    (40) declaration -> MATRIX error VAR LBRACKET expression . COMMA expression RBRACKET
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 185
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 175

    (82) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 186


state 176

    (83) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 187


state 177

    (85) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 188


state 178

    (86) while -> TESTREP LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 189


state 179

    (91) function -> FUNC VAR LBRACKET parameters RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 190


state 180

    (92) function -> FUNC VAR LBRACKET RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 191


state 181

    (100) parameters -> type VAR . COMMA parameters
    (101) parameters -> type VAR .

    COMMA           shift and go to state 192
    RBRACKET        reduce using rule 101 (parameters -> type VAR .)


state 182

    (94) function_call -> CALL VAR LBRACKET vars RBRACKET .

    SEMICOLON       reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    error           reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    EQ              reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    LESS            reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    GREATER         reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    NOTEQ           reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PLUS            reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    MINUS           reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    STAR            reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    DIV             reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PROCENT         reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    RBRACKET        reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    COMMA           reduce using rule 94 (function_call -> CALL VAR LBRACKET vars RBRACKET .)


state 183

    (77) variable -> VAR LBRACKET index COMMA index RBRACKET .

    ASSIGNMENT      reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    EQ              reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    LESS            reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    GREATER         reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    NOTEQ           reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PLUS            reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    MINUS           reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    STAR            reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    DIV             reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PROCENT         reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    RBRACKET        reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    SEMICOLON       reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    error           reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    COMMA           reduce using rule 77 (variable -> VAR LBRACKET index COMMA index RBRACKET .)


state 184

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA . expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 193
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 185

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA . expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34
    VAR             shift and go to state 77
    SHARP           shift and go to state 22
    CALL            shift and go to state 27

    expression                     shift and go to state 194
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    variable                       shift and go to state 72
    side                           shift and go to state 32
    compare                        shift and go to state 73
    prison                         shift and go to state 74
    function_call                  shift and go to state 75

state 186

    (82) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    math_expression                shift and go to state 24
    state                          shift and go to state 195
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 187

    (83) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    compare                        shift and go to state 6
    state                          shift and go to state 196
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 188

    (85) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    math_expression                shift and go to state 24
    state                          shift and go to state 197
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 189

    (86) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    compare                        shift and go to state 6
    state                          shift and go to state 198
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 190

    (91) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 199


state 191

    (92) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    state                          shift and go to state 200
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 192

    (100) parameters -> type VAR COMMA . parameters
    (100) parameters -> . type VAR COMMA parameters
    (101) parameters -> . type VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30

    type                           shift and go to state 166
    parameters                     shift and go to state 201

state 193

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA expression . RBRACKET
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 202
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 194

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA expression . RBRACKET
    (69) math_expression -> expression . PLUS expression
    (70) math_expression -> expression . MINUS expression
    (71) math_expression -> expression . STAR expression
    (72) math_expression -> expression . DIV expression
    (73) math_expression -> expression . PROCENT expression
    (65) compare -> expression . EQ expression
    (66) compare -> expression . LESS expression
    (67) compare -> expression . GREATER expression
    (68) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 203
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    STAR            shift and go to state 62
    DIV             shift and go to state 63
    PROCENT         shift and go to state 64
    EQ              shift and go to state 56
    LESS            shift and go to state 57
    GREATER         shift and go to state 58
    NOTEQ           shift and go to state 59


state 195

    (82) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 204
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    math_expression                shift and go to state 24
    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 196

    (83) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 205
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    compare                        shift and go to state 6
    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 197

    (85) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 206
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    math_expression                shift and go to state 24
    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    const                          shift and go to state 31
    side                           shift and go to state 32

state 198

    (86) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 207
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    compare                        shift and go to state 6
    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 199

    (91) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    state                          shift and go to state 208
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 200

    (92) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 209
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 201

    (100) parameters -> type VAR COMMA parameters .

    RBRACKET        reduce using rule 100 (parameters -> type VAR COMMA parameters .)


state 202

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 35 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 35 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)


state 203

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 40 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 40 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)


state 204

    (82) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 82 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 205

    (83) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 83 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 206

    (85) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 85 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 207

    (86) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 86 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 208

    (91) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . operator SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . operator SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . operator error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (80) assignment -> . variable ASSIGNMENT expression
    (81) assignment -> . variable ASSIGNMENT error
    (65) compare -> . expression EQ expression
    (66) compare -> . expression LESS expression
    (67) compare -> . expression GREATER expression
    (68) compare -> . expression NOTEQ expression
    (79) prison -> . SHARP variable
    (82) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (83) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (84) if -> . TESTONCE error
    (87) if -> . TESTREP error
    (85) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) operator -> . variable ASSIGNMENT robot
    (91) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (92) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (94) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (95) function_call -> . CALL VAR LBRACKET RBRACKET
    (96) function_call -> . VAR LBRACKET vars RBRACKET error
    (97) function_call -> . VAR LBRACKET RBRACKET error
    (93) function_return -> . VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (76) variable -> . VAR
    (77) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . prison
    (50) expression -> . function_call
    (51) expression -> . LBRACKET expression RBRACKET
    (69) math_expression -> . expression PLUS expression
    (70) math_expression -> . expression MINUS expression
    (71) math_expression -> . expression STAR expression
    (72) math_expression -> . expression DIV expression
    (73) math_expression -> . expression PROCENT expression
    (74) const -> . DECIMAL
    (75) const -> . UDECIMAL
    (52) side -> . LBRACKET directions RBRACKET
    (53) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 210
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    FUNC            shift and go to state 26
    CALL            shift and go to state 27
    VAR             shift and go to state 16
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    CELL            shift and go to state 30
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 33
    UDECIMAL        shift and go to state 34

    statement                      shift and go to state 35
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    operator                       shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    const                          shift and go to state 31
    side                           shift and go to state 32

state 209

    (92) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 92 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 210

    (91) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 91 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for STAR in state 117 resolved as shift
WARNING: shift/reduce conflict for DIV in state 117 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for STAR in state 118 resolved as shift
WARNING: shift/reduce conflict for DIV in state 118 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for STAR in state 119 resolved as shift
WARNING: shift/reduce conflict for DIV in state 119 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 119 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for STAR in state 120 resolved as shift
WARNING: shift/reduce conflict for DIV in state 120 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LESS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 120 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for STAR in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV in state 121 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LESS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 121 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for STAR in state 122 resolved as shift
WARNING: shift/reduce conflict for DIV in state 122 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 122 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for STAR in state 123 resolved as shift
WARNING: shift/reduce conflict for DIV in state 123 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 123 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 123 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for STAR in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 124 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for STAR in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 125 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 125 resolved as shift
