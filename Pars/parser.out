Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> state
Rule 2     state -> state statement
Rule 3     state -> statement
Rule 4     statement -> declaration SEMICOLON NEWLINE
Rule 5     statement -> assignment SEMICOLON NEWLINE
Rule 6     statement -> compare SEMICOLON NEWLINE
Rule 7     statement -> prison SEMICOLON NEWLINE
Rule 8     statement -> if NEWLINE
Rule 9     statement -> while NEWLINE
Rule 10    statement -> robot SEMICOLON NEWLINE
Rule 11    statement -> function NEWLINE
Rule 12    statement -> function_call SEMICOLON NEWLINE
Rule 13    statement -> function_return SEMICOLON NEWLINE
Rule 14    statement -> declaration SEMICOLON
Rule 15    statement -> assignment SEMICOLON
Rule 16    statement -> compare SEMICOLON
Rule 17    statement -> prison SEMICOLON
Rule 18    statement -> if
Rule 19    statement -> while
Rule 20    statement -> robot SEMICOLON
Rule 21    statement -> function
Rule 22    statement -> function_call SEMICOLON
Rule 23    statement -> function_return SEMICOLON
Rule 24    statement -> declaration error NEWLINE
Rule 25    statement -> assignment error NEWLINE
Rule 26    statement -> compare error NEWLINE
Rule 27    statement -> prison error NEWLINE
Rule 28    statement -> robot error NEWLINE
Rule 29    statement -> function_call error NEWLINE
Rule 30    statement -> function_return error NEWLINE
Rule 31    declaration -> type VAR
Rule 32    declaration -> type VAR ASSIGNMENT expression
Rule 33    declaration -> CONST type VAR ASSIGNMENT expression
Rule 34    declaration -> MATRIX type VAR
Rule 35    declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
Rule 36    declaration -> error VAR
Rule 37    declaration -> error VAR ASSIGNMENT expression
Rule 38    declaration -> CONST error VAR ASSIGNMENT expression
Rule 39    declaration -> MATRIX error VAR
Rule 40    declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
Rule 41    type -> SIGNED
Rule 42    type -> UNSIGNED
Rule 43    type -> CELL
Rule 44    expression -> math_expression
Rule 45    expression -> const
Rule 46    expression -> variable
Rule 47    expression -> side
Rule 48    expression -> compare
Rule 49    expression -> robot
Rule 50    expression -> prison
Rule 51    expression -> function_call
Rule 52    expression -> LBRACKET expression RBRACKET
Rule 53    side -> LBRACKET directions RBRACKET
Rule 54    side -> LBRACKET error RBRACKET
Rule 55    directions -> direction COMMA directions
Rule 56    directions -> direction
Rule 57    direction -> TOP
Rule 58    direction -> NTOP
Rule 59    direction -> LEFT
Rule 60    direction -> NLEFT
Rule 61    direction -> RIGHT
Rule 62    direction -> NRIGHT
Rule 63    direction -> DOWN
Rule 64    direction -> NDOWN
Rule 65    direction -> BOTTOM
Rule 66    compare -> expression EQ expression
Rule 67    compare -> expression LESS expression
Rule 68    compare -> expression GREATER expression
Rule 69    compare -> expression NOTEQ expression
Rule 70    math_expression -> expression PLUS expression
Rule 71    math_expression -> expression MINUS expression
Rule 72    math_expression -> expression STAR expression
Rule 73    math_expression -> expression DIV expression
Rule 74    math_expression -> expression PROCENT expression
Rule 75    const -> DECIMAL
Rule 76    const -> UDECIMAL
Rule 77    const -> MINUS DECIMAL
Rule 78    variable -> VAR
Rule 79    variable -> VAR LBRACKET index COMMA index RBRACKET
Rule 80    index -> expression
Rule 81    prison -> SHARP variable
Rule 82    assignment -> variable ASSIGNMENT expression
Rule 83    assignment -> variable ASSIGNMENT error
Rule 84    if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 85    if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 86    if -> TESTONCE error
Rule 87    while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 88    while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 89    while -> TESTREP error
Rule 90    robot -> direction
Rule 91    robot -> XRAY
Rule 92    function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 93    function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
Rule 94    function_return -> variable
Rule 95    function_call -> CALL VAR LBRACKET vars RBRACKET
Rule 96    function_call -> CALL VAR LBRACKET RBRACKET
Rule 97    function_call -> VAR LBRACKET vars RBRACKET error
Rule 98    function_call -> VAR LBRACKET RBRACKET error
Rule 99    function_call -> CALL VAR LBRACKET error RBRACKET
Rule 100   vars -> VAR vars
Rule 101   vars -> VAR
Rule 102   parameters -> type VAR COMMA parameters
Rule 103   parameters -> type VAR

Terminals, with rules where they appear

ASSIGNMENT           : 32 33 37 38 82 83
BOTTOM               : 65
CALL                 : 95 96 99
CELL                 : 43
COMMA                : 35 40 55 79 102
CONST                : 33 38
DECIMAL              : 75 77
DIV                  : 73
DOWN                 : 63
EQ                   : 66
FUNC                 : 92 93
GREATER              : 68
LBRACKET             : 35 40 52 53 54 79 84 84 85 85 87 87 88 88 92 92 93 93 95 96 97 98 99
LEFT                 : 59
LESS                 : 67
MATRIX               : 34 35 39 40
MINUS                : 71 77
NDOWN                : 64
NEWLINE              : 4 5 6 7 8 9 10 11 12 13 24 25 26 27 28 29 30 84 85 87 88 92 93
NLEFT                : 60
NOTEQ                : 69
NRIGHT               : 62
NTOP                 : 58
PLUS                 : 70
PROCENT              : 74
RBRACKET             : 35 40 52 53 54 79 84 84 85 85 87 87 88 88 92 92 93 93 95 96 97 98 99
RIGHT                : 61
SEMICOLON            : 4 5 6 7 10 12 13 14 15 16 17 20 22 23
SHARP                : 81
SIGNED               : 41
STAR                 : 72
TESTONCE             : 84 85 86
TESTREP              : 87 88 89
TOP                  : 57
UDECIMAL             : 76
UNSIGNED             : 42
VAR                  : 31 32 33 34 35 36 37 38 39 40 78 79 92 93 95 96 97 98 99 100 101 102 103
XRAY                 : 91
error                : 24 25 26 27 28 29 30 36 37 38 39 40 54 83 86 89 97 98 99

Nonterminals, with rules where they appear

assignment           : 5 15 25
compare              : 6 16 26 48 85 88
const                : 45
declaration          : 4 14 24
direction            : 55 56 90
directions           : 53 55
expression           : 32 33 35 35 37 38 40 40 52 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 80 82
function             : 11 21
function_call        : 12 22 29 51
function_return      : 13 23 30
if                   : 8 18
index                : 79 79
math_expression      : 44 84 87
parameters           : 92 102
prison               : 7 17 27 50
program              : 0
robot                : 10 20 28 49
side                 : 47
state                : 1 2 84 85 87 88 92 93
statement            : 2 3
type                 : 31 32 33 34 35 102 103
variable             : 46 81 82 83 94
vars                 : 95 97 100
while                : 9 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . state
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    program                        shift and go to state 1
    state                          shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 1

    (0) S' -> program .



state 2

    (1) program -> state .
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    $end            reduce using rule 1 (program -> state .)
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 3

    (3) state -> statement .

    CONST           reduce using rule 3 (state -> statement .)
    MATRIX          reduce using rule 3 (state -> statement .)
    error           reduce using rule 3 (state -> statement .)
    SHARP           reduce using rule 3 (state -> statement .)
    TESTONCE        reduce using rule 3 (state -> statement .)
    TESTREP         reduce using rule 3 (state -> statement .)
    XRAY            reduce using rule 3 (state -> statement .)
    FUNC            reduce using rule 3 (state -> statement .)
    CALL            reduce using rule 3 (state -> statement .)
    VAR             reduce using rule 3 (state -> statement .)
    SIGNED          reduce using rule 3 (state -> statement .)
    UNSIGNED        reduce using rule 3 (state -> statement .)
    CELL            reduce using rule 3 (state -> statement .)
    LBRACKET        reduce using rule 3 (state -> statement .)
    TOP             reduce using rule 3 (state -> statement .)
    NTOP            reduce using rule 3 (state -> statement .)
    LEFT            reduce using rule 3 (state -> statement .)
    NLEFT           reduce using rule 3 (state -> statement .)
    RIGHT           reduce using rule 3 (state -> statement .)
    NRIGHT          reduce using rule 3 (state -> statement .)
    DOWN            reduce using rule 3 (state -> statement .)
    NDOWN           reduce using rule 3 (state -> statement .)
    BOTTOM          reduce using rule 3 (state -> statement .)
    DECIMAL         reduce using rule 3 (state -> statement .)
    UDECIMAL        reduce using rule 3 (state -> statement .)
    MINUS           reduce using rule 3 (state -> statement .)
    $end            reduce using rule 3 (state -> statement .)
    RBRACKET        reduce using rule 3 (state -> statement .)


state 4

    (4) statement -> declaration . SEMICOLON NEWLINE
    (14) statement -> declaration . SEMICOLON
    (24) statement -> declaration . error NEWLINE

    SEMICOLON       shift and go to state 48
    error           shift and go to state 49


state 5

    (5) statement -> assignment . SEMICOLON NEWLINE
    (15) statement -> assignment . SEMICOLON
    (25) statement -> assignment . error NEWLINE

    SEMICOLON       shift and go to state 50
    error           shift and go to state 51


state 6

    (6) statement -> compare . SEMICOLON NEWLINE
    (16) statement -> compare . SEMICOLON
    (26) statement -> compare . error NEWLINE
    (48) expression -> compare .

    SEMICOLON       shift and go to state 52
    error           shift and go to state 53
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)


state 7

    (7) statement -> prison . SEMICOLON NEWLINE
    (17) statement -> prison . SEMICOLON
    (27) statement -> prison . error NEWLINE
    (50) expression -> prison .

    SEMICOLON       shift and go to state 54
    error           shift and go to state 55
    EQ              reduce using rule 50 (expression -> prison .)
    LESS            reduce using rule 50 (expression -> prison .)
    GREATER         reduce using rule 50 (expression -> prison .)
    NOTEQ           reduce using rule 50 (expression -> prison .)
    PLUS            reduce using rule 50 (expression -> prison .)
    MINUS           reduce using rule 50 (expression -> prison .)
    STAR            reduce using rule 50 (expression -> prison .)
    DIV             reduce using rule 50 (expression -> prison .)
    PROCENT         reduce using rule 50 (expression -> prison .)


state 8

    (8) statement -> if . NEWLINE
    (18) statement -> if .

    NEWLINE         shift and go to state 56
    CONST           reduce using rule 18 (statement -> if .)
    MATRIX          reduce using rule 18 (statement -> if .)
    error           reduce using rule 18 (statement -> if .)
    SHARP           reduce using rule 18 (statement -> if .)
    TESTONCE        reduce using rule 18 (statement -> if .)
    TESTREP         reduce using rule 18 (statement -> if .)
    XRAY            reduce using rule 18 (statement -> if .)
    FUNC            reduce using rule 18 (statement -> if .)
    CALL            reduce using rule 18 (statement -> if .)
    VAR             reduce using rule 18 (statement -> if .)
    SIGNED          reduce using rule 18 (statement -> if .)
    UNSIGNED        reduce using rule 18 (statement -> if .)
    CELL            reduce using rule 18 (statement -> if .)
    LBRACKET        reduce using rule 18 (statement -> if .)
    TOP             reduce using rule 18 (statement -> if .)
    NTOP            reduce using rule 18 (statement -> if .)
    LEFT            reduce using rule 18 (statement -> if .)
    NLEFT           reduce using rule 18 (statement -> if .)
    RIGHT           reduce using rule 18 (statement -> if .)
    NRIGHT          reduce using rule 18 (statement -> if .)
    DOWN            reduce using rule 18 (statement -> if .)
    NDOWN           reduce using rule 18 (statement -> if .)
    BOTTOM          reduce using rule 18 (statement -> if .)
    DECIMAL         reduce using rule 18 (statement -> if .)
    UDECIMAL        reduce using rule 18 (statement -> if .)
    MINUS           reduce using rule 18 (statement -> if .)
    $end            reduce using rule 18 (statement -> if .)
    RBRACKET        reduce using rule 18 (statement -> if .)


state 9

    (9) statement -> while . NEWLINE
    (19) statement -> while .

    NEWLINE         shift and go to state 57
    CONST           reduce using rule 19 (statement -> while .)
    MATRIX          reduce using rule 19 (statement -> while .)
    error           reduce using rule 19 (statement -> while .)
    SHARP           reduce using rule 19 (statement -> while .)
    TESTONCE        reduce using rule 19 (statement -> while .)
    TESTREP         reduce using rule 19 (statement -> while .)
    XRAY            reduce using rule 19 (statement -> while .)
    FUNC            reduce using rule 19 (statement -> while .)
    CALL            reduce using rule 19 (statement -> while .)
    VAR             reduce using rule 19 (statement -> while .)
    SIGNED          reduce using rule 19 (statement -> while .)
    UNSIGNED        reduce using rule 19 (statement -> while .)
    CELL            reduce using rule 19 (statement -> while .)
    LBRACKET        reduce using rule 19 (statement -> while .)
    TOP             reduce using rule 19 (statement -> while .)
    NTOP            reduce using rule 19 (statement -> while .)
    LEFT            reduce using rule 19 (statement -> while .)
    NLEFT           reduce using rule 19 (statement -> while .)
    RIGHT           reduce using rule 19 (statement -> while .)
    NRIGHT          reduce using rule 19 (statement -> while .)
    DOWN            reduce using rule 19 (statement -> while .)
    NDOWN           reduce using rule 19 (statement -> while .)
    BOTTOM          reduce using rule 19 (statement -> while .)
    DECIMAL         reduce using rule 19 (statement -> while .)
    UDECIMAL        reduce using rule 19 (statement -> while .)
    MINUS           reduce using rule 19 (statement -> while .)
    $end            reduce using rule 19 (statement -> while .)
    RBRACKET        reduce using rule 19 (statement -> while .)


state 10

    (10) statement -> robot . SEMICOLON NEWLINE
    (20) statement -> robot . SEMICOLON
    (28) statement -> robot . error NEWLINE
    (49) expression -> robot .

    SEMICOLON       shift and go to state 58
    error           shift and go to state 59
    EQ              reduce using rule 49 (expression -> robot .)
    LESS            reduce using rule 49 (expression -> robot .)
    GREATER         reduce using rule 49 (expression -> robot .)
    NOTEQ           reduce using rule 49 (expression -> robot .)
    PLUS            reduce using rule 49 (expression -> robot .)
    MINUS           reduce using rule 49 (expression -> robot .)
    STAR            reduce using rule 49 (expression -> robot .)
    DIV             reduce using rule 49 (expression -> robot .)
    PROCENT         reduce using rule 49 (expression -> robot .)


state 11

    (11) statement -> function . NEWLINE
    (21) statement -> function .

    NEWLINE         shift and go to state 60
    CONST           reduce using rule 21 (statement -> function .)
    MATRIX          reduce using rule 21 (statement -> function .)
    error           reduce using rule 21 (statement -> function .)
    SHARP           reduce using rule 21 (statement -> function .)
    TESTONCE        reduce using rule 21 (statement -> function .)
    TESTREP         reduce using rule 21 (statement -> function .)
    XRAY            reduce using rule 21 (statement -> function .)
    FUNC            reduce using rule 21 (statement -> function .)
    CALL            reduce using rule 21 (statement -> function .)
    VAR             reduce using rule 21 (statement -> function .)
    SIGNED          reduce using rule 21 (statement -> function .)
    UNSIGNED        reduce using rule 21 (statement -> function .)
    CELL            reduce using rule 21 (statement -> function .)
    LBRACKET        reduce using rule 21 (statement -> function .)
    TOP             reduce using rule 21 (statement -> function .)
    NTOP            reduce using rule 21 (statement -> function .)
    LEFT            reduce using rule 21 (statement -> function .)
    NLEFT           reduce using rule 21 (statement -> function .)
    RIGHT           reduce using rule 21 (statement -> function .)
    NRIGHT          reduce using rule 21 (statement -> function .)
    DOWN            reduce using rule 21 (statement -> function .)
    NDOWN           reduce using rule 21 (statement -> function .)
    BOTTOM          reduce using rule 21 (statement -> function .)
    DECIMAL         reduce using rule 21 (statement -> function .)
    UDECIMAL        reduce using rule 21 (statement -> function .)
    MINUS           reduce using rule 21 (statement -> function .)
    $end            reduce using rule 21 (statement -> function .)
    RBRACKET        reduce using rule 21 (statement -> function .)


state 12

    (12) statement -> function_call . SEMICOLON NEWLINE
    (22) statement -> function_call . SEMICOLON
    (29) statement -> function_call . error NEWLINE
    (51) expression -> function_call .

    SEMICOLON       shift and go to state 61
    error           shift and go to state 62
    EQ              reduce using rule 51 (expression -> function_call .)
    LESS            reduce using rule 51 (expression -> function_call .)
    GREATER         reduce using rule 51 (expression -> function_call .)
    NOTEQ           reduce using rule 51 (expression -> function_call .)
    PLUS            reduce using rule 51 (expression -> function_call .)
    MINUS           reduce using rule 51 (expression -> function_call .)
    STAR            reduce using rule 51 (expression -> function_call .)
    DIV             reduce using rule 51 (expression -> function_call .)
    PROCENT         reduce using rule 51 (expression -> function_call .)


state 13

    (13) statement -> function_return . SEMICOLON NEWLINE
    (23) statement -> function_return . SEMICOLON
    (30) statement -> function_return . error NEWLINE

    SEMICOLON       shift and go to state 63
    error           shift and go to state 64


state 14

    (36) declaration -> error . VAR
    (37) declaration -> error . VAR ASSIGNMENT expression

    VAR             shift and go to state 65


state 15

    (31) declaration -> type . VAR
    (32) declaration -> type . VAR ASSIGNMENT expression

    VAR             shift and go to state 66


state 16

    (97) function_call -> VAR . LBRACKET vars RBRACKET error
    (98) function_call -> VAR . LBRACKET RBRACKET error
    (78) variable -> VAR .
    (79) variable -> VAR . LBRACKET index COMMA index RBRACKET

    LBRACKET        shift and go to state 67
    ASSIGNMENT      reduce using rule 78 (variable -> VAR .)
    SEMICOLON       reduce using rule 78 (variable -> VAR .)
    error           reduce using rule 78 (variable -> VAR .)
    EQ              reduce using rule 78 (variable -> VAR .)
    LESS            reduce using rule 78 (variable -> VAR .)
    GREATER         reduce using rule 78 (variable -> VAR .)
    NOTEQ           reduce using rule 78 (variable -> VAR .)
    PLUS            reduce using rule 78 (variable -> VAR .)
    MINUS           reduce using rule 78 (variable -> VAR .)
    STAR            reduce using rule 78 (variable -> VAR .)
    DIV             reduce using rule 78 (variable -> VAR .)
    PROCENT         reduce using rule 78 (variable -> VAR .)


state 17

    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression

    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76


state 18

    (33) declaration -> CONST . type VAR ASSIGNMENT expression
    (38) declaration -> CONST . error VAR ASSIGNMENT expression
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    error           shift and go to state 78
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32

    type                           shift and go to state 77

state 19

    (34) declaration -> MATRIX . type VAR
    (35) declaration -> MATRIX . type VAR LBRACKET expression COMMA expression RBRACKET
    (39) declaration -> MATRIX . error VAR
    (40) declaration -> MATRIX . error VAR LBRACKET expression COMMA expression RBRACKET
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    error           shift and go to state 80
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32

    type                           shift and go to state 79

state 20

    (52) expression -> LBRACKET . expression RBRACKET
    (53) side -> LBRACKET . directions RBRACKET
    (54) side -> LBRACKET . error RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (55) directions -> . direction COMMA directions
    (56) directions -> . direction
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    error           shift and go to state 83
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 81
    directions                     shift and go to state 82
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 89

state 21

    (82) assignment -> variable . ASSIGNMENT expression
    (83) assignment -> variable . ASSIGNMENT error
    (94) function_return -> variable .
    (46) expression -> variable .

    ASSIGNMENT      shift and go to state 91
    SEMICOLON       reduce using rule 94 (function_return -> variable .)
    error           reduce using rule 94 (function_return -> variable .)
    EQ              reduce using rule 46 (expression -> variable .)
    LESS            reduce using rule 46 (expression -> variable .)
    GREATER         reduce using rule 46 (expression -> variable .)
    NOTEQ           reduce using rule 46 (expression -> variable .)
    PLUS            reduce using rule 46 (expression -> variable .)
    MINUS           reduce using rule 46 (expression -> variable .)
    STAR            reduce using rule 46 (expression -> variable .)
    DIV             reduce using rule 46 (expression -> variable .)
    PROCENT         reduce using rule 46 (expression -> variable .)


state 22

    (81) prison -> SHARP . variable
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET

    VAR             shift and go to state 93

    variable                       shift and go to state 92

state 23

    (84) if -> TESTONCE . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> TESTONCE . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> TESTONCE . error

    LBRACKET        shift and go to state 94
    error           shift and go to state 95


state 24

    (44) expression -> math_expression .

    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    RBRACKET        reduce using rule 44 (expression -> math_expression .)
    COMMA           reduce using rule 44 (expression -> math_expression .)
    SEMICOLON       reduce using rule 44 (expression -> math_expression .)
    error           reduce using rule 44 (expression -> math_expression .)


state 25

    (87) while -> TESTREP . LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> TESTREP . LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> TESTREP . error

    LBRACKET        shift and go to state 96
    error           shift and go to state 97


state 26

    (90) robot -> direction .

    SEMICOLON       reduce using rule 90 (robot -> direction .)
    error           reduce using rule 90 (robot -> direction .)
    EQ              reduce using rule 90 (robot -> direction .)
    LESS            reduce using rule 90 (robot -> direction .)
    GREATER         reduce using rule 90 (robot -> direction .)
    NOTEQ           reduce using rule 90 (robot -> direction .)
    PLUS            reduce using rule 90 (robot -> direction .)
    MINUS           reduce using rule 90 (robot -> direction .)
    STAR            reduce using rule 90 (robot -> direction .)
    DIV             reduce using rule 90 (robot -> direction .)
    PROCENT         reduce using rule 90 (robot -> direction .)
    COMMA           reduce using rule 90 (robot -> direction .)
    RBRACKET        reduce using rule 90 (robot -> direction .)


state 27

    (91) robot -> XRAY .

    SEMICOLON       reduce using rule 91 (robot -> XRAY .)
    error           reduce using rule 91 (robot -> XRAY .)
    EQ              reduce using rule 91 (robot -> XRAY .)
    LESS            reduce using rule 91 (robot -> XRAY .)
    GREATER         reduce using rule 91 (robot -> XRAY .)
    NOTEQ           reduce using rule 91 (robot -> XRAY .)
    PLUS            reduce using rule 91 (robot -> XRAY .)
    MINUS           reduce using rule 91 (robot -> XRAY .)
    STAR            reduce using rule 91 (robot -> XRAY .)
    DIV             reduce using rule 91 (robot -> XRAY .)
    PROCENT         reduce using rule 91 (robot -> XRAY .)
    RBRACKET        reduce using rule 91 (robot -> XRAY .)
    COMMA           reduce using rule 91 (robot -> XRAY .)


state 28

    (92) function -> FUNC . VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> FUNC . VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    VAR             shift and go to state 98


state 29

    (95) function_call -> CALL . VAR LBRACKET vars RBRACKET
    (96) function_call -> CALL . VAR LBRACKET RBRACKET
    (99) function_call -> CALL . VAR LBRACKET error RBRACKET

    VAR             shift and go to state 99


state 30

    (41) type -> SIGNED .

    VAR             reduce using rule 41 (type -> SIGNED .)


state 31

    (42) type -> UNSIGNED .

    VAR             reduce using rule 42 (type -> UNSIGNED .)


state 32

    (43) type -> CELL .

    VAR             reduce using rule 43 (type -> CELL .)


state 33

    (45) expression -> const .

    EQ              reduce using rule 45 (expression -> const .)
    LESS            reduce using rule 45 (expression -> const .)
    GREATER         reduce using rule 45 (expression -> const .)
    NOTEQ           reduce using rule 45 (expression -> const .)
    PLUS            reduce using rule 45 (expression -> const .)
    MINUS           reduce using rule 45 (expression -> const .)
    STAR            reduce using rule 45 (expression -> const .)
    DIV             reduce using rule 45 (expression -> const .)
    PROCENT         reduce using rule 45 (expression -> const .)
    RBRACKET        reduce using rule 45 (expression -> const .)
    COMMA           reduce using rule 45 (expression -> const .)
    SEMICOLON       reduce using rule 45 (expression -> const .)
    error           reduce using rule 45 (expression -> const .)


state 34

    (47) expression -> side .

    EQ              reduce using rule 47 (expression -> side .)
    LESS            reduce using rule 47 (expression -> side .)
    GREATER         reduce using rule 47 (expression -> side .)
    NOTEQ           reduce using rule 47 (expression -> side .)
    PLUS            reduce using rule 47 (expression -> side .)
    MINUS           reduce using rule 47 (expression -> side .)
    STAR            reduce using rule 47 (expression -> side .)
    DIV             reduce using rule 47 (expression -> side .)
    PROCENT         reduce using rule 47 (expression -> side .)
    RBRACKET        reduce using rule 47 (expression -> side .)
    COMMA           reduce using rule 47 (expression -> side .)
    SEMICOLON       reduce using rule 47 (expression -> side .)
    error           reduce using rule 47 (expression -> side .)


state 35

    (57) direction -> TOP .

    SEMICOLON       reduce using rule 57 (direction -> TOP .)
    error           reduce using rule 57 (direction -> TOP .)
    EQ              reduce using rule 57 (direction -> TOP .)
    LESS            reduce using rule 57 (direction -> TOP .)
    GREATER         reduce using rule 57 (direction -> TOP .)
    NOTEQ           reduce using rule 57 (direction -> TOP .)
    PLUS            reduce using rule 57 (direction -> TOP .)
    MINUS           reduce using rule 57 (direction -> TOP .)
    STAR            reduce using rule 57 (direction -> TOP .)
    DIV             reduce using rule 57 (direction -> TOP .)
    PROCENT         reduce using rule 57 (direction -> TOP .)
    COMMA           reduce using rule 57 (direction -> TOP .)
    RBRACKET        reduce using rule 57 (direction -> TOP .)


state 36

    (58) direction -> NTOP .

    SEMICOLON       reduce using rule 58 (direction -> NTOP .)
    error           reduce using rule 58 (direction -> NTOP .)
    EQ              reduce using rule 58 (direction -> NTOP .)
    LESS            reduce using rule 58 (direction -> NTOP .)
    GREATER         reduce using rule 58 (direction -> NTOP .)
    NOTEQ           reduce using rule 58 (direction -> NTOP .)
    PLUS            reduce using rule 58 (direction -> NTOP .)
    MINUS           reduce using rule 58 (direction -> NTOP .)
    STAR            reduce using rule 58 (direction -> NTOP .)
    DIV             reduce using rule 58 (direction -> NTOP .)
    PROCENT         reduce using rule 58 (direction -> NTOP .)
    COMMA           reduce using rule 58 (direction -> NTOP .)
    RBRACKET        reduce using rule 58 (direction -> NTOP .)


state 37

    (59) direction -> LEFT .

    SEMICOLON       reduce using rule 59 (direction -> LEFT .)
    error           reduce using rule 59 (direction -> LEFT .)
    EQ              reduce using rule 59 (direction -> LEFT .)
    LESS            reduce using rule 59 (direction -> LEFT .)
    GREATER         reduce using rule 59 (direction -> LEFT .)
    NOTEQ           reduce using rule 59 (direction -> LEFT .)
    PLUS            reduce using rule 59 (direction -> LEFT .)
    MINUS           reduce using rule 59 (direction -> LEFT .)
    STAR            reduce using rule 59 (direction -> LEFT .)
    DIV             reduce using rule 59 (direction -> LEFT .)
    PROCENT         reduce using rule 59 (direction -> LEFT .)
    COMMA           reduce using rule 59 (direction -> LEFT .)
    RBRACKET        reduce using rule 59 (direction -> LEFT .)


state 38

    (60) direction -> NLEFT .

    SEMICOLON       reduce using rule 60 (direction -> NLEFT .)
    error           reduce using rule 60 (direction -> NLEFT .)
    EQ              reduce using rule 60 (direction -> NLEFT .)
    LESS            reduce using rule 60 (direction -> NLEFT .)
    GREATER         reduce using rule 60 (direction -> NLEFT .)
    NOTEQ           reduce using rule 60 (direction -> NLEFT .)
    PLUS            reduce using rule 60 (direction -> NLEFT .)
    MINUS           reduce using rule 60 (direction -> NLEFT .)
    STAR            reduce using rule 60 (direction -> NLEFT .)
    DIV             reduce using rule 60 (direction -> NLEFT .)
    PROCENT         reduce using rule 60 (direction -> NLEFT .)
    COMMA           reduce using rule 60 (direction -> NLEFT .)
    RBRACKET        reduce using rule 60 (direction -> NLEFT .)


state 39

    (61) direction -> RIGHT .

    SEMICOLON       reduce using rule 61 (direction -> RIGHT .)
    error           reduce using rule 61 (direction -> RIGHT .)
    EQ              reduce using rule 61 (direction -> RIGHT .)
    LESS            reduce using rule 61 (direction -> RIGHT .)
    GREATER         reduce using rule 61 (direction -> RIGHT .)
    NOTEQ           reduce using rule 61 (direction -> RIGHT .)
    PLUS            reduce using rule 61 (direction -> RIGHT .)
    MINUS           reduce using rule 61 (direction -> RIGHT .)
    STAR            reduce using rule 61 (direction -> RIGHT .)
    DIV             reduce using rule 61 (direction -> RIGHT .)
    PROCENT         reduce using rule 61 (direction -> RIGHT .)
    COMMA           reduce using rule 61 (direction -> RIGHT .)
    RBRACKET        reduce using rule 61 (direction -> RIGHT .)


state 40

    (62) direction -> NRIGHT .

    SEMICOLON       reduce using rule 62 (direction -> NRIGHT .)
    error           reduce using rule 62 (direction -> NRIGHT .)
    EQ              reduce using rule 62 (direction -> NRIGHT .)
    LESS            reduce using rule 62 (direction -> NRIGHT .)
    GREATER         reduce using rule 62 (direction -> NRIGHT .)
    NOTEQ           reduce using rule 62 (direction -> NRIGHT .)
    PLUS            reduce using rule 62 (direction -> NRIGHT .)
    MINUS           reduce using rule 62 (direction -> NRIGHT .)
    STAR            reduce using rule 62 (direction -> NRIGHT .)
    DIV             reduce using rule 62 (direction -> NRIGHT .)
    PROCENT         reduce using rule 62 (direction -> NRIGHT .)
    COMMA           reduce using rule 62 (direction -> NRIGHT .)
    RBRACKET        reduce using rule 62 (direction -> NRIGHT .)


state 41

    (63) direction -> DOWN .

    SEMICOLON       reduce using rule 63 (direction -> DOWN .)
    error           reduce using rule 63 (direction -> DOWN .)
    EQ              reduce using rule 63 (direction -> DOWN .)
    LESS            reduce using rule 63 (direction -> DOWN .)
    GREATER         reduce using rule 63 (direction -> DOWN .)
    NOTEQ           reduce using rule 63 (direction -> DOWN .)
    PLUS            reduce using rule 63 (direction -> DOWN .)
    MINUS           reduce using rule 63 (direction -> DOWN .)
    STAR            reduce using rule 63 (direction -> DOWN .)
    DIV             reduce using rule 63 (direction -> DOWN .)
    PROCENT         reduce using rule 63 (direction -> DOWN .)
    COMMA           reduce using rule 63 (direction -> DOWN .)
    RBRACKET        reduce using rule 63 (direction -> DOWN .)


state 42

    (64) direction -> NDOWN .

    SEMICOLON       reduce using rule 64 (direction -> NDOWN .)
    error           reduce using rule 64 (direction -> NDOWN .)
    EQ              reduce using rule 64 (direction -> NDOWN .)
    LESS            reduce using rule 64 (direction -> NDOWN .)
    GREATER         reduce using rule 64 (direction -> NDOWN .)
    NOTEQ           reduce using rule 64 (direction -> NDOWN .)
    PLUS            reduce using rule 64 (direction -> NDOWN .)
    MINUS           reduce using rule 64 (direction -> NDOWN .)
    STAR            reduce using rule 64 (direction -> NDOWN .)
    DIV             reduce using rule 64 (direction -> NDOWN .)
    PROCENT         reduce using rule 64 (direction -> NDOWN .)
    COMMA           reduce using rule 64 (direction -> NDOWN .)
    RBRACKET        reduce using rule 64 (direction -> NDOWN .)


state 43

    (65) direction -> BOTTOM .

    SEMICOLON       reduce using rule 65 (direction -> BOTTOM .)
    error           reduce using rule 65 (direction -> BOTTOM .)
    EQ              reduce using rule 65 (direction -> BOTTOM .)
    LESS            reduce using rule 65 (direction -> BOTTOM .)
    GREATER         reduce using rule 65 (direction -> BOTTOM .)
    NOTEQ           reduce using rule 65 (direction -> BOTTOM .)
    PLUS            reduce using rule 65 (direction -> BOTTOM .)
    MINUS           reduce using rule 65 (direction -> BOTTOM .)
    STAR            reduce using rule 65 (direction -> BOTTOM .)
    DIV             reduce using rule 65 (direction -> BOTTOM .)
    PROCENT         reduce using rule 65 (direction -> BOTTOM .)
    COMMA           reduce using rule 65 (direction -> BOTTOM .)
    RBRACKET        reduce using rule 65 (direction -> BOTTOM .)


state 44

    (77) const -> MINUS . DECIMAL

    DECIMAL         shift and go to state 100


state 45

    (75) const -> DECIMAL .

    EQ              reduce using rule 75 (const -> DECIMAL .)
    LESS            reduce using rule 75 (const -> DECIMAL .)
    GREATER         reduce using rule 75 (const -> DECIMAL .)
    NOTEQ           reduce using rule 75 (const -> DECIMAL .)
    PLUS            reduce using rule 75 (const -> DECIMAL .)
    MINUS           reduce using rule 75 (const -> DECIMAL .)
    STAR            reduce using rule 75 (const -> DECIMAL .)
    DIV             reduce using rule 75 (const -> DECIMAL .)
    PROCENT         reduce using rule 75 (const -> DECIMAL .)
    RBRACKET        reduce using rule 75 (const -> DECIMAL .)
    COMMA           reduce using rule 75 (const -> DECIMAL .)
    SEMICOLON       reduce using rule 75 (const -> DECIMAL .)
    error           reduce using rule 75 (const -> DECIMAL .)


state 46

    (76) const -> UDECIMAL .

    EQ              reduce using rule 76 (const -> UDECIMAL .)
    LESS            reduce using rule 76 (const -> UDECIMAL .)
    GREATER         reduce using rule 76 (const -> UDECIMAL .)
    NOTEQ           reduce using rule 76 (const -> UDECIMAL .)
    PLUS            reduce using rule 76 (const -> UDECIMAL .)
    MINUS           reduce using rule 76 (const -> UDECIMAL .)
    STAR            reduce using rule 76 (const -> UDECIMAL .)
    DIV             reduce using rule 76 (const -> UDECIMAL .)
    PROCENT         reduce using rule 76 (const -> UDECIMAL .)
    RBRACKET        reduce using rule 76 (const -> UDECIMAL .)
    COMMA           reduce using rule 76 (const -> UDECIMAL .)
    SEMICOLON       reduce using rule 76 (const -> UDECIMAL .)
    error           reduce using rule 76 (const -> UDECIMAL .)


state 47

    (2) state -> state statement .

    CONST           reduce using rule 2 (state -> state statement .)
    MATRIX          reduce using rule 2 (state -> state statement .)
    error           reduce using rule 2 (state -> state statement .)
    SHARP           reduce using rule 2 (state -> state statement .)
    TESTONCE        reduce using rule 2 (state -> state statement .)
    TESTREP         reduce using rule 2 (state -> state statement .)
    XRAY            reduce using rule 2 (state -> state statement .)
    FUNC            reduce using rule 2 (state -> state statement .)
    CALL            reduce using rule 2 (state -> state statement .)
    VAR             reduce using rule 2 (state -> state statement .)
    SIGNED          reduce using rule 2 (state -> state statement .)
    UNSIGNED        reduce using rule 2 (state -> state statement .)
    CELL            reduce using rule 2 (state -> state statement .)
    LBRACKET        reduce using rule 2 (state -> state statement .)
    TOP             reduce using rule 2 (state -> state statement .)
    NTOP            reduce using rule 2 (state -> state statement .)
    LEFT            reduce using rule 2 (state -> state statement .)
    NLEFT           reduce using rule 2 (state -> state statement .)
    RIGHT           reduce using rule 2 (state -> state statement .)
    NRIGHT          reduce using rule 2 (state -> state statement .)
    DOWN            reduce using rule 2 (state -> state statement .)
    NDOWN           reduce using rule 2 (state -> state statement .)
    BOTTOM          reduce using rule 2 (state -> state statement .)
    DECIMAL         reduce using rule 2 (state -> state statement .)
    UDECIMAL        reduce using rule 2 (state -> state statement .)
    MINUS           reduce using rule 2 (state -> state statement .)
    $end            reduce using rule 2 (state -> state statement .)
    RBRACKET        reduce using rule 2 (state -> state statement .)


state 48

    (4) statement -> declaration SEMICOLON . NEWLINE
    (14) statement -> declaration SEMICOLON .

    NEWLINE         shift and go to state 101
    CONST           reduce using rule 14 (statement -> declaration SEMICOLON .)
    MATRIX          reduce using rule 14 (statement -> declaration SEMICOLON .)
    error           reduce using rule 14 (statement -> declaration SEMICOLON .)
    SHARP           reduce using rule 14 (statement -> declaration SEMICOLON .)
    TESTONCE        reduce using rule 14 (statement -> declaration SEMICOLON .)
    TESTREP         reduce using rule 14 (statement -> declaration SEMICOLON .)
    XRAY            reduce using rule 14 (statement -> declaration SEMICOLON .)
    FUNC            reduce using rule 14 (statement -> declaration SEMICOLON .)
    CALL            reduce using rule 14 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 14 (statement -> declaration SEMICOLON .)
    SIGNED          reduce using rule 14 (statement -> declaration SEMICOLON .)
    UNSIGNED        reduce using rule 14 (statement -> declaration SEMICOLON .)
    CELL            reduce using rule 14 (statement -> declaration SEMICOLON .)
    LBRACKET        reduce using rule 14 (statement -> declaration SEMICOLON .)
    TOP             reduce using rule 14 (statement -> declaration SEMICOLON .)
    NTOP            reduce using rule 14 (statement -> declaration SEMICOLON .)
    LEFT            reduce using rule 14 (statement -> declaration SEMICOLON .)
    NLEFT           reduce using rule 14 (statement -> declaration SEMICOLON .)
    RIGHT           reduce using rule 14 (statement -> declaration SEMICOLON .)
    NRIGHT          reduce using rule 14 (statement -> declaration SEMICOLON .)
    DOWN            reduce using rule 14 (statement -> declaration SEMICOLON .)
    NDOWN           reduce using rule 14 (statement -> declaration SEMICOLON .)
    BOTTOM          reduce using rule 14 (statement -> declaration SEMICOLON .)
    DECIMAL         reduce using rule 14 (statement -> declaration SEMICOLON .)
    UDECIMAL        reduce using rule 14 (statement -> declaration SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 14 (statement -> declaration SEMICOLON .)
    RBRACKET        reduce using rule 14 (statement -> declaration SEMICOLON .)


state 49

    (24) statement -> declaration error . NEWLINE

    NEWLINE         shift and go to state 102


state 50

    (5) statement -> assignment SEMICOLON . NEWLINE
    (15) statement -> assignment SEMICOLON .

    NEWLINE         shift and go to state 103
    CONST           reduce using rule 15 (statement -> assignment SEMICOLON .)
    MATRIX          reduce using rule 15 (statement -> assignment SEMICOLON .)
    error           reduce using rule 15 (statement -> assignment SEMICOLON .)
    SHARP           reduce using rule 15 (statement -> assignment SEMICOLON .)
    TESTONCE        reduce using rule 15 (statement -> assignment SEMICOLON .)
    TESTREP         reduce using rule 15 (statement -> assignment SEMICOLON .)
    XRAY            reduce using rule 15 (statement -> assignment SEMICOLON .)
    FUNC            reduce using rule 15 (statement -> assignment SEMICOLON .)
    CALL            reduce using rule 15 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 15 (statement -> assignment SEMICOLON .)
    SIGNED          reduce using rule 15 (statement -> assignment SEMICOLON .)
    UNSIGNED        reduce using rule 15 (statement -> assignment SEMICOLON .)
    CELL            reduce using rule 15 (statement -> assignment SEMICOLON .)
    LBRACKET        reduce using rule 15 (statement -> assignment SEMICOLON .)
    TOP             reduce using rule 15 (statement -> assignment SEMICOLON .)
    NTOP            reduce using rule 15 (statement -> assignment SEMICOLON .)
    LEFT            reduce using rule 15 (statement -> assignment SEMICOLON .)
    NLEFT           reduce using rule 15 (statement -> assignment SEMICOLON .)
    RIGHT           reduce using rule 15 (statement -> assignment SEMICOLON .)
    NRIGHT          reduce using rule 15 (statement -> assignment SEMICOLON .)
    DOWN            reduce using rule 15 (statement -> assignment SEMICOLON .)
    NDOWN           reduce using rule 15 (statement -> assignment SEMICOLON .)
    BOTTOM          reduce using rule 15 (statement -> assignment SEMICOLON .)
    DECIMAL         reduce using rule 15 (statement -> assignment SEMICOLON .)
    UDECIMAL        reduce using rule 15 (statement -> assignment SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 15 (statement -> assignment SEMICOLON .)
    RBRACKET        reduce using rule 15 (statement -> assignment SEMICOLON .)


state 51

    (25) statement -> assignment error . NEWLINE

    NEWLINE         shift and go to state 104


state 52

    (6) statement -> compare SEMICOLON . NEWLINE
    (16) statement -> compare SEMICOLON .

    NEWLINE         shift and go to state 105
    CONST           reduce using rule 16 (statement -> compare SEMICOLON .)
    MATRIX          reduce using rule 16 (statement -> compare SEMICOLON .)
    error           reduce using rule 16 (statement -> compare SEMICOLON .)
    SHARP           reduce using rule 16 (statement -> compare SEMICOLON .)
    TESTONCE        reduce using rule 16 (statement -> compare SEMICOLON .)
    TESTREP         reduce using rule 16 (statement -> compare SEMICOLON .)
    XRAY            reduce using rule 16 (statement -> compare SEMICOLON .)
    FUNC            reduce using rule 16 (statement -> compare SEMICOLON .)
    CALL            reduce using rule 16 (statement -> compare SEMICOLON .)
    VAR             reduce using rule 16 (statement -> compare SEMICOLON .)
    SIGNED          reduce using rule 16 (statement -> compare SEMICOLON .)
    UNSIGNED        reduce using rule 16 (statement -> compare SEMICOLON .)
    CELL            reduce using rule 16 (statement -> compare SEMICOLON .)
    LBRACKET        reduce using rule 16 (statement -> compare SEMICOLON .)
    TOP             reduce using rule 16 (statement -> compare SEMICOLON .)
    NTOP            reduce using rule 16 (statement -> compare SEMICOLON .)
    LEFT            reduce using rule 16 (statement -> compare SEMICOLON .)
    NLEFT           reduce using rule 16 (statement -> compare SEMICOLON .)
    RIGHT           reduce using rule 16 (statement -> compare SEMICOLON .)
    NRIGHT          reduce using rule 16 (statement -> compare SEMICOLON .)
    DOWN            reduce using rule 16 (statement -> compare SEMICOLON .)
    NDOWN           reduce using rule 16 (statement -> compare SEMICOLON .)
    BOTTOM          reduce using rule 16 (statement -> compare SEMICOLON .)
    DECIMAL         reduce using rule 16 (statement -> compare SEMICOLON .)
    UDECIMAL        reduce using rule 16 (statement -> compare SEMICOLON .)
    MINUS           reduce using rule 16 (statement -> compare SEMICOLON .)
    $end            reduce using rule 16 (statement -> compare SEMICOLON .)
    RBRACKET        reduce using rule 16 (statement -> compare SEMICOLON .)


state 53

    (26) statement -> compare error . NEWLINE

    NEWLINE         shift and go to state 106


state 54

    (7) statement -> prison SEMICOLON . NEWLINE
    (17) statement -> prison SEMICOLON .

    NEWLINE         shift and go to state 107
    CONST           reduce using rule 17 (statement -> prison SEMICOLON .)
    MATRIX          reduce using rule 17 (statement -> prison SEMICOLON .)
    error           reduce using rule 17 (statement -> prison SEMICOLON .)
    SHARP           reduce using rule 17 (statement -> prison SEMICOLON .)
    TESTONCE        reduce using rule 17 (statement -> prison SEMICOLON .)
    TESTREP         reduce using rule 17 (statement -> prison SEMICOLON .)
    XRAY            reduce using rule 17 (statement -> prison SEMICOLON .)
    FUNC            reduce using rule 17 (statement -> prison SEMICOLON .)
    CALL            reduce using rule 17 (statement -> prison SEMICOLON .)
    VAR             reduce using rule 17 (statement -> prison SEMICOLON .)
    SIGNED          reduce using rule 17 (statement -> prison SEMICOLON .)
    UNSIGNED        reduce using rule 17 (statement -> prison SEMICOLON .)
    CELL            reduce using rule 17 (statement -> prison SEMICOLON .)
    LBRACKET        reduce using rule 17 (statement -> prison SEMICOLON .)
    TOP             reduce using rule 17 (statement -> prison SEMICOLON .)
    NTOP            reduce using rule 17 (statement -> prison SEMICOLON .)
    LEFT            reduce using rule 17 (statement -> prison SEMICOLON .)
    NLEFT           reduce using rule 17 (statement -> prison SEMICOLON .)
    RIGHT           reduce using rule 17 (statement -> prison SEMICOLON .)
    NRIGHT          reduce using rule 17 (statement -> prison SEMICOLON .)
    DOWN            reduce using rule 17 (statement -> prison SEMICOLON .)
    NDOWN           reduce using rule 17 (statement -> prison SEMICOLON .)
    BOTTOM          reduce using rule 17 (statement -> prison SEMICOLON .)
    DECIMAL         reduce using rule 17 (statement -> prison SEMICOLON .)
    UDECIMAL        reduce using rule 17 (statement -> prison SEMICOLON .)
    MINUS           reduce using rule 17 (statement -> prison SEMICOLON .)
    $end            reduce using rule 17 (statement -> prison SEMICOLON .)
    RBRACKET        reduce using rule 17 (statement -> prison SEMICOLON .)


state 55

    (27) statement -> prison error . NEWLINE

    NEWLINE         shift and go to state 108


state 56

    (8) statement -> if NEWLINE .

    CONST           reduce using rule 8 (statement -> if NEWLINE .)
    MATRIX          reduce using rule 8 (statement -> if NEWLINE .)
    error           reduce using rule 8 (statement -> if NEWLINE .)
    SHARP           reduce using rule 8 (statement -> if NEWLINE .)
    TESTONCE        reduce using rule 8 (statement -> if NEWLINE .)
    TESTREP         reduce using rule 8 (statement -> if NEWLINE .)
    XRAY            reduce using rule 8 (statement -> if NEWLINE .)
    FUNC            reduce using rule 8 (statement -> if NEWLINE .)
    CALL            reduce using rule 8 (statement -> if NEWLINE .)
    VAR             reduce using rule 8 (statement -> if NEWLINE .)
    SIGNED          reduce using rule 8 (statement -> if NEWLINE .)
    UNSIGNED        reduce using rule 8 (statement -> if NEWLINE .)
    CELL            reduce using rule 8 (statement -> if NEWLINE .)
    LBRACKET        reduce using rule 8 (statement -> if NEWLINE .)
    TOP             reduce using rule 8 (statement -> if NEWLINE .)
    NTOP            reduce using rule 8 (statement -> if NEWLINE .)
    LEFT            reduce using rule 8 (statement -> if NEWLINE .)
    NLEFT           reduce using rule 8 (statement -> if NEWLINE .)
    RIGHT           reduce using rule 8 (statement -> if NEWLINE .)
    NRIGHT          reduce using rule 8 (statement -> if NEWLINE .)
    DOWN            reduce using rule 8 (statement -> if NEWLINE .)
    NDOWN           reduce using rule 8 (statement -> if NEWLINE .)
    BOTTOM          reduce using rule 8 (statement -> if NEWLINE .)
    DECIMAL         reduce using rule 8 (statement -> if NEWLINE .)
    UDECIMAL        reduce using rule 8 (statement -> if NEWLINE .)
    MINUS           reduce using rule 8 (statement -> if NEWLINE .)
    $end            reduce using rule 8 (statement -> if NEWLINE .)
    RBRACKET        reduce using rule 8 (statement -> if NEWLINE .)


state 57

    (9) statement -> while NEWLINE .

    CONST           reduce using rule 9 (statement -> while NEWLINE .)
    MATRIX          reduce using rule 9 (statement -> while NEWLINE .)
    error           reduce using rule 9 (statement -> while NEWLINE .)
    SHARP           reduce using rule 9 (statement -> while NEWLINE .)
    TESTONCE        reduce using rule 9 (statement -> while NEWLINE .)
    TESTREP         reduce using rule 9 (statement -> while NEWLINE .)
    XRAY            reduce using rule 9 (statement -> while NEWLINE .)
    FUNC            reduce using rule 9 (statement -> while NEWLINE .)
    CALL            reduce using rule 9 (statement -> while NEWLINE .)
    VAR             reduce using rule 9 (statement -> while NEWLINE .)
    SIGNED          reduce using rule 9 (statement -> while NEWLINE .)
    UNSIGNED        reduce using rule 9 (statement -> while NEWLINE .)
    CELL            reduce using rule 9 (statement -> while NEWLINE .)
    LBRACKET        reduce using rule 9 (statement -> while NEWLINE .)
    TOP             reduce using rule 9 (statement -> while NEWLINE .)
    NTOP            reduce using rule 9 (statement -> while NEWLINE .)
    LEFT            reduce using rule 9 (statement -> while NEWLINE .)
    NLEFT           reduce using rule 9 (statement -> while NEWLINE .)
    RIGHT           reduce using rule 9 (statement -> while NEWLINE .)
    NRIGHT          reduce using rule 9 (statement -> while NEWLINE .)
    DOWN            reduce using rule 9 (statement -> while NEWLINE .)
    NDOWN           reduce using rule 9 (statement -> while NEWLINE .)
    BOTTOM          reduce using rule 9 (statement -> while NEWLINE .)
    DECIMAL         reduce using rule 9 (statement -> while NEWLINE .)
    UDECIMAL        reduce using rule 9 (statement -> while NEWLINE .)
    MINUS           reduce using rule 9 (statement -> while NEWLINE .)
    $end            reduce using rule 9 (statement -> while NEWLINE .)
    RBRACKET        reduce using rule 9 (statement -> while NEWLINE .)


state 58

    (10) statement -> robot SEMICOLON . NEWLINE
    (20) statement -> robot SEMICOLON .

    NEWLINE         shift and go to state 109
    CONST           reduce using rule 20 (statement -> robot SEMICOLON .)
    MATRIX          reduce using rule 20 (statement -> robot SEMICOLON .)
    error           reduce using rule 20 (statement -> robot SEMICOLON .)
    SHARP           reduce using rule 20 (statement -> robot SEMICOLON .)
    TESTONCE        reduce using rule 20 (statement -> robot SEMICOLON .)
    TESTREP         reduce using rule 20 (statement -> robot SEMICOLON .)
    XRAY            reduce using rule 20 (statement -> robot SEMICOLON .)
    FUNC            reduce using rule 20 (statement -> robot SEMICOLON .)
    CALL            reduce using rule 20 (statement -> robot SEMICOLON .)
    VAR             reduce using rule 20 (statement -> robot SEMICOLON .)
    SIGNED          reduce using rule 20 (statement -> robot SEMICOLON .)
    UNSIGNED        reduce using rule 20 (statement -> robot SEMICOLON .)
    CELL            reduce using rule 20 (statement -> robot SEMICOLON .)
    LBRACKET        reduce using rule 20 (statement -> robot SEMICOLON .)
    TOP             reduce using rule 20 (statement -> robot SEMICOLON .)
    NTOP            reduce using rule 20 (statement -> robot SEMICOLON .)
    LEFT            reduce using rule 20 (statement -> robot SEMICOLON .)
    NLEFT           reduce using rule 20 (statement -> robot SEMICOLON .)
    RIGHT           reduce using rule 20 (statement -> robot SEMICOLON .)
    NRIGHT          reduce using rule 20 (statement -> robot SEMICOLON .)
    DOWN            reduce using rule 20 (statement -> robot SEMICOLON .)
    NDOWN           reduce using rule 20 (statement -> robot SEMICOLON .)
    BOTTOM          reduce using rule 20 (statement -> robot SEMICOLON .)
    DECIMAL         reduce using rule 20 (statement -> robot SEMICOLON .)
    UDECIMAL        reduce using rule 20 (statement -> robot SEMICOLON .)
    MINUS           reduce using rule 20 (statement -> robot SEMICOLON .)
    $end            reduce using rule 20 (statement -> robot SEMICOLON .)
    RBRACKET        reduce using rule 20 (statement -> robot SEMICOLON .)


state 59

    (28) statement -> robot error . NEWLINE

    NEWLINE         shift and go to state 110


state 60

    (11) statement -> function NEWLINE .

    CONST           reduce using rule 11 (statement -> function NEWLINE .)
    MATRIX          reduce using rule 11 (statement -> function NEWLINE .)
    error           reduce using rule 11 (statement -> function NEWLINE .)
    SHARP           reduce using rule 11 (statement -> function NEWLINE .)
    TESTONCE        reduce using rule 11 (statement -> function NEWLINE .)
    TESTREP         reduce using rule 11 (statement -> function NEWLINE .)
    XRAY            reduce using rule 11 (statement -> function NEWLINE .)
    FUNC            reduce using rule 11 (statement -> function NEWLINE .)
    CALL            reduce using rule 11 (statement -> function NEWLINE .)
    VAR             reduce using rule 11 (statement -> function NEWLINE .)
    SIGNED          reduce using rule 11 (statement -> function NEWLINE .)
    UNSIGNED        reduce using rule 11 (statement -> function NEWLINE .)
    CELL            reduce using rule 11 (statement -> function NEWLINE .)
    LBRACKET        reduce using rule 11 (statement -> function NEWLINE .)
    TOP             reduce using rule 11 (statement -> function NEWLINE .)
    NTOP            reduce using rule 11 (statement -> function NEWLINE .)
    LEFT            reduce using rule 11 (statement -> function NEWLINE .)
    NLEFT           reduce using rule 11 (statement -> function NEWLINE .)
    RIGHT           reduce using rule 11 (statement -> function NEWLINE .)
    NRIGHT          reduce using rule 11 (statement -> function NEWLINE .)
    DOWN            reduce using rule 11 (statement -> function NEWLINE .)
    NDOWN           reduce using rule 11 (statement -> function NEWLINE .)
    BOTTOM          reduce using rule 11 (statement -> function NEWLINE .)
    DECIMAL         reduce using rule 11 (statement -> function NEWLINE .)
    UDECIMAL        reduce using rule 11 (statement -> function NEWLINE .)
    MINUS           reduce using rule 11 (statement -> function NEWLINE .)
    $end            reduce using rule 11 (statement -> function NEWLINE .)
    RBRACKET        reduce using rule 11 (statement -> function NEWLINE .)


state 61

    (12) statement -> function_call SEMICOLON . NEWLINE
    (22) statement -> function_call SEMICOLON .

    NEWLINE         shift and go to state 111
    CONST           reduce using rule 22 (statement -> function_call SEMICOLON .)
    MATRIX          reduce using rule 22 (statement -> function_call SEMICOLON .)
    error           reduce using rule 22 (statement -> function_call SEMICOLON .)
    SHARP           reduce using rule 22 (statement -> function_call SEMICOLON .)
    TESTONCE        reduce using rule 22 (statement -> function_call SEMICOLON .)
    TESTREP         reduce using rule 22 (statement -> function_call SEMICOLON .)
    XRAY            reduce using rule 22 (statement -> function_call SEMICOLON .)
    FUNC            reduce using rule 22 (statement -> function_call SEMICOLON .)
    CALL            reduce using rule 22 (statement -> function_call SEMICOLON .)
    VAR             reduce using rule 22 (statement -> function_call SEMICOLON .)
    SIGNED          reduce using rule 22 (statement -> function_call SEMICOLON .)
    UNSIGNED        reduce using rule 22 (statement -> function_call SEMICOLON .)
    CELL            reduce using rule 22 (statement -> function_call SEMICOLON .)
    LBRACKET        reduce using rule 22 (statement -> function_call SEMICOLON .)
    TOP             reduce using rule 22 (statement -> function_call SEMICOLON .)
    NTOP            reduce using rule 22 (statement -> function_call SEMICOLON .)
    LEFT            reduce using rule 22 (statement -> function_call SEMICOLON .)
    NLEFT           reduce using rule 22 (statement -> function_call SEMICOLON .)
    RIGHT           reduce using rule 22 (statement -> function_call SEMICOLON .)
    NRIGHT          reduce using rule 22 (statement -> function_call SEMICOLON .)
    DOWN            reduce using rule 22 (statement -> function_call SEMICOLON .)
    NDOWN           reduce using rule 22 (statement -> function_call SEMICOLON .)
    BOTTOM          reduce using rule 22 (statement -> function_call SEMICOLON .)
    DECIMAL         reduce using rule 22 (statement -> function_call SEMICOLON .)
    UDECIMAL        reduce using rule 22 (statement -> function_call SEMICOLON .)
    MINUS           reduce using rule 22 (statement -> function_call SEMICOLON .)
    $end            reduce using rule 22 (statement -> function_call SEMICOLON .)
    RBRACKET        reduce using rule 22 (statement -> function_call SEMICOLON .)


state 62

    (29) statement -> function_call error . NEWLINE

    NEWLINE         shift and go to state 112


state 63

    (13) statement -> function_return SEMICOLON . NEWLINE
    (23) statement -> function_return SEMICOLON .

    NEWLINE         shift and go to state 113
    CONST           reduce using rule 23 (statement -> function_return SEMICOLON .)
    MATRIX          reduce using rule 23 (statement -> function_return SEMICOLON .)
    error           reduce using rule 23 (statement -> function_return SEMICOLON .)
    SHARP           reduce using rule 23 (statement -> function_return SEMICOLON .)
    TESTONCE        reduce using rule 23 (statement -> function_return SEMICOLON .)
    TESTREP         reduce using rule 23 (statement -> function_return SEMICOLON .)
    XRAY            reduce using rule 23 (statement -> function_return SEMICOLON .)
    FUNC            reduce using rule 23 (statement -> function_return SEMICOLON .)
    CALL            reduce using rule 23 (statement -> function_return SEMICOLON .)
    VAR             reduce using rule 23 (statement -> function_return SEMICOLON .)
    SIGNED          reduce using rule 23 (statement -> function_return SEMICOLON .)
    UNSIGNED        reduce using rule 23 (statement -> function_return SEMICOLON .)
    CELL            reduce using rule 23 (statement -> function_return SEMICOLON .)
    LBRACKET        reduce using rule 23 (statement -> function_return SEMICOLON .)
    TOP             reduce using rule 23 (statement -> function_return SEMICOLON .)
    NTOP            reduce using rule 23 (statement -> function_return SEMICOLON .)
    LEFT            reduce using rule 23 (statement -> function_return SEMICOLON .)
    NLEFT           reduce using rule 23 (statement -> function_return SEMICOLON .)
    RIGHT           reduce using rule 23 (statement -> function_return SEMICOLON .)
    NRIGHT          reduce using rule 23 (statement -> function_return SEMICOLON .)
    DOWN            reduce using rule 23 (statement -> function_return SEMICOLON .)
    NDOWN           reduce using rule 23 (statement -> function_return SEMICOLON .)
    BOTTOM          reduce using rule 23 (statement -> function_return SEMICOLON .)
    DECIMAL         reduce using rule 23 (statement -> function_return SEMICOLON .)
    UDECIMAL        reduce using rule 23 (statement -> function_return SEMICOLON .)
    MINUS           reduce using rule 23 (statement -> function_return SEMICOLON .)
    $end            reduce using rule 23 (statement -> function_return SEMICOLON .)
    RBRACKET        reduce using rule 23 (statement -> function_return SEMICOLON .)


state 64

    (30) statement -> function_return error . NEWLINE

    NEWLINE         shift and go to state 114


state 65

    (36) declaration -> error VAR .
    (37) declaration -> error VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 36 (declaration -> error VAR .)
    error           reduce using rule 36 (declaration -> error VAR .)
    ASSIGNMENT      shift and go to state 115


state 66

    (31) declaration -> type VAR .
    (32) declaration -> type VAR . ASSIGNMENT expression

    SEMICOLON       reduce using rule 31 (declaration -> type VAR .)
    error           reduce using rule 31 (declaration -> type VAR .)
    ASSIGNMENT      shift and go to state 116


state 67

    (97) function_call -> VAR LBRACKET . vars RBRACKET error
    (98) function_call -> VAR LBRACKET . RBRACKET error
    (79) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (100) vars -> . VAR vars
    (101) vars -> . VAR
    (80) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    RBRACKET        shift and go to state 119
    VAR             shift and go to state 117
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    vars                           shift and go to state 118
    index                          shift and go to state 120
    expression                     shift and go to state 121
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 68

    (66) compare -> expression EQ . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 122
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 69

    (67) compare -> expression LESS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 123
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 70

    (68) compare -> expression GREATER . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 124
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 71

    (69) compare -> expression NOTEQ . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 125
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 72

    (70) math_expression -> expression PLUS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 126
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 73

    (71) math_expression -> expression MINUS . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 127
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 74

    (72) math_expression -> expression STAR . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 128
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 75

    (73) math_expression -> expression DIV . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 129
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 76

    (74) math_expression -> expression PROCENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 130
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 77

    (33) declaration -> CONST type . VAR ASSIGNMENT expression

    VAR             shift and go to state 131


state 78

    (38) declaration -> CONST error . VAR ASSIGNMENT expression

    VAR             shift and go to state 132


state 79

    (34) declaration -> MATRIX type . VAR
    (35) declaration -> MATRIX type . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 133


state 80

    (39) declaration -> MATRIX error . VAR
    (40) declaration -> MATRIX error . VAR LBRACKET expression COMMA expression RBRACKET

    VAR             shift and go to state 134


state 81

    (52) expression -> LBRACKET expression . RBRACKET
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 135
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 82

    (53) side -> LBRACKET directions . RBRACKET

    RBRACKET        shift and go to state 136


state 83

    (54) side -> LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 137


state 84

    (46) expression -> variable .

    RBRACKET        reduce using rule 46 (expression -> variable .)
    PLUS            reduce using rule 46 (expression -> variable .)
    MINUS           reduce using rule 46 (expression -> variable .)
    STAR            reduce using rule 46 (expression -> variable .)
    DIV             reduce using rule 46 (expression -> variable .)
    PROCENT         reduce using rule 46 (expression -> variable .)
    EQ              reduce using rule 46 (expression -> variable .)
    LESS            reduce using rule 46 (expression -> variable .)
    GREATER         reduce using rule 46 (expression -> variable .)
    NOTEQ           reduce using rule 46 (expression -> variable .)
    COMMA           reduce using rule 46 (expression -> variable .)
    SEMICOLON       reduce using rule 46 (expression -> variable .)
    error           reduce using rule 46 (expression -> variable .)


state 85

    (48) expression -> compare .

    RBRACKET        reduce using rule 48 (expression -> compare .)
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)
    COMMA           reduce using rule 48 (expression -> compare .)
    SEMICOLON       reduce using rule 48 (expression -> compare .)
    error           reduce using rule 48 (expression -> compare .)


state 86

    (49) expression -> robot .

    RBRACKET        reduce using rule 49 (expression -> robot .)
    PLUS            reduce using rule 49 (expression -> robot .)
    MINUS           reduce using rule 49 (expression -> robot .)
    STAR            reduce using rule 49 (expression -> robot .)
    DIV             reduce using rule 49 (expression -> robot .)
    PROCENT         reduce using rule 49 (expression -> robot .)
    EQ              reduce using rule 49 (expression -> robot .)
    LESS            reduce using rule 49 (expression -> robot .)
    GREATER         reduce using rule 49 (expression -> robot .)
    NOTEQ           reduce using rule 49 (expression -> robot .)
    COMMA           reduce using rule 49 (expression -> robot .)
    SEMICOLON       reduce using rule 49 (expression -> robot .)
    error           reduce using rule 49 (expression -> robot .)


state 87

    (50) expression -> prison .

    RBRACKET        reduce using rule 50 (expression -> prison .)
    PLUS            reduce using rule 50 (expression -> prison .)
    MINUS           reduce using rule 50 (expression -> prison .)
    STAR            reduce using rule 50 (expression -> prison .)
    DIV             reduce using rule 50 (expression -> prison .)
    PROCENT         reduce using rule 50 (expression -> prison .)
    EQ              reduce using rule 50 (expression -> prison .)
    LESS            reduce using rule 50 (expression -> prison .)
    GREATER         reduce using rule 50 (expression -> prison .)
    NOTEQ           reduce using rule 50 (expression -> prison .)
    COMMA           reduce using rule 50 (expression -> prison .)
    SEMICOLON       reduce using rule 50 (expression -> prison .)
    error           reduce using rule 50 (expression -> prison .)


state 88

    (51) expression -> function_call .

    RBRACKET        reduce using rule 51 (expression -> function_call .)
    PLUS            reduce using rule 51 (expression -> function_call .)
    MINUS           reduce using rule 51 (expression -> function_call .)
    STAR            reduce using rule 51 (expression -> function_call .)
    DIV             reduce using rule 51 (expression -> function_call .)
    PROCENT         reduce using rule 51 (expression -> function_call .)
    EQ              reduce using rule 51 (expression -> function_call .)
    LESS            reduce using rule 51 (expression -> function_call .)
    GREATER         reduce using rule 51 (expression -> function_call .)
    NOTEQ           reduce using rule 51 (expression -> function_call .)
    COMMA           reduce using rule 51 (expression -> function_call .)
    SEMICOLON       reduce using rule 51 (expression -> function_call .)
    error           reduce using rule 51 (expression -> function_call .)


state 89

    (55) directions -> direction . COMMA directions
    (56) directions -> direction .
    (90) robot -> direction .

  ! reduce/reduce conflict for RBRACKET resolved using rule 56 (directions -> direction .)
    COMMA           shift and go to state 138
    RBRACKET        reduce using rule 56 (directions -> direction .)
    PLUS            reduce using rule 90 (robot -> direction .)
    MINUS           reduce using rule 90 (robot -> direction .)
    STAR            reduce using rule 90 (robot -> direction .)
    DIV             reduce using rule 90 (robot -> direction .)
    PROCENT         reduce using rule 90 (robot -> direction .)
    EQ              reduce using rule 90 (robot -> direction .)
    LESS            reduce using rule 90 (robot -> direction .)
    GREATER         reduce using rule 90 (robot -> direction .)
    NOTEQ           reduce using rule 90 (robot -> direction .)

  ! RBRACKET        [ reduce using rule 90 (robot -> direction .) ]


state 90

    (78) variable -> VAR .
    (79) variable -> VAR . LBRACKET index COMMA index RBRACKET
    (97) function_call -> VAR . LBRACKET vars RBRACKET error
    (98) function_call -> VAR . LBRACKET RBRACKET error

    RBRACKET        reduce using rule 78 (variable -> VAR .)
    PLUS            reduce using rule 78 (variable -> VAR .)
    MINUS           reduce using rule 78 (variable -> VAR .)
    STAR            reduce using rule 78 (variable -> VAR .)
    DIV             reduce using rule 78 (variable -> VAR .)
    PROCENT         reduce using rule 78 (variable -> VAR .)
    EQ              reduce using rule 78 (variable -> VAR .)
    LESS            reduce using rule 78 (variable -> VAR .)
    GREATER         reduce using rule 78 (variable -> VAR .)
    NOTEQ           reduce using rule 78 (variable -> VAR .)
    SEMICOLON       reduce using rule 78 (variable -> VAR .)
    error           reduce using rule 78 (variable -> VAR .)
    COMMA           reduce using rule 78 (variable -> VAR .)
    LBRACKET        shift and go to state 139


state 91

    (82) assignment -> variable ASSIGNMENT . expression
    (83) assignment -> variable ASSIGNMENT . error
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    error           shift and go to state 141
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    variable                       shift and go to state 84
    expression                     shift and go to state 140
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 92

    (81) prison -> SHARP variable .

    SEMICOLON       reduce using rule 81 (prison -> SHARP variable .)
    error           reduce using rule 81 (prison -> SHARP variable .)
    EQ              reduce using rule 81 (prison -> SHARP variable .)
    LESS            reduce using rule 81 (prison -> SHARP variable .)
    GREATER         reduce using rule 81 (prison -> SHARP variable .)
    NOTEQ           reduce using rule 81 (prison -> SHARP variable .)
    PLUS            reduce using rule 81 (prison -> SHARP variable .)
    MINUS           reduce using rule 81 (prison -> SHARP variable .)
    STAR            reduce using rule 81 (prison -> SHARP variable .)
    DIV             reduce using rule 81 (prison -> SHARP variable .)
    PROCENT         reduce using rule 81 (prison -> SHARP variable .)
    RBRACKET        reduce using rule 81 (prison -> SHARP variable .)
    COMMA           reduce using rule 81 (prison -> SHARP variable .)


state 93

    (78) variable -> VAR .
    (79) variable -> VAR . LBRACKET index COMMA index RBRACKET

    SEMICOLON       reduce using rule 78 (variable -> VAR .)
    error           reduce using rule 78 (variable -> VAR .)
    EQ              reduce using rule 78 (variable -> VAR .)
    LESS            reduce using rule 78 (variable -> VAR .)
    GREATER         reduce using rule 78 (variable -> VAR .)
    NOTEQ           reduce using rule 78 (variable -> VAR .)
    PLUS            reduce using rule 78 (variable -> VAR .)
    MINUS           reduce using rule 78 (variable -> VAR .)
    STAR            reduce using rule 78 (variable -> VAR .)
    DIV             reduce using rule 78 (variable -> VAR .)
    PROCENT         reduce using rule 78 (variable -> VAR .)
    RBRACKET        reduce using rule 78 (variable -> VAR .)
    COMMA           reduce using rule 78 (variable -> VAR .)
    LBRACKET        shift and go to state 142


state 94

    (84) if -> TESTONCE LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> TESTONCE LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    math_expression                shift and go to state 143
    compare                        shift and go to state 144
    expression                     shift and go to state 145
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 95

    (86) if -> TESTONCE error .

    NEWLINE         reduce using rule 86 (if -> TESTONCE error .)
    CONST           reduce using rule 86 (if -> TESTONCE error .)
    MATRIX          reduce using rule 86 (if -> TESTONCE error .)
    error           reduce using rule 86 (if -> TESTONCE error .)
    SHARP           reduce using rule 86 (if -> TESTONCE error .)
    TESTONCE        reduce using rule 86 (if -> TESTONCE error .)
    TESTREP         reduce using rule 86 (if -> TESTONCE error .)
    XRAY            reduce using rule 86 (if -> TESTONCE error .)
    FUNC            reduce using rule 86 (if -> TESTONCE error .)
    CALL            reduce using rule 86 (if -> TESTONCE error .)
    VAR             reduce using rule 86 (if -> TESTONCE error .)
    SIGNED          reduce using rule 86 (if -> TESTONCE error .)
    UNSIGNED        reduce using rule 86 (if -> TESTONCE error .)
    CELL            reduce using rule 86 (if -> TESTONCE error .)
    LBRACKET        reduce using rule 86 (if -> TESTONCE error .)
    TOP             reduce using rule 86 (if -> TESTONCE error .)
    NTOP            reduce using rule 86 (if -> TESTONCE error .)
    LEFT            reduce using rule 86 (if -> TESTONCE error .)
    NLEFT           reduce using rule 86 (if -> TESTONCE error .)
    RIGHT           reduce using rule 86 (if -> TESTONCE error .)
    NRIGHT          reduce using rule 86 (if -> TESTONCE error .)
    DOWN            reduce using rule 86 (if -> TESTONCE error .)
    NDOWN           reduce using rule 86 (if -> TESTONCE error .)
    BOTTOM          reduce using rule 86 (if -> TESTONCE error .)
    DECIMAL         reduce using rule 86 (if -> TESTONCE error .)
    UDECIMAL        reduce using rule 86 (if -> TESTONCE error .)
    MINUS           reduce using rule 86 (if -> TESTONCE error .)
    $end            reduce using rule 86 (if -> TESTONCE error .)
    RBRACKET        reduce using rule 86 (if -> TESTONCE error .)


state 96

    (87) while -> TESTREP LBRACKET . math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> TESTREP LBRACKET . compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    math_expression                shift and go to state 146
    compare                        shift and go to state 147
    expression                     shift and go to state 145
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 97

    (89) while -> TESTREP error .

    NEWLINE         reduce using rule 89 (while -> TESTREP error .)
    CONST           reduce using rule 89 (while -> TESTREP error .)
    MATRIX          reduce using rule 89 (while -> TESTREP error .)
    error           reduce using rule 89 (while -> TESTREP error .)
    SHARP           reduce using rule 89 (while -> TESTREP error .)
    TESTONCE        reduce using rule 89 (while -> TESTREP error .)
    TESTREP         reduce using rule 89 (while -> TESTREP error .)
    XRAY            reduce using rule 89 (while -> TESTREP error .)
    FUNC            reduce using rule 89 (while -> TESTREP error .)
    CALL            reduce using rule 89 (while -> TESTREP error .)
    VAR             reduce using rule 89 (while -> TESTREP error .)
    SIGNED          reduce using rule 89 (while -> TESTREP error .)
    UNSIGNED        reduce using rule 89 (while -> TESTREP error .)
    CELL            reduce using rule 89 (while -> TESTREP error .)
    LBRACKET        reduce using rule 89 (while -> TESTREP error .)
    TOP             reduce using rule 89 (while -> TESTREP error .)
    NTOP            reduce using rule 89 (while -> TESTREP error .)
    LEFT            reduce using rule 89 (while -> TESTREP error .)
    NLEFT           reduce using rule 89 (while -> TESTREP error .)
    RIGHT           reduce using rule 89 (while -> TESTREP error .)
    NRIGHT          reduce using rule 89 (while -> TESTREP error .)
    DOWN            reduce using rule 89 (while -> TESTREP error .)
    NDOWN           reduce using rule 89 (while -> TESTREP error .)
    BOTTOM          reduce using rule 89 (while -> TESTREP error .)
    DECIMAL         reduce using rule 89 (while -> TESTREP error .)
    UDECIMAL        reduce using rule 89 (while -> TESTREP error .)
    MINUS           reduce using rule 89 (while -> TESTREP error .)
    $end            reduce using rule 89 (while -> TESTREP error .)
    RBRACKET        reduce using rule 89 (while -> TESTREP error .)


state 98

    (92) function -> FUNC VAR . LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> FUNC VAR . LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 148


state 99

    (95) function_call -> CALL VAR . LBRACKET vars RBRACKET
    (96) function_call -> CALL VAR . LBRACKET RBRACKET
    (99) function_call -> CALL VAR . LBRACKET error RBRACKET

    LBRACKET        shift and go to state 149


state 100

    (77) const -> MINUS DECIMAL .

    EQ              reduce using rule 77 (const -> MINUS DECIMAL .)
    LESS            reduce using rule 77 (const -> MINUS DECIMAL .)
    GREATER         reduce using rule 77 (const -> MINUS DECIMAL .)
    NOTEQ           reduce using rule 77 (const -> MINUS DECIMAL .)
    PLUS            reduce using rule 77 (const -> MINUS DECIMAL .)
    MINUS           reduce using rule 77 (const -> MINUS DECIMAL .)
    STAR            reduce using rule 77 (const -> MINUS DECIMAL .)
    DIV             reduce using rule 77 (const -> MINUS DECIMAL .)
    PROCENT         reduce using rule 77 (const -> MINUS DECIMAL .)
    RBRACKET        reduce using rule 77 (const -> MINUS DECIMAL .)
    COMMA           reduce using rule 77 (const -> MINUS DECIMAL .)
    SEMICOLON       reduce using rule 77 (const -> MINUS DECIMAL .)
    error           reduce using rule 77 (const -> MINUS DECIMAL .)


state 101

    (4) statement -> declaration SEMICOLON NEWLINE .

    CONST           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    error           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SHARP           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    XRAY            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    FUNC            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CALL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    VAR             reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    CELL            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    TOP             reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    NTOP            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    LEFT            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    DOWN            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    MINUS           reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 4 (statement -> declaration SEMICOLON NEWLINE .)


state 102

    (24) statement -> declaration error NEWLINE .

    CONST           reduce using rule 24 (statement -> declaration error NEWLINE .)
    MATRIX          reduce using rule 24 (statement -> declaration error NEWLINE .)
    error           reduce using rule 24 (statement -> declaration error NEWLINE .)
    SHARP           reduce using rule 24 (statement -> declaration error NEWLINE .)
    TESTONCE        reduce using rule 24 (statement -> declaration error NEWLINE .)
    TESTREP         reduce using rule 24 (statement -> declaration error NEWLINE .)
    XRAY            reduce using rule 24 (statement -> declaration error NEWLINE .)
    FUNC            reduce using rule 24 (statement -> declaration error NEWLINE .)
    CALL            reduce using rule 24 (statement -> declaration error NEWLINE .)
    VAR             reduce using rule 24 (statement -> declaration error NEWLINE .)
    SIGNED          reduce using rule 24 (statement -> declaration error NEWLINE .)
    UNSIGNED        reduce using rule 24 (statement -> declaration error NEWLINE .)
    CELL            reduce using rule 24 (statement -> declaration error NEWLINE .)
    LBRACKET        reduce using rule 24 (statement -> declaration error NEWLINE .)
    TOP             reduce using rule 24 (statement -> declaration error NEWLINE .)
    NTOP            reduce using rule 24 (statement -> declaration error NEWLINE .)
    LEFT            reduce using rule 24 (statement -> declaration error NEWLINE .)
    NLEFT           reduce using rule 24 (statement -> declaration error NEWLINE .)
    RIGHT           reduce using rule 24 (statement -> declaration error NEWLINE .)
    NRIGHT          reduce using rule 24 (statement -> declaration error NEWLINE .)
    DOWN            reduce using rule 24 (statement -> declaration error NEWLINE .)
    NDOWN           reduce using rule 24 (statement -> declaration error NEWLINE .)
    BOTTOM          reduce using rule 24 (statement -> declaration error NEWLINE .)
    DECIMAL         reduce using rule 24 (statement -> declaration error NEWLINE .)
    UDECIMAL        reduce using rule 24 (statement -> declaration error NEWLINE .)
    MINUS           reduce using rule 24 (statement -> declaration error NEWLINE .)
    $end            reduce using rule 24 (statement -> declaration error NEWLINE .)
    RBRACKET        reduce using rule 24 (statement -> declaration error NEWLINE .)


state 103

    (5) statement -> assignment SEMICOLON NEWLINE .

    CONST           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    error           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SHARP           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    XRAY            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    FUNC            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CALL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    VAR             reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    CELL            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    TOP             reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    NTOP            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    LEFT            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    DOWN            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    MINUS           reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 5 (statement -> assignment SEMICOLON NEWLINE .)


state 104

    (25) statement -> assignment error NEWLINE .

    CONST           reduce using rule 25 (statement -> assignment error NEWLINE .)
    MATRIX          reduce using rule 25 (statement -> assignment error NEWLINE .)
    error           reduce using rule 25 (statement -> assignment error NEWLINE .)
    SHARP           reduce using rule 25 (statement -> assignment error NEWLINE .)
    TESTONCE        reduce using rule 25 (statement -> assignment error NEWLINE .)
    TESTREP         reduce using rule 25 (statement -> assignment error NEWLINE .)
    XRAY            reduce using rule 25 (statement -> assignment error NEWLINE .)
    FUNC            reduce using rule 25 (statement -> assignment error NEWLINE .)
    CALL            reduce using rule 25 (statement -> assignment error NEWLINE .)
    VAR             reduce using rule 25 (statement -> assignment error NEWLINE .)
    SIGNED          reduce using rule 25 (statement -> assignment error NEWLINE .)
    UNSIGNED        reduce using rule 25 (statement -> assignment error NEWLINE .)
    CELL            reduce using rule 25 (statement -> assignment error NEWLINE .)
    LBRACKET        reduce using rule 25 (statement -> assignment error NEWLINE .)
    TOP             reduce using rule 25 (statement -> assignment error NEWLINE .)
    NTOP            reduce using rule 25 (statement -> assignment error NEWLINE .)
    LEFT            reduce using rule 25 (statement -> assignment error NEWLINE .)
    NLEFT           reduce using rule 25 (statement -> assignment error NEWLINE .)
    RIGHT           reduce using rule 25 (statement -> assignment error NEWLINE .)
    NRIGHT          reduce using rule 25 (statement -> assignment error NEWLINE .)
    DOWN            reduce using rule 25 (statement -> assignment error NEWLINE .)
    NDOWN           reduce using rule 25 (statement -> assignment error NEWLINE .)
    BOTTOM          reduce using rule 25 (statement -> assignment error NEWLINE .)
    DECIMAL         reduce using rule 25 (statement -> assignment error NEWLINE .)
    UDECIMAL        reduce using rule 25 (statement -> assignment error NEWLINE .)
    MINUS           reduce using rule 25 (statement -> assignment error NEWLINE .)
    $end            reduce using rule 25 (statement -> assignment error NEWLINE .)
    RBRACKET        reduce using rule 25 (statement -> assignment error NEWLINE .)


state 105

    (6) statement -> compare SEMICOLON NEWLINE .

    CONST           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    error           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SHARP           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    XRAY            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    FUNC            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CALL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    VAR             reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    CELL            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    TOP             reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    NTOP            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    LEFT            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    DOWN            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    MINUS           reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    $end            reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 6 (statement -> compare SEMICOLON NEWLINE .)


state 106

    (26) statement -> compare error NEWLINE .

    CONST           reduce using rule 26 (statement -> compare error NEWLINE .)
    MATRIX          reduce using rule 26 (statement -> compare error NEWLINE .)
    error           reduce using rule 26 (statement -> compare error NEWLINE .)
    SHARP           reduce using rule 26 (statement -> compare error NEWLINE .)
    TESTONCE        reduce using rule 26 (statement -> compare error NEWLINE .)
    TESTREP         reduce using rule 26 (statement -> compare error NEWLINE .)
    XRAY            reduce using rule 26 (statement -> compare error NEWLINE .)
    FUNC            reduce using rule 26 (statement -> compare error NEWLINE .)
    CALL            reduce using rule 26 (statement -> compare error NEWLINE .)
    VAR             reduce using rule 26 (statement -> compare error NEWLINE .)
    SIGNED          reduce using rule 26 (statement -> compare error NEWLINE .)
    UNSIGNED        reduce using rule 26 (statement -> compare error NEWLINE .)
    CELL            reduce using rule 26 (statement -> compare error NEWLINE .)
    LBRACKET        reduce using rule 26 (statement -> compare error NEWLINE .)
    TOP             reduce using rule 26 (statement -> compare error NEWLINE .)
    NTOP            reduce using rule 26 (statement -> compare error NEWLINE .)
    LEFT            reduce using rule 26 (statement -> compare error NEWLINE .)
    NLEFT           reduce using rule 26 (statement -> compare error NEWLINE .)
    RIGHT           reduce using rule 26 (statement -> compare error NEWLINE .)
    NRIGHT          reduce using rule 26 (statement -> compare error NEWLINE .)
    DOWN            reduce using rule 26 (statement -> compare error NEWLINE .)
    NDOWN           reduce using rule 26 (statement -> compare error NEWLINE .)
    BOTTOM          reduce using rule 26 (statement -> compare error NEWLINE .)
    DECIMAL         reduce using rule 26 (statement -> compare error NEWLINE .)
    UDECIMAL        reduce using rule 26 (statement -> compare error NEWLINE .)
    MINUS           reduce using rule 26 (statement -> compare error NEWLINE .)
    $end            reduce using rule 26 (statement -> compare error NEWLINE .)
    RBRACKET        reduce using rule 26 (statement -> compare error NEWLINE .)


state 107

    (7) statement -> prison SEMICOLON NEWLINE .

    CONST           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    error           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SHARP           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    XRAY            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    FUNC            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CALL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    VAR             reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    CELL            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    TOP             reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    NTOP            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    LEFT            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    DOWN            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    MINUS           reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    $end            reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 7 (statement -> prison SEMICOLON NEWLINE .)


state 108

    (27) statement -> prison error NEWLINE .

    CONST           reduce using rule 27 (statement -> prison error NEWLINE .)
    MATRIX          reduce using rule 27 (statement -> prison error NEWLINE .)
    error           reduce using rule 27 (statement -> prison error NEWLINE .)
    SHARP           reduce using rule 27 (statement -> prison error NEWLINE .)
    TESTONCE        reduce using rule 27 (statement -> prison error NEWLINE .)
    TESTREP         reduce using rule 27 (statement -> prison error NEWLINE .)
    XRAY            reduce using rule 27 (statement -> prison error NEWLINE .)
    FUNC            reduce using rule 27 (statement -> prison error NEWLINE .)
    CALL            reduce using rule 27 (statement -> prison error NEWLINE .)
    VAR             reduce using rule 27 (statement -> prison error NEWLINE .)
    SIGNED          reduce using rule 27 (statement -> prison error NEWLINE .)
    UNSIGNED        reduce using rule 27 (statement -> prison error NEWLINE .)
    CELL            reduce using rule 27 (statement -> prison error NEWLINE .)
    LBRACKET        reduce using rule 27 (statement -> prison error NEWLINE .)
    TOP             reduce using rule 27 (statement -> prison error NEWLINE .)
    NTOP            reduce using rule 27 (statement -> prison error NEWLINE .)
    LEFT            reduce using rule 27 (statement -> prison error NEWLINE .)
    NLEFT           reduce using rule 27 (statement -> prison error NEWLINE .)
    RIGHT           reduce using rule 27 (statement -> prison error NEWLINE .)
    NRIGHT          reduce using rule 27 (statement -> prison error NEWLINE .)
    DOWN            reduce using rule 27 (statement -> prison error NEWLINE .)
    NDOWN           reduce using rule 27 (statement -> prison error NEWLINE .)
    BOTTOM          reduce using rule 27 (statement -> prison error NEWLINE .)
    DECIMAL         reduce using rule 27 (statement -> prison error NEWLINE .)
    UDECIMAL        reduce using rule 27 (statement -> prison error NEWLINE .)
    MINUS           reduce using rule 27 (statement -> prison error NEWLINE .)
    $end            reduce using rule 27 (statement -> prison error NEWLINE .)
    RBRACKET        reduce using rule 27 (statement -> prison error NEWLINE .)


state 109

    (10) statement -> robot SEMICOLON NEWLINE .

    CONST           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    error           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    SHARP           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    XRAY            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    FUNC            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    CALL            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    VAR             reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    CELL            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    TOP             reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    NTOP            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    LEFT            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    DOWN            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    MINUS           reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    $end            reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 10 (statement -> robot SEMICOLON NEWLINE .)


state 110

    (28) statement -> robot error NEWLINE .

    CONST           reduce using rule 28 (statement -> robot error NEWLINE .)
    MATRIX          reduce using rule 28 (statement -> robot error NEWLINE .)
    error           reduce using rule 28 (statement -> robot error NEWLINE .)
    SHARP           reduce using rule 28 (statement -> robot error NEWLINE .)
    TESTONCE        reduce using rule 28 (statement -> robot error NEWLINE .)
    TESTREP         reduce using rule 28 (statement -> robot error NEWLINE .)
    XRAY            reduce using rule 28 (statement -> robot error NEWLINE .)
    FUNC            reduce using rule 28 (statement -> robot error NEWLINE .)
    CALL            reduce using rule 28 (statement -> robot error NEWLINE .)
    VAR             reduce using rule 28 (statement -> robot error NEWLINE .)
    SIGNED          reduce using rule 28 (statement -> robot error NEWLINE .)
    UNSIGNED        reduce using rule 28 (statement -> robot error NEWLINE .)
    CELL            reduce using rule 28 (statement -> robot error NEWLINE .)
    LBRACKET        reduce using rule 28 (statement -> robot error NEWLINE .)
    TOP             reduce using rule 28 (statement -> robot error NEWLINE .)
    NTOP            reduce using rule 28 (statement -> robot error NEWLINE .)
    LEFT            reduce using rule 28 (statement -> robot error NEWLINE .)
    NLEFT           reduce using rule 28 (statement -> robot error NEWLINE .)
    RIGHT           reduce using rule 28 (statement -> robot error NEWLINE .)
    NRIGHT          reduce using rule 28 (statement -> robot error NEWLINE .)
    DOWN            reduce using rule 28 (statement -> robot error NEWLINE .)
    NDOWN           reduce using rule 28 (statement -> robot error NEWLINE .)
    BOTTOM          reduce using rule 28 (statement -> robot error NEWLINE .)
    DECIMAL         reduce using rule 28 (statement -> robot error NEWLINE .)
    UDECIMAL        reduce using rule 28 (statement -> robot error NEWLINE .)
    MINUS           reduce using rule 28 (statement -> robot error NEWLINE .)
    $end            reduce using rule 28 (statement -> robot error NEWLINE .)
    RBRACKET        reduce using rule 28 (statement -> robot error NEWLINE .)


state 111

    (12) statement -> function_call SEMICOLON NEWLINE .

    CONST           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    error           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SHARP           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    XRAY            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    FUNC            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CALL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    VAR             reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    CELL            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    TOP             reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    NTOP            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    LEFT            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    DOWN            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    MINUS           reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    $end            reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 12 (statement -> function_call SEMICOLON NEWLINE .)


state 112

    (29) statement -> function_call error NEWLINE .

    CONST           reduce using rule 29 (statement -> function_call error NEWLINE .)
    MATRIX          reduce using rule 29 (statement -> function_call error NEWLINE .)
    error           reduce using rule 29 (statement -> function_call error NEWLINE .)
    SHARP           reduce using rule 29 (statement -> function_call error NEWLINE .)
    TESTONCE        reduce using rule 29 (statement -> function_call error NEWLINE .)
    TESTREP         reduce using rule 29 (statement -> function_call error NEWLINE .)
    XRAY            reduce using rule 29 (statement -> function_call error NEWLINE .)
    FUNC            reduce using rule 29 (statement -> function_call error NEWLINE .)
    CALL            reduce using rule 29 (statement -> function_call error NEWLINE .)
    VAR             reduce using rule 29 (statement -> function_call error NEWLINE .)
    SIGNED          reduce using rule 29 (statement -> function_call error NEWLINE .)
    UNSIGNED        reduce using rule 29 (statement -> function_call error NEWLINE .)
    CELL            reduce using rule 29 (statement -> function_call error NEWLINE .)
    LBRACKET        reduce using rule 29 (statement -> function_call error NEWLINE .)
    TOP             reduce using rule 29 (statement -> function_call error NEWLINE .)
    NTOP            reduce using rule 29 (statement -> function_call error NEWLINE .)
    LEFT            reduce using rule 29 (statement -> function_call error NEWLINE .)
    NLEFT           reduce using rule 29 (statement -> function_call error NEWLINE .)
    RIGHT           reduce using rule 29 (statement -> function_call error NEWLINE .)
    NRIGHT          reduce using rule 29 (statement -> function_call error NEWLINE .)
    DOWN            reduce using rule 29 (statement -> function_call error NEWLINE .)
    NDOWN           reduce using rule 29 (statement -> function_call error NEWLINE .)
    BOTTOM          reduce using rule 29 (statement -> function_call error NEWLINE .)
    DECIMAL         reduce using rule 29 (statement -> function_call error NEWLINE .)
    UDECIMAL        reduce using rule 29 (statement -> function_call error NEWLINE .)
    MINUS           reduce using rule 29 (statement -> function_call error NEWLINE .)
    $end            reduce using rule 29 (statement -> function_call error NEWLINE .)
    RBRACKET        reduce using rule 29 (statement -> function_call error NEWLINE .)


state 113

    (13) statement -> function_return SEMICOLON NEWLINE .

    CONST           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    MATRIX          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    error           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SHARP           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTONCE        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TESTREP         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    XRAY            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    FUNC            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CALL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    VAR             reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    SIGNED          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    UNSIGNED        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    CELL            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    LBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    TOP             reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    NTOP            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    LEFT            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    NLEFT           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    RIGHT           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    NRIGHT          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    DOWN            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    NDOWN           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    BOTTOM          reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    DECIMAL         reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    UDECIMAL        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    MINUS           reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    $end            reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)
    RBRACKET        reduce using rule 13 (statement -> function_return SEMICOLON NEWLINE .)


state 114

    (30) statement -> function_return error NEWLINE .

    CONST           reduce using rule 30 (statement -> function_return error NEWLINE .)
    MATRIX          reduce using rule 30 (statement -> function_return error NEWLINE .)
    error           reduce using rule 30 (statement -> function_return error NEWLINE .)
    SHARP           reduce using rule 30 (statement -> function_return error NEWLINE .)
    TESTONCE        reduce using rule 30 (statement -> function_return error NEWLINE .)
    TESTREP         reduce using rule 30 (statement -> function_return error NEWLINE .)
    XRAY            reduce using rule 30 (statement -> function_return error NEWLINE .)
    FUNC            reduce using rule 30 (statement -> function_return error NEWLINE .)
    CALL            reduce using rule 30 (statement -> function_return error NEWLINE .)
    VAR             reduce using rule 30 (statement -> function_return error NEWLINE .)
    SIGNED          reduce using rule 30 (statement -> function_return error NEWLINE .)
    UNSIGNED        reduce using rule 30 (statement -> function_return error NEWLINE .)
    CELL            reduce using rule 30 (statement -> function_return error NEWLINE .)
    LBRACKET        reduce using rule 30 (statement -> function_return error NEWLINE .)
    TOP             reduce using rule 30 (statement -> function_return error NEWLINE .)
    NTOP            reduce using rule 30 (statement -> function_return error NEWLINE .)
    LEFT            reduce using rule 30 (statement -> function_return error NEWLINE .)
    NLEFT           reduce using rule 30 (statement -> function_return error NEWLINE .)
    RIGHT           reduce using rule 30 (statement -> function_return error NEWLINE .)
    NRIGHT          reduce using rule 30 (statement -> function_return error NEWLINE .)
    DOWN            reduce using rule 30 (statement -> function_return error NEWLINE .)
    NDOWN           reduce using rule 30 (statement -> function_return error NEWLINE .)
    BOTTOM          reduce using rule 30 (statement -> function_return error NEWLINE .)
    DECIMAL         reduce using rule 30 (statement -> function_return error NEWLINE .)
    UDECIMAL        reduce using rule 30 (statement -> function_return error NEWLINE .)
    MINUS           reduce using rule 30 (statement -> function_return error NEWLINE .)
    $end            reduce using rule 30 (statement -> function_return error NEWLINE .)
    RBRACKET        reduce using rule 30 (statement -> function_return error NEWLINE .)


state 115

    (37) declaration -> error VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 150
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 116

    (32) declaration -> type VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 151
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 117

    (100) vars -> VAR . vars
    (101) vars -> VAR .
    (78) variable -> VAR .
    (79) variable -> VAR . LBRACKET index COMMA index RBRACKET
    (97) function_call -> VAR . LBRACKET vars RBRACKET error
    (98) function_call -> VAR . LBRACKET RBRACKET error
    (100) vars -> . VAR vars
    (101) vars -> . VAR

    RBRACKET        reduce using rule 101 (vars -> VAR .)
    PLUS            reduce using rule 78 (variable -> VAR .)
    MINUS           reduce using rule 78 (variable -> VAR .)
    STAR            reduce using rule 78 (variable -> VAR .)
    DIV             reduce using rule 78 (variable -> VAR .)
    PROCENT         reduce using rule 78 (variable -> VAR .)
    EQ              reduce using rule 78 (variable -> VAR .)
    LESS            reduce using rule 78 (variable -> VAR .)
    GREATER         reduce using rule 78 (variable -> VAR .)
    NOTEQ           reduce using rule 78 (variable -> VAR .)
    COMMA           reduce using rule 78 (variable -> VAR .)
    LBRACKET        shift and go to state 139
    VAR             shift and go to state 152

    vars                           shift and go to state 153

state 118

    (97) function_call -> VAR LBRACKET vars . RBRACKET error

    RBRACKET        shift and go to state 154


state 119

    (98) function_call -> VAR LBRACKET RBRACKET . error

    error           shift and go to state 155


state 120

    (79) variable -> VAR LBRACKET index . COMMA index RBRACKET

    COMMA           shift and go to state 156


state 121

    (80) index -> expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    COMMA           reduce using rule 80 (index -> expression .)
    RBRACKET        reduce using rule 80 (index -> expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 122

    (66) compare -> expression EQ expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 66 (compare -> expression EQ expression .)
    error           reduce using rule 66 (compare -> expression EQ expression .)
    EQ              reduce using rule 66 (compare -> expression EQ expression .)
    LESS            reduce using rule 66 (compare -> expression EQ expression .)
    GREATER         reduce using rule 66 (compare -> expression EQ expression .)
    NOTEQ           reduce using rule 66 (compare -> expression EQ expression .)
    PLUS            reduce using rule 66 (compare -> expression EQ expression .)
    MINUS           reduce using rule 66 (compare -> expression EQ expression .)
    STAR            reduce using rule 66 (compare -> expression EQ expression .)
    DIV             reduce using rule 66 (compare -> expression EQ expression .)
    PROCENT         reduce using rule 66 (compare -> expression EQ expression .)
    RBRACKET        reduce using rule 66 (compare -> expression EQ expression .)
    COMMA           reduce using rule 66 (compare -> expression EQ expression .)

  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! NOTEQ           [ shift and go to state 71 ]


state 123

    (67) compare -> expression LESS expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 67 (compare -> expression LESS expression .)
    error           reduce using rule 67 (compare -> expression LESS expression .)
    EQ              reduce using rule 67 (compare -> expression LESS expression .)
    LESS            reduce using rule 67 (compare -> expression LESS expression .)
    GREATER         reduce using rule 67 (compare -> expression LESS expression .)
    NOTEQ           reduce using rule 67 (compare -> expression LESS expression .)
    PLUS            reduce using rule 67 (compare -> expression LESS expression .)
    MINUS           reduce using rule 67 (compare -> expression LESS expression .)
    STAR            reduce using rule 67 (compare -> expression LESS expression .)
    DIV             reduce using rule 67 (compare -> expression LESS expression .)
    PROCENT         reduce using rule 67 (compare -> expression LESS expression .)
    RBRACKET        reduce using rule 67 (compare -> expression LESS expression .)
    COMMA           reduce using rule 67 (compare -> expression LESS expression .)

  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! NOTEQ           [ shift and go to state 71 ]


state 124

    (68) compare -> expression GREATER expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 68 (compare -> expression GREATER expression .)
    error           reduce using rule 68 (compare -> expression GREATER expression .)
    EQ              reduce using rule 68 (compare -> expression GREATER expression .)
    LESS            reduce using rule 68 (compare -> expression GREATER expression .)
    GREATER         reduce using rule 68 (compare -> expression GREATER expression .)
    NOTEQ           reduce using rule 68 (compare -> expression GREATER expression .)
    PLUS            reduce using rule 68 (compare -> expression GREATER expression .)
    MINUS           reduce using rule 68 (compare -> expression GREATER expression .)
    STAR            reduce using rule 68 (compare -> expression GREATER expression .)
    DIV             reduce using rule 68 (compare -> expression GREATER expression .)
    PROCENT         reduce using rule 68 (compare -> expression GREATER expression .)
    RBRACKET        reduce using rule 68 (compare -> expression GREATER expression .)
    COMMA           reduce using rule 68 (compare -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! NOTEQ           [ shift and go to state 71 ]


state 125

    (69) compare -> expression NOTEQ expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 69 (compare -> expression NOTEQ expression .)
    error           reduce using rule 69 (compare -> expression NOTEQ expression .)
    EQ              reduce using rule 69 (compare -> expression NOTEQ expression .)
    LESS            reduce using rule 69 (compare -> expression NOTEQ expression .)
    GREATER         reduce using rule 69 (compare -> expression NOTEQ expression .)
    NOTEQ           reduce using rule 69 (compare -> expression NOTEQ expression .)
    PLUS            reduce using rule 69 (compare -> expression NOTEQ expression .)
    MINUS           reduce using rule 69 (compare -> expression NOTEQ expression .)
    STAR            reduce using rule 69 (compare -> expression NOTEQ expression .)
    DIV             reduce using rule 69 (compare -> expression NOTEQ expression .)
    PROCENT         reduce using rule 69 (compare -> expression NOTEQ expression .)
    RBRACKET        reduce using rule 69 (compare -> expression NOTEQ expression .)
    COMMA           reduce using rule 69 (compare -> expression NOTEQ expression .)

  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! NOTEQ           [ shift and go to state 71 ]


state 126

    (70) math_expression -> expression PLUS expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 70 (math_expression -> expression PLUS expression .)
    COMMA           reduce using rule 70 (math_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 70 (math_expression -> expression PLUS expression .)
    error           reduce using rule 70 (math_expression -> expression PLUS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71

  ! EQ              [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! NOTEQ           [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! STAR            [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]
  ! PROCENT         [ reduce using rule 70 (math_expression -> expression PLUS expression .) ]


state 127

    (71) math_expression -> expression MINUS expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PROCENT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    RBRACKET        reduce using rule 71 (math_expression -> expression MINUS expression .)
    COMMA           reduce using rule 71 (math_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 71 (math_expression -> expression MINUS expression .)
    error           reduce using rule 71 (math_expression -> expression MINUS expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71

  ! EQ              [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! STAR            [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]
  ! PROCENT         [ reduce using rule 71 (math_expression -> expression MINUS expression .) ]


state 128

    (72) math_expression -> expression STAR expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    PLUS            reduce using rule 72 (math_expression -> expression STAR expression .)
    MINUS           reduce using rule 72 (math_expression -> expression STAR expression .)
    STAR            reduce using rule 72 (math_expression -> expression STAR expression .)
    DIV             reduce using rule 72 (math_expression -> expression STAR expression .)
    PROCENT         reduce using rule 72 (math_expression -> expression STAR expression .)
    RBRACKET        reduce using rule 72 (math_expression -> expression STAR expression .)
    COMMA           reduce using rule 72 (math_expression -> expression STAR expression .)
    SEMICOLON       reduce using rule 72 (math_expression -> expression STAR expression .)
    error           reduce using rule 72 (math_expression -> expression STAR expression .)
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71

  ! EQ              [ reduce using rule 72 (math_expression -> expression STAR expression .) ]
  ! LESS            [ reduce using rule 72 (math_expression -> expression STAR expression .) ]
  ! GREATER         [ reduce using rule 72 (math_expression -> expression STAR expression .) ]
  ! NOTEQ           [ reduce using rule 72 (math_expression -> expression STAR expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]


state 129

    (73) math_expression -> expression DIV expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    PLUS            reduce using rule 73 (math_expression -> expression DIV expression .)
    MINUS           reduce using rule 73 (math_expression -> expression DIV expression .)
    STAR            reduce using rule 73 (math_expression -> expression DIV expression .)
    DIV             reduce using rule 73 (math_expression -> expression DIV expression .)
    PROCENT         reduce using rule 73 (math_expression -> expression DIV expression .)
    RBRACKET        reduce using rule 73 (math_expression -> expression DIV expression .)
    COMMA           reduce using rule 73 (math_expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 73 (math_expression -> expression DIV expression .)
    error           reduce using rule 73 (math_expression -> expression DIV expression .)
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71

  ! EQ              [ reduce using rule 73 (math_expression -> expression DIV expression .) ]
  ! LESS            [ reduce using rule 73 (math_expression -> expression DIV expression .) ]
  ! GREATER         [ reduce using rule 73 (math_expression -> expression DIV expression .) ]
  ! NOTEQ           [ reduce using rule 73 (math_expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]


state 130

    (74) math_expression -> expression PROCENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    PLUS            reduce using rule 74 (math_expression -> expression PROCENT expression .)
    MINUS           reduce using rule 74 (math_expression -> expression PROCENT expression .)
    STAR            reduce using rule 74 (math_expression -> expression PROCENT expression .)
    DIV             reduce using rule 74 (math_expression -> expression PROCENT expression .)
    PROCENT         reduce using rule 74 (math_expression -> expression PROCENT expression .)
    RBRACKET        reduce using rule 74 (math_expression -> expression PROCENT expression .)
    COMMA           reduce using rule 74 (math_expression -> expression PROCENT expression .)
    SEMICOLON       reduce using rule 74 (math_expression -> expression PROCENT expression .)
    error           reduce using rule 74 (math_expression -> expression PROCENT expression .)
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71

  ! EQ              [ reduce using rule 74 (math_expression -> expression PROCENT expression .) ]
  ! LESS            [ reduce using rule 74 (math_expression -> expression PROCENT expression .) ]
  ! GREATER         [ reduce using rule 74 (math_expression -> expression PROCENT expression .) ]
  ! NOTEQ           [ reduce using rule 74 (math_expression -> expression PROCENT expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! STAR            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! PROCENT         [ shift and go to state 76 ]


state 131

    (33) declaration -> CONST type VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 157


state 132

    (38) declaration -> CONST error VAR . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 158


state 133

    (34) declaration -> MATRIX type VAR .
    (35) declaration -> MATRIX type VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 34 (declaration -> MATRIX type VAR .)
    error           reduce using rule 34 (declaration -> MATRIX type VAR .)
    LBRACKET        shift and go to state 159


state 134

    (39) declaration -> MATRIX error VAR .
    (40) declaration -> MATRIX error VAR . LBRACKET expression COMMA expression RBRACKET

    SEMICOLON       reduce using rule 39 (declaration -> MATRIX error VAR .)
    error           reduce using rule 39 (declaration -> MATRIX error VAR .)
    LBRACKET        shift and go to state 160


state 135

    (52) expression -> LBRACKET expression RBRACKET .

    EQ              reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    LESS            reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    STAR            reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    DIV             reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    PROCENT         reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)
    error           reduce using rule 52 (expression -> LBRACKET expression RBRACKET .)


state 136

    (53) side -> LBRACKET directions RBRACKET .

    EQ              reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    LESS            reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    GREATER         reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    NOTEQ           reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    PLUS            reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    MINUS           reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    STAR            reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    DIV             reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    PROCENT         reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    RBRACKET        reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    COMMA           reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    SEMICOLON       reduce using rule 53 (side -> LBRACKET directions RBRACKET .)
    error           reduce using rule 53 (side -> LBRACKET directions RBRACKET .)


state 137

    (54) side -> LBRACKET error RBRACKET .

    EQ              reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    LESS            reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    GREATER         reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    NOTEQ           reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    PLUS            reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    MINUS           reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    STAR            reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    DIV             reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    PROCENT         reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    COMMA           reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    SEMICOLON       reduce using rule 54 (side -> LBRACKET error RBRACKET .)
    error           reduce using rule 54 (side -> LBRACKET error RBRACKET .)


state 138

    (55) directions -> direction COMMA . directions
    (55) directions -> . direction COMMA directions
    (56) directions -> . direction
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    direction                      shift and go to state 161
    directions                     shift and go to state 162

state 139

    (79) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (97) function_call -> VAR LBRACKET . vars RBRACKET error
    (98) function_call -> VAR LBRACKET . RBRACKET error
    (80) index -> . expression
    (100) vars -> . VAR vars
    (101) vars -> . VAR
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    RBRACKET        shift and go to state 119
    VAR             shift and go to state 117
    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    index                          shift and go to state 120
    vars                           shift and go to state 118
    expression                     shift and go to state 121
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 140

    (82) assignment -> variable ASSIGNMENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 82 (assignment -> variable ASSIGNMENT expression .)
    error           reduce using rule 82 (assignment -> variable ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 141

    (83) assignment -> variable ASSIGNMENT error .

    SEMICOLON       reduce using rule 83 (assignment -> variable ASSIGNMENT error .)
    error           reduce using rule 83 (assignment -> variable ASSIGNMENT error .)


state 142

    (79) variable -> VAR LBRACKET . index COMMA index RBRACKET
    (80) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    index                          shift and go to state 120
    expression                     shift and go to state 121
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 143

    (84) if -> TESTONCE LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (44) expression -> math_expression .

    RBRACKET        shift and go to state 163
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)


state 144

    (85) if -> TESTONCE LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (48) expression -> compare .

    RBRACKET        shift and go to state 164
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)


state 145

    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 146

    (87) while -> TESTREP LBRACKET math_expression . RBRACKET LBRACKET NEWLINE state RBRACKET
    (44) expression -> math_expression .

    RBRACKET        shift and go to state 165
    PLUS            reduce using rule 44 (expression -> math_expression .)
    MINUS           reduce using rule 44 (expression -> math_expression .)
    STAR            reduce using rule 44 (expression -> math_expression .)
    DIV             reduce using rule 44 (expression -> math_expression .)
    PROCENT         reduce using rule 44 (expression -> math_expression .)
    EQ              reduce using rule 44 (expression -> math_expression .)
    LESS            reduce using rule 44 (expression -> math_expression .)
    GREATER         reduce using rule 44 (expression -> math_expression .)
    NOTEQ           reduce using rule 44 (expression -> math_expression .)


state 147

    (88) while -> TESTREP LBRACKET compare . RBRACKET LBRACKET NEWLINE state RBRACKET
    (48) expression -> compare .

    RBRACKET        shift and go to state 166
    PLUS            reduce using rule 48 (expression -> compare .)
    MINUS           reduce using rule 48 (expression -> compare .)
    STAR            reduce using rule 48 (expression -> compare .)
    DIV             reduce using rule 48 (expression -> compare .)
    PROCENT         reduce using rule 48 (expression -> compare .)
    EQ              reduce using rule 48 (expression -> compare .)
    LESS            reduce using rule 48 (expression -> compare .)
    GREATER         reduce using rule 48 (expression -> compare .)
    NOTEQ           reduce using rule 48 (expression -> compare .)


state 148

    (92) function -> FUNC VAR LBRACKET . parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> FUNC VAR LBRACKET . RBRACKET LBRACKET NEWLINE state RBRACKET
    (102) parameters -> . type VAR COMMA parameters
    (103) parameters -> . type VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    RBRACKET        shift and go to state 168
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32

    parameters                     shift and go to state 167
    type                           shift and go to state 169

state 149

    (95) function_call -> CALL VAR LBRACKET . vars RBRACKET
    (96) function_call -> CALL VAR LBRACKET . RBRACKET
    (99) function_call -> CALL VAR LBRACKET . error RBRACKET
    (100) vars -> . VAR vars
    (101) vars -> . VAR

    RBRACKET        shift and go to state 171
    error           shift and go to state 172
    VAR             shift and go to state 152

    vars                           shift and go to state 170

state 150

    (37) declaration -> error VAR ASSIGNMENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 37 (declaration -> error VAR ASSIGNMENT expression .)
    error           reduce using rule 37 (declaration -> error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 151

    (32) declaration -> type VAR ASSIGNMENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 32 (declaration -> type VAR ASSIGNMENT expression .)
    error           reduce using rule 32 (declaration -> type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 152

    (100) vars -> VAR . vars
    (101) vars -> VAR .
    (100) vars -> . VAR vars
    (101) vars -> . VAR

    RBRACKET        reduce using rule 101 (vars -> VAR .)
    VAR             shift and go to state 152

    vars                           shift and go to state 153

state 153

    (100) vars -> VAR vars .

    RBRACKET        reduce using rule 100 (vars -> VAR vars .)


state 154

    (97) function_call -> VAR LBRACKET vars RBRACKET . error

    error           shift and go to state 173


state 155

    (98) function_call -> VAR LBRACKET RBRACKET error .

    SEMICOLON       reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    error           reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    EQ              reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    LESS            reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    GREATER         reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    NOTEQ           reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    PLUS            reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    MINUS           reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    STAR            reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    DIV             reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    PROCENT         reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    RBRACKET        reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)
    COMMA           reduce using rule 98 (function_call -> VAR LBRACKET RBRACKET error .)


state 156

    (79) variable -> VAR LBRACKET index COMMA . index RBRACKET
    (80) index -> . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    index                          shift and go to state 174
    expression                     shift and go to state 121
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 157

    (33) declaration -> CONST type VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 175
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 158

    (38) declaration -> CONST error VAR ASSIGNMENT . expression
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 176
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 159

    (35) declaration -> MATRIX type VAR LBRACKET . expression COMMA expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 177
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 160

    (40) declaration -> MATRIX error VAR LBRACKET . expression COMMA expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 178
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 161

    (55) directions -> direction . COMMA directions
    (56) directions -> direction .

    COMMA           shift and go to state 138
    RBRACKET        reduce using rule 56 (directions -> direction .)


state 162

    (55) directions -> direction COMMA directions .

    RBRACKET        reduce using rule 55 (directions -> direction COMMA directions .)


state 163

    (84) if -> TESTONCE LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 179


state 164

    (85) if -> TESTONCE LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 180


state 165

    (87) while -> TESTREP LBRACKET math_expression RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 181


state 166

    (88) while -> TESTREP LBRACKET compare RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 182


state 167

    (92) function -> FUNC VAR LBRACKET parameters . RBRACKET LBRACKET NEWLINE state RBRACKET

    RBRACKET        shift and go to state 183


state 168

    (93) function -> FUNC VAR LBRACKET RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 184


state 169

    (102) parameters -> type . VAR COMMA parameters
    (103) parameters -> type . VAR

    VAR             shift and go to state 185


state 170

    (95) function_call -> CALL VAR LBRACKET vars . RBRACKET

    RBRACKET        shift and go to state 186


state 171

    (96) function_call -> CALL VAR LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    error           reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    EQ              reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    LESS            reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    GREATER         reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    NOTEQ           reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PLUS            reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    MINUS           reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    STAR            reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    DIV             reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    PROCENT         reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)
    COMMA           reduce using rule 96 (function_call -> CALL VAR LBRACKET RBRACKET .)


state 172

    (99) function_call -> CALL VAR LBRACKET error . RBRACKET

    RBRACKET        shift and go to state 187


state 173

    (97) function_call -> VAR LBRACKET vars RBRACKET error .

    SEMICOLON       reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    error           reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    EQ              reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    LESS            reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    GREATER         reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    NOTEQ           reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    PLUS            reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    MINUS           reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    STAR            reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    DIV             reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    PROCENT         reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    RBRACKET        reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)
    COMMA           reduce using rule 97 (function_call -> VAR LBRACKET vars RBRACKET error .)


state 174

    (79) variable -> VAR LBRACKET index COMMA index . RBRACKET

    RBRACKET        shift and go to state 188


state 175

    (33) declaration -> CONST type VAR ASSIGNMENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 33 (declaration -> CONST type VAR ASSIGNMENT expression .)
    error           reduce using rule 33 (declaration -> CONST type VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 176

    (38) declaration -> CONST error VAR ASSIGNMENT expression .
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    SEMICOLON       reduce using rule 38 (declaration -> CONST error VAR ASSIGNMENT expression .)
    error           reduce using rule 38 (declaration -> CONST error VAR ASSIGNMENT expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 177

    (35) declaration -> MATRIX type VAR LBRACKET expression . COMMA expression RBRACKET
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 189
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 178

    (40) declaration -> MATRIX error VAR LBRACKET expression . COMMA expression RBRACKET
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    COMMA           shift and go to state 190
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 179

    (84) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 191


state 180

    (85) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 192


state 181

    (87) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 193


state 182

    (88) while -> TESTREP LBRACKET compare RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 194


state 183

    (92) function -> FUNC VAR LBRACKET parameters RBRACKET . LBRACKET NEWLINE state RBRACKET

    LBRACKET        shift and go to state 195


state 184

    (93) function -> FUNC VAR LBRACKET RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 196


state 185

    (102) parameters -> type VAR . COMMA parameters
    (103) parameters -> type VAR .

    COMMA           shift and go to state 197
    RBRACKET        reduce using rule 103 (parameters -> type VAR .)


state 186

    (95) function_call -> CALL VAR LBRACKET vars RBRACKET .

    SEMICOLON       reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    error           reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    EQ              reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    LESS            reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    GREATER         reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    NOTEQ           reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PLUS            reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    MINUS           reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    STAR            reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    DIV             reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    PROCENT         reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    RBRACKET        reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)
    COMMA           reduce using rule 95 (function_call -> CALL VAR LBRACKET vars RBRACKET .)


state 187

    (99) function_call -> CALL VAR LBRACKET error RBRACKET .

    SEMICOLON       reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    error           reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    EQ              reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    LESS            reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    GREATER         reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    NOTEQ           reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    PLUS            reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    MINUS           reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    STAR            reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    DIV             reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    PROCENT         reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    RBRACKET        reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)
    COMMA           reduce using rule 99 (function_call -> CALL VAR LBRACKET error RBRACKET .)


state 188

    (79) variable -> VAR LBRACKET index COMMA index RBRACKET .

    ASSIGNMENT      reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    SEMICOLON       reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    error           reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    EQ              reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    LESS            reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    GREATER         reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    NOTEQ           reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PLUS            reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    MINUS           reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    STAR            reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    DIV             reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    PROCENT         reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    RBRACKET        reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)
    COMMA           reduce using rule 79 (variable -> VAR LBRACKET index COMMA index RBRACKET .)


state 189

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA . expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 198
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 190

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA . expression RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (90) robot -> . direction
    (91) robot -> . XRAY
    (81) prison -> . SHARP variable
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM

    LBRACKET        shift and go to state 20
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44
    VAR             shift and go to state 90
    XRAY            shift and go to state 27
    SHARP           shift and go to state 22
    CALL            shift and go to state 29
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43

    expression                     shift and go to state 199
    math_expression                shift and go to state 24
    const                          shift and go to state 33
    variable                       shift and go to state 84
    side                           shift and go to state 34
    compare                        shift and go to state 85
    robot                          shift and go to state 86
    prison                         shift and go to state 87
    function_call                  shift and go to state 88
    direction                      shift and go to state 26

state 191

    (84) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    math_expression                shift and go to state 24
    state                          shift and go to state 200
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 192

    (85) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    compare                        shift and go to state 6
    state                          shift and go to state 201
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 193

    (87) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    math_expression                shift and go to state 24
    state                          shift and go to state 202
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 194

    (88) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    compare                        shift and go to state 6
    state                          shift and go to state 203
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 195

    (92) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET . NEWLINE state RBRACKET

    NEWLINE         shift and go to state 204


state 196

    (93) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    state                          shift and go to state 205
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 197

    (102) parameters -> type VAR COMMA . parameters
    (102) parameters -> . type VAR COMMA parameters
    (103) parameters -> . type VAR
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL

    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32

    type                           shift and go to state 169
    parameters                     shift and go to state 206

state 198

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA expression . RBRACKET
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 207
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 199

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA expression . RBRACKET
    (70) math_expression -> expression . PLUS expression
    (71) math_expression -> expression . MINUS expression
    (72) math_expression -> expression . STAR expression
    (73) math_expression -> expression . DIV expression
    (74) math_expression -> expression . PROCENT expression
    (66) compare -> expression . EQ expression
    (67) compare -> expression . LESS expression
    (68) compare -> expression . GREATER expression
    (69) compare -> expression . NOTEQ expression

    RBRACKET        shift and go to state 208
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    STAR            shift and go to state 74
    DIV             shift and go to state 75
    PROCENT         shift and go to state 76
    EQ              shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    NOTEQ           shift and go to state 71


state 200

    (84) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 209
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    math_expression                shift and go to state 24
    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 201

    (85) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 210
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    compare                        shift and go to state 6
    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 202

    (87) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 211
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    math_expression                shift and go to state 24
    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 203

    (88) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 212
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    compare                        shift and go to state 6
    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 204

    (92) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE . state RBRACKET
    (2) state -> . state statement
    (3) state -> . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    state                          shift and go to state 213
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 205

    (93) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 214
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 206

    (102) parameters -> type VAR COMMA parameters .

    RBRACKET        reduce using rule 102 (parameters -> type VAR COMMA parameters .)


state 207

    (35) declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 35 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 35 (declaration -> MATRIX type VAR LBRACKET expression COMMA expression RBRACKET .)


state 208

    (40) declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .

    SEMICOLON       reduce using rule 40 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)
    error           reduce using rule 40 (declaration -> MATRIX error VAR LBRACKET expression COMMA expression RBRACKET .)


state 209

    (84) if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 84 (if -> TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 210

    (85) if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 85 (if -> TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 211

    (87) while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 87 (while -> TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 212

    (88) while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 88 (while -> TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 213

    (92) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state . RBRACKET
    (2) state -> state . statement
    (4) statement -> . declaration SEMICOLON NEWLINE
    (5) statement -> . assignment SEMICOLON NEWLINE
    (6) statement -> . compare SEMICOLON NEWLINE
    (7) statement -> . prison SEMICOLON NEWLINE
    (8) statement -> . if NEWLINE
    (9) statement -> . while NEWLINE
    (10) statement -> . robot SEMICOLON NEWLINE
    (11) statement -> . function NEWLINE
    (12) statement -> . function_call SEMICOLON NEWLINE
    (13) statement -> . function_return SEMICOLON NEWLINE
    (14) statement -> . declaration SEMICOLON
    (15) statement -> . assignment SEMICOLON
    (16) statement -> . compare SEMICOLON
    (17) statement -> . prison SEMICOLON
    (18) statement -> . if
    (19) statement -> . while
    (20) statement -> . robot SEMICOLON
    (21) statement -> . function
    (22) statement -> . function_call SEMICOLON
    (23) statement -> . function_return SEMICOLON
    (24) statement -> . declaration error NEWLINE
    (25) statement -> . assignment error NEWLINE
    (26) statement -> . compare error NEWLINE
    (27) statement -> . prison error NEWLINE
    (28) statement -> . robot error NEWLINE
    (29) statement -> . function_call error NEWLINE
    (30) statement -> . function_return error NEWLINE
    (31) declaration -> . type VAR
    (32) declaration -> . type VAR ASSIGNMENT expression
    (33) declaration -> . CONST type VAR ASSIGNMENT expression
    (34) declaration -> . MATRIX type VAR
    (35) declaration -> . MATRIX type VAR LBRACKET expression COMMA expression RBRACKET
    (36) declaration -> . error VAR
    (37) declaration -> . error VAR ASSIGNMENT expression
    (38) declaration -> . CONST error VAR ASSIGNMENT expression
    (39) declaration -> . MATRIX error VAR
    (40) declaration -> . MATRIX error VAR LBRACKET expression COMMA expression RBRACKET
    (82) assignment -> . variable ASSIGNMENT expression
    (83) assignment -> . variable ASSIGNMENT error
    (66) compare -> . expression EQ expression
    (67) compare -> . expression LESS expression
    (68) compare -> . expression GREATER expression
    (69) compare -> . expression NOTEQ expression
    (81) prison -> . SHARP variable
    (84) if -> . TESTONCE LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (85) if -> . TESTONCE LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (86) if -> . TESTONCE error
    (87) while -> . TESTREP LBRACKET math_expression RBRACKET LBRACKET NEWLINE state RBRACKET
    (88) while -> . TESTREP LBRACKET compare RBRACKET LBRACKET NEWLINE state RBRACKET
    (89) while -> . TESTREP error
    (90) robot -> . direction
    (91) robot -> . XRAY
    (92) function -> . FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET
    (93) function -> . FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET
    (95) function_call -> . CALL VAR LBRACKET vars RBRACKET
    (96) function_call -> . CALL VAR LBRACKET RBRACKET
    (97) function_call -> . VAR LBRACKET vars RBRACKET error
    (98) function_call -> . VAR LBRACKET RBRACKET error
    (99) function_call -> . CALL VAR LBRACKET error RBRACKET
    (94) function_return -> . variable
    (41) type -> . SIGNED
    (42) type -> . UNSIGNED
    (43) type -> . CELL
    (78) variable -> . VAR
    (79) variable -> . VAR LBRACKET index COMMA index RBRACKET
    (44) expression -> . math_expression
    (45) expression -> . const
    (46) expression -> . variable
    (47) expression -> . side
    (48) expression -> . compare
    (49) expression -> . robot
    (50) expression -> . prison
    (51) expression -> . function_call
    (52) expression -> . LBRACKET expression RBRACKET
    (57) direction -> . TOP
    (58) direction -> . NTOP
    (59) direction -> . LEFT
    (60) direction -> . NLEFT
    (61) direction -> . RIGHT
    (62) direction -> . NRIGHT
    (63) direction -> . DOWN
    (64) direction -> . NDOWN
    (65) direction -> . BOTTOM
    (70) math_expression -> . expression PLUS expression
    (71) math_expression -> . expression MINUS expression
    (72) math_expression -> . expression STAR expression
    (73) math_expression -> . expression DIV expression
    (74) math_expression -> . expression PROCENT expression
    (75) const -> . DECIMAL
    (76) const -> . UDECIMAL
    (77) const -> . MINUS DECIMAL
    (53) side -> . LBRACKET directions RBRACKET
    (54) side -> . LBRACKET error RBRACKET

    RBRACKET        shift and go to state 215
    CONST           shift and go to state 18
    MATRIX          shift and go to state 19
    error           shift and go to state 14
    SHARP           shift and go to state 22
    TESTONCE        shift and go to state 23
    TESTREP         shift and go to state 25
    XRAY            shift and go to state 27
    FUNC            shift and go to state 28
    CALL            shift and go to state 29
    VAR             shift and go to state 16
    SIGNED          shift and go to state 30
    UNSIGNED        shift and go to state 31
    CELL            shift and go to state 32
    LBRACKET        shift and go to state 20
    TOP             shift and go to state 35
    NTOP            shift and go to state 36
    LEFT            shift and go to state 37
    NLEFT           shift and go to state 38
    RIGHT           shift and go to state 39
    NRIGHT          shift and go to state 40
    DOWN            shift and go to state 41
    NDOWN           shift and go to state 42
    BOTTOM          shift and go to state 43
    DECIMAL         shift and go to state 45
    UDECIMAL        shift and go to state 46
    MINUS           shift and go to state 44

    statement                      shift and go to state 47
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    compare                        shift and go to state 6
    prison                         shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    robot                          shift and go to state 10
    function                       shift and go to state 11
    function_call                  shift and go to state 12
    function_return                shift and go to state 13
    type                           shift and go to state 15
    expression                     shift and go to state 17
    variable                       shift and go to state 21
    math_expression                shift and go to state 24
    direction                      shift and go to state 26
    const                          shift and go to state 33
    side                           shift and go to state 34

state 214

    (93) function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 93 (function -> FUNC VAR LBRACKET RBRACKET LBRACKET NEWLINE state RBRACKET .)


state 215

    (92) function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .

    NEWLINE         reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CONST           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MATRIX          reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    error           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SHARP           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTONCE        reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TESTREP         reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    XRAY            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    FUNC            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CALL            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    VAR             reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    SIGNED          reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UNSIGNED        reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    CELL            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LBRACKET        reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    TOP             reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NTOP            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    LEFT            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NLEFT           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RIGHT           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NRIGHT          reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DOWN            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    NDOWN           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    BOTTOM          reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    DECIMAL         reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    UDECIMAL        reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    MINUS           reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    $end            reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)
    RBRACKET        reduce using rule 92 (function -> FUNC VAR LBRACKET parameters RBRACKET LBRACKET NEWLINE state RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for STAR in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for LESS in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 126 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for STAR in state 127 resolved as shift
WARNING: shift/reduce conflict for DIV in state 127 resolved as shift
WARNING: shift/reduce conflict for PROCENT in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 127 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 89 resolved using rule (directions -> direction)
WARNING: rejected rule (robot -> direction) in state 89
